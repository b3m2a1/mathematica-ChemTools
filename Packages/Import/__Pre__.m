(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(* ::Text:: *)
(*
	A preloaded file before any of the other files are imported.
	Get is run on it rather than the standard declaration scraping procedure.
*)



(* ::Subsubsection::Closed:: *)
(*MolTable*)



If[!TrueQ[`Private`$ImportRegistered["MolTable"]],
	ImportExport`RegisterImport[
		"MolTable",
		ChemImportMolTable,
		"FunctionChannels"->{"Streams"}
		];
	ImportExport`RegisterImport[
		"ZMatrix",
		ChemImportZMatrix,
		"FunctionChannels"->{"Streams"}
		];
	`Private`$ImportRegistered["MolTable"]=True
	]


(* ::Subsubsection::Closed:: *)
(*CubeFile*)



If[!TrueQ[`Private`$ImportRegistered["CubeFile"]],
	Map[
		ImportExport`RegisterImport[
			"CubeFile",
			{
				"Association":>
					Function[
						{"Association"->CubeFileGrid@CubeFileRead[##]}
						],
				"Grid":>
					Function[
						{"Grid"->CubeFileGrid@CubeFileRead[##]}
						],
				"InterpolatingFunction":>
					Function[
						{"InterpolatingFunction"->CubeFileFunction@CubeFileRead[##]}
						],
				"Elements":>
					Function[{"Elements"->{"Association", "Grid", "InterpolatingFunction"}}],
				CubeFileRead
				},
			"FunctionChannels"->{"Streams"}
			]&,
		{"cube", "CubeFile"}
		];
	`Private`$ImportRegistered["CubeFile"]=True
	];


(* ::Subsubsection::Closed:: *)
(*GJF*)



If[!TrueQ[`Private`$ImportRegistered["GaussianJob"]],
	Map[
		ImportExport`RegisterImport[
			#,
			{
				"MolTable":>
					Function[{"MolTable"->ImportGaussianJob[#, "MolTable"]}],
				"Elements":>
					Function[{"Elements"->{"MolTable"}}],
				ImportGaussianJob
				}
			]&,
		{"GJF", "GaussianJob"}
		];
	`Private`$ImportRegistered["GaussianJob"]=True
	];


(* ::Subsubsection::Closed:: *)
(*FChk*)



If[!TrueQ[`Private`$ImportRegistered["FormattedCheckpoint"]],
	Map[
		ImportExport`RegisterImport[
			#,
			{
				"MolTable":>
					Function[{"MolTable"->ImportFormattedCheckpointFile[#, "MolTable"]}],
				"Elements":>
					Function[{"Elements"->{"MolTable"}}],
				ImportFormattedCheckpointFile
				},
			"FunctionChannels"->{"Streams"}
			]&,
		{"FCHK", "FormattedCheckpoint"}
		];
	`Private`$ImportRegistered["FormattedCheckpoint"]=True
	];


(* ::Subsubsection::Closed:: *)
(*GaussianLog*)



`Private`$GLKS=
	Join[
		{
			"StartDateTime",
			"CartesianCoordinates",
			"MullikenCharges",
			"MultipoleMoments",
			"ZMatrix",
			"ZMatrixVariables",
			"Scan",
			"OptimizationScan",
			"Blurb",
			"ComputerTimeElapsed",
			"EndDateTime"
			},
		{
			"ScanQuantityArray",
			"OptimizationScanQuantityArray",
			"OptimizationScanZMatrices"
			}
		]


If[!TrueQ[`Private`$ImportRegistered["GaussianLog"]],
	Map[
		ImportExport`RegisterImport[
			#,
			Join[
				Map[
					Function[
						With[{`Private`elname=#},
							`Private`elname:>
								Function[{`Private`elname->ImportGaussianLog[#, `Private`elname]}]
							]
						],
						`Private`$GLKS
					],
				{
					"Elements":>
						Function[
							{
								"Elements"->
									`Private`$GLKS
								}
							],
					ImportGaussianLog
					}
				],
			"FunctionChannels"->{"Streams"}
			]&,
		{"GaussianLog"}
		];
	`Private`$ImportRegistered["GaussianLog"]=True
	];



