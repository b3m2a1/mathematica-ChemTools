(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



CubeFiles::usage="Pulls the cube files from a Psi4Output association";
CubeFileRead::usage="Reads in a cube file";
CubeFileGrid::usage=
	"Calculates the grid defined by the cube file";
CubeFileFunction::usage=
	"Creates an interpolating function from the cube file grid";
CubeFileCuboid::usage=
	"Finds the bounding box of the cube grid and returns the cuboid of it";
CubeFileMinMax::usage=
	"Provides the min and max points on the cube grid";
CubeFileIsoSurface::usage=
	"Finds an isosurface over the cube file grid";
CubeFileDensityPlot::usage=
	"Plots the ListDensityPlot of the cube file";
CubeFileContourPlot::usage=
	"Plots the ListContourPlot of the cube file";


Begin["`Private`"];


(* ::Subsection:: *)
(*Cube files*)



(* ::Subsubsection::Closed:: *)
(*Cache*)



If[!AssociationQ@$CubeFileCache,$CubeFileCache=<||>];
If[!(IntegerQ@$CubeFileCacheDepth||$CubeFileCacheDepth===\[Infinity]),$CubeFileCacheDepth=2];


CubeFileCachePush[key_,prop_,val_]:=
	If[KeyMemberQ[$CubeFileCache,key],
		$CubeFileCache[key,prop]=val,
		If[Length[$CubeFileCache]>=$CubeFileCacheDepth,
			KeyDropFrom[$CubeFileCache,First@Keys@$CubeFileCache]
			];
		$CubeFileCache[key]=<|prop->val|>
		];
CubeFileCachePush[key_,a_Association]:=
	If[KeyMemberQ[$CubeFileCache,key],
		$CubeFileCache[key]=Join[$CubeFileCache[key],a],
		If[Length[$CubeFileCache]>=$CubeFileCacheDepth,
			KeyDropFrom[$CubeFileCache,First@Keys@$CubeFileCache]
			];
		$CubeFileCache[key]=a
		];
CubeFileCachePush[key_][args__]:=
	CubeFileCachePush[key,args];


CubeFileCacheLookup[key_]:=
	Lookup[$CubeFileCache,key,
		SelectFirst[
			$CubeFileCache,
			#["ID"]===key&,
			Missing["KeyAbsent",key]
			]
		];
CubeFileCacheLookup[key_,prop_]:=
	Replace[CubeFileCacheLookup[key],
		a_Association:>a[prop]
		];


(* ::Subsubsection::Closed:: *)
(*Files*)



CubeFiles[a_Association|Psi4Output[a_Association]]:=
	Select[Keys@a["OutputFiles"],StringMatchQ["*.cube"]]


(* ::Subsubsection::Closed:: *)
(*Read*)



iCubeFileRead[stream_InputStream]:=
With[{
		comments=ReadList[stream,String,2],
		atomsOrigin=First@ImportString[First@ReadList[stream,String,1],"Table"],
		xAxis=First@ImportString[First@ReadList[stream,String,1],"Table"],
		yAxis=First@ImportString[First@ReadList[stream,String,1],"Table"],
		zAxis=First@ImportString[First@ReadList[stream,String,1],"Table"]
		},
		With[{
			atomSpecs=
				First@ImportString[#,"Table"]&/@
					ReadList[stream,String,First@atomsOrigin],
			pointsBlock=Import[stream,"Table"]
			},
			Close@stream;
			With[{
				base=
					<|
						"Comments"->StringJoin@Riffle[comments,"\n"],
						"AtomNumber"->First@atomsOrigin,
						"Origin"->atomsOrigin[[2;;]],
						"XDivisions"->Abs@First@xAxis,
						"XAxis"->Normalize[xAxis[[2;;]]],
						"XWidth"->Norm[zAxis[[2;;]]],
						"XUnits"->
							If[Sign@First@xAxis>0,
								Quantity["BohrRadius"],
								Quantity["Angstroms"]
								],
						"YDivisions"->First@yAxis,
						"YAxis"->
							Normalize[yAxis[[2;;]]],
						"YWidth"->Norm[zAxis[[2;;]]],
						"YUnits"->
							If[Sign@First@yAxis>0,
								Quantity["BohrRadius"],
								Quantity["Angstroms"]
								],
						"ZDivisions"->First@zAxis,
						"ZAxis"->Normalize[zAxis[[2;;]]],
						"ZWidth"->Norm[zAxis[[2;;]]],
						"ZUnits"->
							If[Sign@First@zAxis>0,
								Quantity["BohrRadius"],
								Quantity["Angstroms"]
								],
						"PointValues"->pointsBlock
						|>
					},
				Append[base,
					"Atoms"->
						Map[
							<|
								"Number"->#[[1]],
								"Charge(?)"->#[[2]],
								"Position"->
									QuantityMagnitude@
										UnitConvert[
											QuantityArray[
												Total[Lookup[base,{"XAxis","YAxis","ZAxis"}]*#[[3;;]]],
												QuantityUnit/@Lookup[base,{"XUnits","YUnits","ZUnits"}]
												],
											"Angstroms"
											]
								|>&,
							atomSpecs
							]
					]
				]
			]
		];


CubeFileRead[f_String?FileExistsQ]:=
	With[{hash=FileHash[f]},
		Replace[
			CubeFileCacheLookup[hash],
			_Missing:>
				With[{a=Append[iCubeFileRead@OpenRead@f,"ID"->hash]},
					CubeFileCachePush[Hash[a]][a]
					]
			]
		];
CubeFileRead[s_String]:=
	With[{hash=Hash[s]},
		Replace[
			CubeFileCacheLookup[hash],
			_Missing:>
				With[{a=Append[iCubeFileRead@StringToStream@s,"ID"->hash]},
					CubeFileCachePush[Hash[a]][a]
					]
			]
		];


CubeFileRead[
	a_Association|Psi4Output[a_Association],
	key:_Integer|_String:1
	]:=
	CubeFileRead@a["OutputFiles",CubeFiles[a][[key]]]


(* ::Subsubsection::Closed:: *)
(*Scaling*)



CubeFileScaling[a_Association,atomPositions_]:=
	With[{aps=Cases[atomPositions,{_?NumericQ,_?NumericQ,_?NumericQ},\[Infinity]]},
		Replace[
			First@
				FirstPosition[aps/.({(0|0.)..}->None),
					{__?NumericQ}
					],{
			i_Integer:>
				With[{testFactor=a["Atoms"][[i]]["Position"]/.(0|0.)->1},
					Replace[
						FirstCase[(aps[[i]]/testFactor),Except[(0|0.)]],
						_Missing:>$Failed
						]
					],
			_->$Failed
			}
			]
		];


(* ::Subsubsection::Closed:: *)
(*Grid*)



CubeFileGrid[a_Association?(KeyMemberQ["Origin"])]:=
	Replace[
		CubeFileCacheLookup[Hash[a],"Grid"],
		_Missing:>
			With[{grid=
				With[{
					o=
						QuantityMagnitude@
							UnitConvert[
								QuantityArray[
									a["Origin"],
									QuantityUnit/@Lookup[a,{"XUnits","YUnits","ZUnits"}]
									],
								"Angstroms"
								],
					xRange=a["XDivisions"],
					xUnit=
						QuantityMagnitude/@
							UnitConvert[Times@@Lookup[a,{"XAxis","XUnits","XWidth"}],"Angstroms"],
					yRange=a["YDivisions"],
					yUnit=
						QuantityMagnitude/@
							UnitConvert[Times@@Lookup[a,{"YAxis","YUnits","YWidth"}],"Angstroms"],
					zRange=a["ZDivisions"],
					zUnit=
						QuantityMagnitude/@
							UnitConvert[Times@@Lookup[a,{"ZAxis","ZUnits","ZWidth"}],"Angstroms"]
					},
					With[{
						pvs=
							Flatten@
								Replace[a["PointValues"],
									{
										Except[_List]->None,
										l_:>l
										}]
						},
						If[pvs===None,
							Table[
								{(x*xUnit+y*yUnit+z*zUnit)+o,0.},
								{x,xRange},
								{y,yRange},
								{z,zRange}
								],
							Table[
								{
									(x*xUnit+y*yUnit+z*zUnit)+o,
									pvs[[1+((z-1)+(y-1)*zRange+(x-1)*(yRange*zRange))]]
									},
								{x,xRange},
								{y,yRange},
								{z,zRange}
								]
							]
						]
					]
				},
				CubeFileCachePush[Hash[a],Append[a,"Grid"->grid]];
				grid
				]
			];


(* ::Subsubsection::Closed:: *)
(*Function*)



iCubeFileFunction[grid:{{_?NumericQ,_?NumericQ,_?NumericQ,_?NumericQ},__}]:=
	With[{f=Interpolation@grid},
		Compile[{{pos,_Real,1}},
			f[pos[[1]],pos[[2]],pos[[3]]]
			]
		];
iCubeFileFunction[
	grid:
		{
			{
				{	
					{{_?NumericQ,_?NumericQ,_?NumericQ},_?NumericQ},
					__
					},
				__
				},
			__
			}
	]:=
	iCubeFileFunction[Flatten/@Flatten[grid,2]];
CubeFileFunction[l_List]:=
	With[{res=iCubeFileFunction[l]},
		res/;Head[res]=!=iCubeFileFunction
		];
CubeFileFunction[a_Association?(KeyMemberQ["Origin"])]:=
	Replace[
		CubeFileCacheLookup[Hash[a],"Function"],
		_Missing:>
			With[{f=iCubeFileFunction[CubeFileGrid[a]]},
				If[MatchQ[f,_CompiledFunction],
					CubeFileCachePush[
						Hash[a],
						Append[a,"Function"->f]
						]
					];
				f
				]
		]


(* ::Subsubsection::Closed:: *)
(*Cuboid*)



iCubeFileCuboid[
	grid:{{_?NumericQ,_?NumericQ,_?NumericQ,_?NumericQ},__}
	]:=
		Cuboid@@CoordinateBoundingBox@grid[[All,;;3]];
iCubeFileCuboid[
	grid:
		{
			{
				{	
					{{_?NumericQ,_?NumericQ,_?NumericQ},_?NumericQ},
					__
					},
				__
				},
			__
			}
	]:=
		Cuboid@@CoordinateBoundingBox@grid[[All,All,All,1]];
CubeFileCuboid[grid_List]:=
	With[{res=iCubeFileCuboid[grid]},
		res/;Head[res]=!=CubeFileCuboid
		];
CubeFileCuboid[a_Association?(KeyMemberQ["Origin"])]:=
	CubeFileCuboid@CubeFileGrid[a];


(* ::Subsubsection::Closed:: *)
(*MinMax*)



CubeFileMinMax[grid_]:=
	With[{flat=Flatten[grid,2]},
		{MinimalBy[flat,Last],MaximalBy[flat,Last]}
		];
CubeFileMinMax[a_Association?(KeyMemberQ["PointValues"]),scaling:_Real:1.]:=
	CubeFileMinMax@CubeFileGrid[a,scaling];
CubeFileMinMax[a_Association?(KeyMemberQ["PointValues"]),atomset_List,
	isoVal_Real,tolerance:_Real|Automatic:Automatic]:=
	CubeFileMinMax@CubeFileGrid[a,CubeFileScaling[a,atomset]];


(* ::Subsubsection::Closed:: *)
(*IsoSurface*)



CubeFileIsoSurface[grid_List,
	isoVal:_Real|Automatic:Automatic,
	tolerance:_Real|Automatic:Automatic]:=
	With[{flat=Flatten[grid,2]},
		With[{valTol=
			Replace[{isoVal,tolerance},
				{Automatic,_}|{_,Automatic}:>
					With[{med=Median@(Last/@flat)},
						{
							Replace[isoVal,Automatic:>med],
							Replace[tolerance,Automatic:>(med/10)]
							}
						]
				]},
			With[{op=Between[First@valTol+{-Last@valTol,Last@valTol}]},
				Select[flat,op@*Last]
				]
			]
		];
CubeFileIsoSurface[a_Association,scaling:_Real:1.,
	isoVal:_Real|Automatic:Automatic,tolerance:_Real|Automatic:Automatic]:=
	CubeFileIsoSurface[CubeFileGrid[a,scaling],isoVal,tolerance];
CubeFileIsoSurface[a_Association,atomset_List,
	isoVal:_Real|Automatic:Automatic,tolerance:_Real|Automatic:Automatic]:=
	CubeFileIsoSurface[a,CubeFileScaling[a,atomset],
		isoVal,tolerance];


(* ::Subsubsection::Closed:: *)
(*DensityPlot*)



Options[CubeFileDensityPlot]=Options@ListDensityPlot3D;
iCubeFileDensityPlot[
	grid:{{_?NumericQ,_?NumericQ,_?NumericQ,_?NumericQ},__},
	ops:OptionsPattern[]
	]:=
	With[{r=MinMax@(Last/@grid)},
		With[{resc=ReplacePart[#,-1->Rescale[Last@#,r]]&/@grid},
			ListDensityPlot3D[resc,ops]
			]
		];
iCubeFileDensityPlot[
	grid:
		{
			{
				{
					{{_?NumericQ,_?NumericQ,_?NumericQ},_?NumericQ},
					__
					},
				__
				},
			__
			},
	ops:OptionsPattern[]
	]:=
	iCubeFileDensityPlot[Flatten/@Flatten[grid,2],ops];
CubeFileDensityPlot[
	grid_List,
	ops:OptionsPattern[]
	]:=
	With[{res=iCubeFileDensityPlot[grid,ops]},
		res/;Head[res]=!=iCubeFileDensityPlot
		];
CubeFileDensityPlot[
	a_Association?(KeyMemberQ["PointValues"]),
	ops:OptionsPattern[]
	]:=
	CubeFileDensityPlot[
		CubeFileGrid[a],
		ops
		]


(* ::Subsubsection::Closed:: *)
(*ContourPlot*)



Options[CubeFileContourPlot]=Options@ListContourPlot3D;


iCubeFileContourPlot[
	grid:{{_?NumericQ,_?NumericQ,_?NumericQ,_?NumericQ},__},
	ops:OptionsPattern[]
	]:=
	With[{r=MinMax@(Last/@grid)},
		With[{resc=ReplacePart[#,-1->Rescale[Last@#,r]]&/@grid},
			ListContourPlot3D@resc
			]
		];
iCubeFileContourPlot[
	grid:
		{
			{
				{
					{{_?NumericQ,_?NumericQ,_?NumericQ},_?NumericQ},
					__},
				__},
			__},
	ops:OptionsPattern[]
	]:=
	iCubeFileContourPlot[Flatten/@Flatten[grid,2],ops];
CubeFileContourPlot[
	grid_List,
	ops:OptionsPattern[]
	]:=
	With[{res=iCubeFileContourPlot[grid]},
		res/;Head[res]=!=iCubeFileContourPlot
		];
CubeFileContourPlot[
	a_Association?(KeyMemberQ["PointValues"]),
	ops:OptionsPattern[]
	]:=
	CubeFileContourPlot[
		CubeFileGrid[a],
		ops
		]


(* ::Subsection:: *)
(*Import*)



(*Map[
	ImportExport`RegisterImport[
		"CubeFile",
		{
			"Association":>
				Function[
					{"Association"->CubeFileGrid@CubeFileRead[##]}
					],
			"Grid":>
				Function[
					{"Grid"->CubeFileGrid@CubeFileRead[##]}
					],
			"InterpolatingFunction":>
				Function[
					{"InterpolatingFunction"->CubeFileFunction@CubeFileRead[##]}
					],
			"Elements":>
				Function[{"Elements"->{"Association", "Grid", "InterpolatingFunction"}}],
			CubeFileRead
			},
		"FunctionChannels"->{"Streams"}
		]&,
	{"cube", "CubeFile"}
	]*)


End[];



