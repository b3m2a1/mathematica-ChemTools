(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(*ChemUtilsGraphics::usage=
	"Generates Graphics for a set of atoms and stuff";*)
ChemUtilsGraphics3D::usage=
	"Generates Graphics3D for a set of atoms and stuff";


Begin["`Private`"];


(* ::Subsubsubsection::Closed:: *)
(*AtomColors*)



ChemUtilsGraphics3DAtomColors[elSet_]:=
	ChemDataLookup[
		elSet[[All, 1]],
		"AtomColors"
		];


(* ::Subsubsubsection::Closed:: *)
(*AtomSpheres*)



$ChemUtilsGraphics3DAtomicRadiusScaling=1/4;


ChemUtilsGraphics3DAtomSpheres[elSet_]:=
	MapThread[
		Sphere,
		{
			elSet[[All, 2]],
			$ChemUtilsGraphics3DAtomicRadiusScaling*
				QuantityMagnitude@
					ChemDataLookup[
						elSet[[All, 1]],
						"Radius"
						]/100
			}
		];


(* ::Subsubsubsection::Closed:: *)
(*Atoms*)



ChemUtilsGraphics3DAtoms[elSet_]:=
	Thread[
		{
			ChemUtilsGraphics3DAtomColors[elSet],
			ChemUtilsGraphics3DAtomSpheres[elSet]
			}
		]


(* ::Subsubsubsection::Closed:: *)
(*DistBasedBonds*)



(* ::Text:: *)
(*
	
	Guess bonding structure based on distances

*)



ChemUtilsBondVecCylinder[{pt1_, pt2_}, {col1_, col2_}, {rad1_, rad2_}]:=
	With[{dvec=pt2-pt1//Normalize},
		With[{v1=pt1+rad1*dvec, v2=pt2-rad2*dvec},
			{
				{col1, Cylinder[{pt1, Mean[{v2, v1}]}, .1]},
				{col2, Cylinder[{Mean[{v2, v1}], pt2}, .1]}
				}
			]
		]


$ChemUtilsGraphics3DDistBasedBondsTol=.1;


ChemUtilsGraphics3DDistBasedBonds[elSet_]:=
	Module[
		{
			dm=
				DistanceMatrix[elSet[[All, 2]]],
			pairs,
			cols,
			rads,
			pts
			},
		pairs=
			Part[elSet, #]&/@
				Flatten[
					Table[
						Table[
							With[
								{
									bd=
										(1+$ChemUtilsGraphics3DDistBasedBondsTol)*
											ChemDataLookup[
												Query@{elSet[[i, 1]], elSet[[j, 1]]}, 
												"BondDistances"
												]
									},
								If[bd>dm[[i, j]],
									{i, j},
									Nothing
									]
								], 
							{j, i+1, Length@elSet}
							],
						{i, 1, Length@elSet-1}
						],
					1
					];
		cols=
			ChemDataLookup[#[[All, 1]], "AtomColors"]&/@pairs;
		rads=
			$ChemUtilsGraphics3DAtomicRadiusScaling*
				QuantityMagnitude@ChemDataLookup[#[[All, 1]], "Radius"]/100&/@pairs;
		pts=
			#[[All, 2]]&/@pairs;
		MapThread[
			ChemUtilsBondVecCylinder,
			{
				pts,
				cols,
				rads
				}
			]
		]


(* ::Subsubsubsection::Closed:: *)
(*Graphics3D*)



Options[ChemUtilsGraphics3D]=
	Options[Graphics3D]
ChemUtilsGraphics3D[elSet_List, ops:OptionsPattern[]]:=
	With[
		{
			ats=ChemUtilsGraphics3DAtoms[elSet],
			bds=ChemUtilsGraphics3DDistBasedBonds[elSet]
			},
		Graphics3D[
			{
				ats, 
				EdgeForm[None],
				bds
				},
			ops,
			Boxed->False,
			Ticks->False,
			Lighting->"Neutral"
			]
		]


End[];



