(* ::Package:: *)

(* Autogenerated Package *)

(* ::Text:: *)
(*
	For now we\[CloseCurlyQuote]ll assume function output values are scalar
*)



GridFunctionObject::usage=
  "A object-oriented interface into functions defined over grids";


Begin["`Private`"];


RegisterInterface[
  GridFunctionObject,
  {"Grid", "Values"},
  "Validator"->
    GridFunctionObjectQ,
  "Constructor"->
    ConstructGridFunction,
  "MutationFunctions"->{"Keys"},
  "AccessorFunctions"->
    <|
      "Keys"->GFKeyPart, 
      "Parts"->GFPart
      |>,
  "NormalFunction"->GFArray,
  "Protect"->True
  ]


(* ::Subsection:: *)
(*Properties*)



(* ::Subsubsection::Closed:: *)
(*Properties*)



InterfaceAttribute[GridFunctionObject]@
  f_GridFunctionObject["Dimensions"]:=
    GridDimensions[f["Grid"]];
InterfaceAttribute[GridFunctionObject]@
  f_GridFunctionObject["Dimension"]:=
    GridDimension[f["Grid"]];
InterfaceAttribute[GridFunctionObject]@
  f_GridFunctionObject["MeshSpacings"]:=
    GridMeshSpacings[f["Grid"]];


InterfaceAttribute[GridFunctionObject]@
  f_GridFunctionObject["Points"]:=
    GFPoints[f];


(* ::Subsubsection::Closed:: *)
(*Method*)



InterfaceMethod[GridFunctionObject]@
  f_GridFunctionObject["Product"][o__GridFunctionObject]:=
    GFKroneckerProduct[f, o];
InterfaceMethod[GridFunctionObject]@
  f_GridFunctionObject["Plot"][ops___]:=
    GFPlot[f, ops];
InterfaceMethod[GridFunctionObject]@
  f_GridFunctionObject["Compile"][spec___]:=
    GFCompile[f, spec];
InterfaceMethod[GridFunctionObject]@
  g_GridFunctionObject["Slice"][n__Integer]:=
    GFSlice[g, n];
InterfaceMethod[GridFunctionObject]@
  g_GridFunctionObject["Add"][f__GridFunctionObject]:=
    GFAdd[g, f];
InterfaceMethod[GridFunctionObject]@
  g_GridFunctionObject["Multiply"][f__GridFunctionObject]:=
    GFMultiply[g, f];
InterfaceMethod[GridFunctionObject]@
  g_GridFunctionObject["Subtract"][f__GridFunctionObject]:=
    GFSubtract[g, f];
InterfaceMethod[GridFunctionObject]@
  g_GridFunctionObject["Divide"][f__GridFunctionObject]:=
    GFDivide[g, f];


(* ::Subsubsection::Closed:: *)
(*Overrides*)



(* ::Subsubsubsection::Closed:: *)
(*Interpolation*)



InterfaceOverride[GridFunctionObject]@
  Interpolation[
    f_GridFunctionObject,
    a___
    ]:=
    GFInterpolation[f, a];


(* ::Subsubsubsection::Closed:: *)
(*MinMax*)



InterfaceOverride[GridFunctionObject]@
  MinMax[
    f_GridFunctionObject
    ]:=
    GFMinMax[f];


(* ::Subsubsubsection::Closed:: *)
(*Map*)



InterfaceOverride[GridFunctionObject]@
  Map[
    fn_,
    f_GridFunctionObject
    ]:=
    GFMap[fn, f];


(* ::Subsubsubsection::Closed:: *)
(*Translate*)



InterfaceOverride[GridFunctionObject]@
  Translate[
    f_GridFunctionObject,
    n_
    ]:=
    With[{res=GFShift[f, n]},
      res/;Head[res]=!=GFShift
      ];


(* ::Subsubsubsection::Closed:: *)
(*Scale*)



InterfaceOverride[GridFunctionObject]@
  Scale[
    f_GridFunctionObject,
    n_
    ]:=
    With[{res=GFScale[f, n]},
      res/;Head[res]=!=GFScale
      ];


(* ::Subsubsubsection::Closed:: *)
(*Rescale*)



InterfaceOverride[GridFunctionObject]@
  Rescale[
    f_GridFunctionObject,
    a__
    ]:=
    GFRescale[f, a];


(* ::Subsubsubsection::Closed:: *)
(*Threshold*)



InterfaceOverride[GridFunctionObject]@
  Threshold[
    f_GridFunctionObject,
    a__
    ]:=
    GFChop[f, a];


(* ::Subsubsubsection::Closed:: *)
(*Permute*)



InterfaceOverride[GridFunctionObject]@
  Permute[
    f_GridFunctionObject,
    spec_
    ]:=
    GFPermute[f, spec];


(* ::Subsubsubsection::Closed:: *)
(*Transpose*)



InterfaceOverride[GridFunctionObject]@
  Transpose[
    f_GridFunctionObject,
    spec___
    ]:=
    GFTranspose[f, spec]


End[];



