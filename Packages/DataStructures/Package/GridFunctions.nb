Notebook[{

Cell[CellGroupData[{
Cell["\[LeftCeiling]Grid Function Tools\[RightFloor]", "CodeSection",
 Evaluatable->True,ExpressionUUID->"c53a16d2-e338-4337-96a0-1a1051ce7185"],

Cell[CellGroupData[{

Cell["\[LeftCeiling]Constructors\[RightFloor]", "CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"000a2dc2-c1fd-4610-8caf-43de47a7078d"],

Cell[BoxData[{
 RowBox[{"ConstructGridFunction", ";"}], "\n", 
 RowBox[{"GridFunctionObjectQ", 
  ";"}]}], "CodeInput",ExpressionUUID->"4c80ec38-2181-4b47-b39e-85fbc6557548"]\

}, Closed]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]Parts\[RightFloor]", "CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"b6db1bdf-2c83-4bb4-a8d4-6a670d4fde30"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"GFPart", "::", "usage"}], "=", "\n", "\t", 
   "\"\<Applies part to a grid function\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"GFKeyPart", "::", "usage"}], "=", "\n", "\t", 
   "\"\<Applies key lookup to a grid function\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"GFSlice", "::", "usage"}], "=", "\n", "\t", 
   "\"\<Slices at level n\>\""}], 
  ";"}]}], "CodeInput",ExpressionUUID->"0683456a-e69c-4b41-9668-ec499b04160b"]\

}, Closed]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]Structural\[RightFloor]", "CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"35c26e29-ca06-4961-9791-7098d1b8fc12"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"GFPoints", "::", "usage"}], "=", "\n", "\t", 
   "\"\<Flattens down to the coordinate points\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"GFArray", "::", "usage"}], "=", "\n", "\t", 
   "\"\<Creates the normal array\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"GFMap", "::", "usage"}], "=", "\n", "\t", 
   "\"\<Maps a function over the function gridpoints\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"GFApply", "::", "usage"}], "=", "\n", "\t", 
   "\"\<Applies a function to the function values\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"GFSort", "::", "usage"}], "=", "\n", "\t", "\"\<\>\""}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"GFTranspose", "::", "usage"}], "=", "\n", "\t", 
   "\"\<Takes a transpose of coordinates in the grid\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"GFPermute", "::", "usage"}], "=", "\n", "\t", 
   "\"\<Permutes coordinates in the grid\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"GFModify", "::", "usage"}], "=", "\"\<\>\""}], 
  ";"}]}], "CodeInput",ExpressionUUID->"d4b2a3d5-b679-424e-a459-eb9b78142f8c"]\

}, Closed]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]Manipulation\[RightFloor]", "CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"ba432d42-51ae-4540-85d8-7bbb1fa23818"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"GFScale", "::", "usage"}], "=", "\"\<\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"GFShift", "::", "usage"}], "=", "\"\<\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"GFRescale", "::", "usage"}], "=", "\"\<\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"GFClip", "::", "usage"}], "=", "\"\<\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"GFChop", "::", "usage"}], "=", "\"\<\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"GFJoin", "::", "usage"}], "=", "\"\<\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"GFGridScale", "::", "usage"}], "=", "\"\<\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"GFGridShift", "::", "usage"}], "=", "\"\<\>\""}], 
  ";"}]}], "CodeInput",ExpressionUUID->"c11e51ee-9c80-4d57-8056-dd7859121ad3"]\

}, Closed]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]Higher-Level\[RightFloor]", "CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"ccc0d89e-0b00-499b-b791-a9d5c8d906df"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"GFCombine", "::", "usage"}], "=", "\n", "\t", 
   "\"\<Combines GridFunctions by value\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"GFAdd", "::", "usage"}], "=", "\n", "\t", 
   "\"\<Raw Plus over GridFunctions\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"GFMultiply", "::", "usage"}], "=", "\n", "\t", 
   "\"\<Raw Times over GridFunctions\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"GFSubtract", "::", "usage"}], "=", "\"\<\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"GFDivide", "::", "usage"}], "=", "\"\<\>\""}], 
  ";"}]}], "CodeInput",ExpressionUUID->"5ca56890-f721-4f5c-ae65-073eaebf2ae8"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"GFDerivative", "::", "usage"}], "=", "\n", "\t", 
   "\"\<Finite difference derivatives\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"GFIntegrate", "::", "usage"}], "=", "\n", "\t", 
   "\"\<Dot-based integration\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
     RowBox[{"GFInterpolate", "::", "usage"}], "=", "\n", "\t", 
     "\"\<Distinct from GFInterpolation in that it does the interpolation by \
hand\>\""}], ";"}], 
   "*)"}]}]}], \
"CodeInput",ExpressionUUID->"28762824-42af-4064-b80f-bad1be83b102"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"GFKroneckerProduct", "::", "usage"}], "=", "\n", "\t", 
   "\"\<Kronecker product over grid functions\>\""}], 
  ";"}]], "CodeInput",ExpressionUUID->"6256be92-7e52-4822-9618-9d29ca9c019f"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"GFCompile", "::", "usage"}], "=", "\n", "\t", 
   "\"\<Clever-ish compilation\>\""}], 
  ";"}]], "CodeInput",ExpressionUUID->"d64ca50f-f7ec-4dbc-84a6-f764ad0e72b4"]
}, Closed]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]Mindless\[RightFloor]", "CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"c848bc19-cf7c-4a32-885c-6a484e383907"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"GFInterpolation", "::", "usage"}], "=", "\n", "\t", "\"\<\>\""}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"GFMinMax", "::", "usage"}], "=", "\n", "\t", "\"\<\>\""}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"GFDimension", "::", "usage"}], "=", "\n", "\t", "\"\<\>\""}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"GFLength", "::", "usage"}], "=", "\n", "\t", "\"\<\>\""}], 
  ";"}]}], "CodeInput",ExpressionUUID->"2366f3a8-e8a3-407a-a76f-d18077c7b912"]\

}, Closed]],

Cell[BoxData[
 RowBox[{
  RowBox[{"Begin", "[", "\"\<`Private`\>\"", "]"}], 
  ";"}]], "InputSection",ExpressionUUID->"eb1d7e10-f3ca-44af-a40a-\
46e42b1adc0b"],

Cell[CellGroupData[{

Cell["\[LeftCeiling]Constructor\[RightFloor]", "CodeSubsection",
 Evaluatable->True,ExpressionUUID->"745511c6-69cb-4ae5-a94d-157222a8031a"],

Cell[CellGroupData[{

Cell["\[LeftCeiling]ConstructGridFunction\[RightFloor]", "CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"777243d6-a881-491f-b267-394a50f6565f"],

Cell[CellGroupData[{

Cell["\[LeftCeiling]validateGFData\[RightFloor]", "CodeSubsubsubsection",
 Evaluatable->True,ExpressionUUID->"0ae295c3-6c37-4359-b070-093ba0673342"],

Cell[BoxData[
 RowBox[{
  RowBox[{"validateGFData", "[", 
   RowBox[{"{", 
    RowBox[{"grid_", ",", " ", "values_"}], "}"}], "]"}], ":=", "\n", "\t", 
  RowBox[{"Module", "[", "\n", "\t\t", 
   RowBox[{
    RowBox[{"{", "\n", "\t\t\t", "dn", "\n", "\t\t\t", "}"}], ",", "\n", 
    "\t\t", 
    RowBox[{
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"!", 
        RowBox[{"Developer`PackedArrayQ", "@", "values"}]}], ",", "\n", 
       "\t\t\t", 
       RowBox[{"PackageRaiseException", "[", "\n", "\t\t\t\t", 
        RowBox[{
        "Automatic", ",", "\n", "\t\t\t\t", 
         "\"\<grid function values cannot be packed\>\""}], "\n", "\t\t\t\t", 
        "]"}]}], "\n", "\t\t\t", "]"}], ";", "\n", "\t\t", 
     RowBox[{
      RowBox[{"Dimensions", "[", "values", "]"}], "===", 
      RowBox[{"GridDimensions", "[", "grid", "]"}]}]}]}], "\n", "\t\t", 
   "]"}]}]], \
"CodeInput",ExpressionUUID->"94240285-1ea5-479d-b339-11a665096cc1"]
}, Closed]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]cleanGFData\[RightFloor]", "CodeSubsubsubsection",
 Evaluatable->True,ExpressionUUID->"7aa3ffb4-c934-404c-95b1-548f5ea2c378"],

Cell[BoxData[
 RowBox[{
  RowBox[{"cleanGFData", "[", 
   RowBox[{"g_", ",", " ", "vals_"}], "]"}], ":=", "\n", "\t", 
  RowBox[{"Module", "[", "\n", "\t\t", 
   RowBox[{
    RowBox[{"{", "\n", "\t\t\t", 
     RowBox[{
      RowBox[{"base", "=", 
       RowBox[{"N", "@", 
        RowBox[{"Developer`ToPackedArray", "@", "vals"}]}]}], ",", "\n", 
      "\t\t\t", "grid", ",", "\n", "\t\t\t", "gplen"}], "\n", "\t\t\t", "}"}],
     ",", "\n", "\t\t", 
    RowBox[{
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"!", 
        RowBox[{"Developer`PackedArrayQ", "[", "base", "]"}]}], ",", "\n", 
       "\t\t\t", 
       RowBox[{"PackageRaiseException", "[", "\n", "\t\t\t\t", 
        RowBox[{
        "Automatic", ",", "\n", "\t\t\t\t", 
         "\"\<Function data cannot be packed\>\""}], "\n", "\t\t\t\t", 
        "]"}]}], "\n", "\t\t\t", "]"}], ";", "\n", "\t\t", 
     RowBox[{"grid", "=", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", 
         RowBox[{"CoordinateGridObjectQ", "@", "g"}]}], ",", " ", 
        RowBox[{"CoordinateGridObject", "[", "g", "]"}], ",", " ", "g"}], 
       "]"}]}], ";", "\n", "\t\t", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"!", 
        RowBox[{"CoordinateGridObjectQ", "@", "grid"}]}], ",", "\n", "\t\t\t", 
       RowBox[{"PackageRaiseException", "[", "\n", "\t\t\t\t", 
        RowBox[{
        "Automatic", ",", "\n", "\t\t\t\t", 
         "\"\<grid function coordinate grid improperly defined\>\""}], "\n", 
        "\t\t\t\t", "]"}]}], "\n", "\t\t\t", "]"}], ";", "\n", "\t\t", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"GridPointNumber", "[", "grid", "]"}], "=!=", 
        RowBox[{"Times", "@@", 
         RowBox[{"Dimensions", "[", "base", "]"}]}]}], ",", "\n", "\t\t\t", 
       RowBox[{"PackageRaiseException", "[", "\n", "\t\t\t\t", 
        RowBox[{
        "Automatic", ",", "\n", "\t\t\t\t", 
         "\"\<number of grid points (``) and function values (``) disagaree\>\
\"", ",", "\n", "\t\t\t\t", 
         RowBox[{"GridPointNumber", "[", "grid", "]"}], ",", "\n", "\t\t\t\t", 
         RowBox[{"GridPointNumber", "[", "base", "]"}]}], "\n", "\t\t\t\t", 
        "]"}]}], "\n", "\t\t\t", "]"}], ";", "\n", "\t\t", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"GridDimensions", "[", "grid", "]"}], "=!=", 
        RowBox[{"Dimensions", "[", "base", "]"}]}], ",", "\n", "\t\t\t", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Depth", "@", "base"}], "\[Equal]", "2"}], ",", "\n", 
         "\t\t\t\t", 
         RowBox[{"base", "=", 
          RowBox[{"ArrayReshape", "[", 
           RowBox[{"base", ",", " ", 
            RowBox[{"Dimensions", "[", "grid", "]"}]}], "]"}]}], ",", "\n", 
         "\t\t\t\t", 
         RowBox[{"PackageRaiseException", "[", "\n", "\t\t\t\t\t", 
          RowBox[{
          "Automatic", ",", "\n", "\t\t\t\t\t", 
           "\"\<Grid dimensions (``) and function dimensions (``) disagaree\>\
\"", ",", "\n", "\t\t\t\t\t", 
           RowBox[{"Dimensions", "[", "grid", "]"}], ",", "\n", "\t\t\t\t\t", 
           
           RowBox[{"Dimensions", "[", "base", "]"}]}], "\n", "\t", "\t\t\t\t",
           "]"}]}], "\n", "\t\t\t\t", "]"}]}], "\n", "\t\t\t", "]"}], ";", 
     "\n", "\t\t", 
     RowBox[{"{", "\n", "\t\t\t", 
      RowBox[{"grid", ",", "\n", "\t\t\t", "base"}], 
      RowBox[{"(*", 
       RowBox[{"Map", "[", 
        RowBox[{"List", ",", " ", "base", ",", " ", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Depth", "[", "base", "]"}], "-", "1"}], "}"}]}], "]"}], 
       "*)"}], "\n", "\t\t\t", "}"}]}]}], "\n", "\t\t", 
   "]"}]}]], \
"CodeInput",ExpressionUUID->"fa794344-d66b-4650-ba92-aa142e391584"]
}, Closed]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]ConstructCoordinateGrid\[RightFloor]", \
"CodeSubsubsubsection",
 Evaluatable->True,ExpressionUUID->"74f00e8c-a504-41d2-b77f-ffcbf8b05efb"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"ConstructGridFunction", "[", 
    RowBox[{"grid_", ",", " ", "vals_"}], "]"}], ":=", "\n", "\t", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"g", "=", 
       RowBox[{"cleanGFData", "[", 
        RowBox[{"grid", ",", " ", "vals"}], "]"}]}], "}"}], ",", "\n", "\t\t", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"validateGFData", "[", "g", "]"}], ",", "\n", "\t\t\t", 
       RowBox[{"<|", 
        RowBox[{
         RowBox[{"\"\<Grid\>\"", "\[Rule]", 
          RowBox[{"g", "[", 
           RowBox[{"[", "1", "]"}], "]"}]}], ",", " ", 
         RowBox[{"\"\<Values\>\"", "\[Rule]", 
          RowBox[{"g", "[", 
           RowBox[{"[", "2", "]"}], "]"}]}]}], "|>"}], ",", "\n", "\t\t\t", 
       RowBox[{"<|", 
        RowBox[{"$Failed", "\[Rule]", "True"}], "|>"}]}], " ", 
      RowBox[{"(*", " ", 
       RowBox[{
       "requires", " ", "Association", " ", "return", " ", "to", " ", "throw",
         " ", "the", " ", "error"}], " ", "*)"}], "\n", "\t\t\t", "]"}]}], 
    "\n", "\t\t", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"ConstructGridFunction", "[", 
    RowBox[{
     RowBox[{"GridFunctionObject", "[", "g_", "]"}], "?", 
     "GridFunctionObjectQ"}], "]"}], ":=", "\n", "\t", "g"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"ConstructGridFunction", "[", "a_Association", "]"}], ":=", "\n", 
    "\t", "a"}], ";"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "should", " ", "probably", " ", "just", " ", "do", " ", "a", " ", "quick",
      " ", "validation"}], "..."}], " ", 
   "*)"}]}]}], \
"CodeInput",ExpressionUUID->"afff2841-224c-40ae-a75d-28dd471377f2"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]GFModify\[RightFloor]", "CodeSubsection",
 Evaluatable->True,ExpressionUUID->"74d78eb1-4111-42ca-8a09-5f36ad818208"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"GFModify", "[", 
    RowBox[{"gf_", ",", " ", "justOneFunc_"}], "]"}], ":=", "\n", "\t", 
   RowBox[{"InterfaceModify", "[", "\n", "\t\t", 
    RowBox[{
    "GridFunctionObject", ",", "\n", "\t\t", "gf", ",", "\n", "\t\t", 
     RowBox[{
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"newb", "=", 
          RowBox[{"justOneFunc", "@", 
           RowBox[{"Lookup", "[", 
            RowBox[{"#", ",", " ", 
             RowBox[{"{", 
              RowBox[{"\"\<Grid\>\"", ",", " ", "\"\<Values\>\""}], "}"}]}], 
            "]"}]}]}], "}"}], ",", "\n", "\t\t\t", 
        RowBox[{"ReplacePart", "[", 
         RowBox[{"#", ",", "\n", "\t\t\t\t", 
          RowBox[{"{", "\n", "\t\t\t\t\t", 
           RowBox[{
            RowBox[{"\"\<Grid\>\"", "\[Rule]", 
             RowBox[{"#", "[", 
              RowBox[{"[", "1", "]"}], "]"}]}], ",", "\n", "\t\t\t\t\t", 
            RowBox[{"\"\<Values\>\"", "\[Rule]", 
             RowBox[{"#", "[", 
              RowBox[{"[", "2", "]"}], "]"}]}]}], "\n", "\t\t\t\t\t", "}"}]}],
          "\n", "\t\t\t\t", "]"}]}], "\n", "\t\t\t", "]"}], "&"}]}], "\n", 
    "\t\t", "]"}]}], 
  ";"}]], "CodeInput",ExpressionUUID->"c9f1d750-7f6b-4ada-8d3e-9b58df868fee"],

Cell[BoxData[
 RowBox[{
  RowBox[{"GFModify", "[", 
   RowBox[{"gf_", ",", " ", "gridF_", ",", " ", "valF_"}], "]"}], ":=", "\n", 
  "\t", 
  RowBox[{"InterfaceModify", "[", "\n", "\t\t", 
   RowBox[{"GridFunctionObject", ",", "\n", "\t\t", "gf", ",", "\n", "\t\t", 
    RowBox[{
     RowBox[{"MapAt", "[", "\n", "\t\t\t", 
      RowBox[{"valF", ",", "\n", "\t\t\t", 
       RowBox[{"MapAt", "[", 
        RowBox[{"gridF", ",", " ", "#", ",", " ", "\"\<Grid\>\""}], "]"}], 
       ",", "\n", "\t\t\t", "\"\<Values\>\""}], "\n", "\t", "\t\t", "]"}], 
     "&"}]}], "\n", "\t", "\t", 
   "]"}]}]], \
"CodeInput",ExpressionUUID->"c2e4f29a-1c3c-46d9-9c0c-4814fec164e6"]
}, Closed]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]GridFunction Parts\[RightFloor]", "CodeSubsection",
 Evaluatable->True,ExpressionUUID->"07308ff2-cdf4-46b7-bbac-f7e6c2e4b613"],

Cell[CellGroupData[{

Cell["\[LeftCeiling]GFPart\[RightFloor]", "CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"26a36364-bff1-44b1-9d43-f6e3a105a9a2"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"GFPart", "[", 
    RowBox[{
     RowBox[{"c", ":", 
      RowBox[{"GridFunctionObject", "[", "a_", "]"}]}], ",", " ", "p__"}], 
    "]"}], ":=", "\n", "\t", 
   RowBox[{
    RowBox[{
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"CoordinateGridObjectQ", "@", 
        RowBox[{"#", "[", "\"\<Grid\>\"", "]"}]}], ",", "\n", "\t\t", 
       RowBox[{"GridFunctionObject", "[", "#", "]"}], ",", "\n", "\t\t", 
       RowBox[{"Append", "@@", 
        RowBox[{"Lookup", "[", 
         RowBox[{"#", ",", " ", 
          RowBox[{"{", 
           RowBox[{"\"\<Grid\>\"", ",", " ", "\"\<Values\>\""}], "}"}]}], 
         "]"}]}]}], "\n", "\t\t", "]"}], "&"}], "@", "\n", "\t\t", 
    RowBox[{"MapAt", "[", "\n", "\t\t\t", 
     RowBox[{
      RowBox[{
       RowBox[{"Part", "[", 
        RowBox[{"#", ",", " ", "p"}], "]"}], "&"}], ",", "\n", "\t\t\t", "a", 
      ",", "\n", "\t\t\t", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", "\"\<Grid\>\"", "}"}], ",", " ", 
        RowBox[{"{", "\"\<Values\>\"", "}"}]}], "}"}]}], "\n", "\t\t\t", 
     "]"}]}]}], 
  ";"}]], "CodeInput",ExpressionUUID->"db26231e-223e-47d9-b140-7917fdfc740c"]
}, Closed]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]GFKeyPart\[RightFloor]", "CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"7e48b41f-8a60-49c0-9d7f-9545580d8fc6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"GFKeyPart", "[", 
   RowBox[{
    RowBox[{"c", ":", 
     RowBox[{"GridFunctionObject", "[", "a_", "]"}]}], ",", " ", "sel__"}], 
   "]"}], ":=", "\n", "\t", 
  RowBox[{
  "a", "[", "sel", 
   "]"}]}]], \
"CodeInput",ExpressionUUID->"fb743073-23b9-4c81-a3b3-23ba1713ad56"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]Structural\[RightFloor]", "CodeSubsection",
 Evaluatable->True,ExpressionUUID->"425d0f7e-824f-4ea5-92ae-b558ecd34e20"],

Cell[CellGroupData[{

Cell["\[LeftCeiling]GFExtractArrayValues\[RightFloor]", "CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"76ee4dc2-02c8-44af-bbea-19224678932d"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"GFExtractArrayValues", "[", "arr_", "]"}], ":=", "\n", "\t", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"d", "=", 
       RowBox[{"Depth", "[", "arr", "]"}]}], "}"}], ",", "\n", "\t\t", 
     RowBox[{"Part", "[", 
      RowBox[{"d", ",", "\n", "\t\t\t", 
       RowBox[{"Sequence", "@@", "\n", "\t\t\t\t", 
        RowBox[{"Append", "[", 
         RowBox[{
          RowBox[{"ConstantArray", "[", 
           RowBox[{"All", ",", " ", 
            RowBox[{"d", "-", "1"}]}], "]"}], ",", " ", 
          RowBox[{"-", "1"}]}], "]"}]}]}], "\n", "\t\t\t", "]"}]}], "\n", 
    "\t\t", "]"}]}], 
  ";"}]], "CodeInput",ExpressionUUID->"5c83045c-391a-490b-b635-7d6bc21b058c"]
}, Closed]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]GFExtractArrayGrid\[RightFloor]", "CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"bfcc41fd-458c-4683-b7b5-056599c932eb"],

Cell[BoxData[
 RowBox[{
  RowBox[{"GFExtractArrayGrid", "[", "arr_", "]"}], ":=", "\n", "\t", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"d", "=", 
      RowBox[{"Depth", "[", "arr", "]"}]}], "}"}], ",", "\n", "\t\t", 
    RowBox[{"Part", "[", 
     RowBox[{"d", ",", "\n", "\t\t\t", 
      RowBox[{"Sequence", "@@", "\n", "\t\t\t\t", 
       RowBox[{"Append", "[", 
        RowBox[{
         RowBox[{"ConstantArray", "[", 
          RowBox[{"All", ",", " ", 
           RowBox[{"d", "-", "1"}]}], "]"}], ",", " ", 
         RowBox[{";;", 
          RowBox[{"-", "2"}]}]}], "]"}]}]}], "\n", "\t\t\t", "]"}]}], "\n", 
   "\t\t", "]"}]}]], \
"CodeInput",ExpressionUUID->"e99274eb-ce70-4e7e-a155-41fed7dd2431"]
}, Closed]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]GFArray\[RightFloor]", "CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"35621307-74ec-4892-8be5-c883545aa1b2"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"GFArray", "[", 
    RowBox[{"grid_List", ",", " ", "vals_List"}], "]"}], ":=", "\n", "\t", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"d1", "=", 
        RowBox[{"Dimensions", "[", "grid", "]"}]}], ",", " ", 
       RowBox[{"d2", "=", 
        RowBox[{"Dimensions", "[", "vals", "]"}]}], ",", " ", 
       RowBox[{"dp", "=", 
        RowBox[{"Depth", "[", "vals", "]"}]}]}], "}"}], ",", "\n", "\t\t", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"d1", "[", 
          RowBox[{"[", 
           RowBox[{";;", 
            RowBox[{"-", "2"}]}], "]"}], "]"}], "=!=", "d2"}], ",", "\n", 
        "\t\t\t", 
        RowBox[{"PackageRaiseException", "[", 
         RowBox[{
         "\"\<GridFunction\>\"", ",", "\n", "\t\t\t\t", 
          "\"\<Grid function grid and values have inconsistent dimensions (`` \
and ``)\>\"", ",", "\n", "\t\t\t\t", "d1", ",", "\n", "\t\t\t\t", "d2"}], 
         "\n", "\t\t\t\t", "]"}]}], "\n", "\t\t\t", "]"}], ";", "\n", "\t\t", 
      
      RowBox[{"If", "[", "\n", "\t\t\t", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "@", "d1"}], ">", "1"}], ",", "\n", "\t\t\t\t", 
        RowBox[{"Join", "[", 
         RowBox[{"grid", ",", " ", 
          RowBox[{"Map", "[", 
           RowBox[{"List", ",", " ", "vals", ",", " ", 
            RowBox[{"{", 
             RowBox[{"dp", "-", "1"}], "}"}]}], "]"}], ",", " ", "dp"}], 
         "]"}], ",", "\n", "\t\t\t\t", 
        RowBox[{"PackageRaiseException", "[", 
         RowBox[{
         "\"\<Grid\>\"", ",", "\n", "\t\t\t\t\t", 
          "\"\<Grid `` has depth 1...?\>\"", ",", "\n", "\t\t\t\t\t", 
          "grid"}], "\n", "\t\t\t\t\t", "]"}]}], "\n", "\t\t\t", "]"}]}]}], 
    "\n", "\t\t", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"GFArray", "[", "grid_", "]"}], ":=", "\n", "\t", 
  RowBox[{"GFArray", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"grid", "[", "\"\<Grid\>\"", "]"}], "[", "\"\<Grid\>\"", "]"}], 
    ",", " ", 
    RowBox[{"grid", "[", "\"\<Values\>\"", "]"}]}], 
   "]"}]}]}], \
"CodeInput",ExpressionUUID->"2bb6990e-b11a-49e2-b070-df073dd8e86a"]
}, Closed]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]GFPoints\[RightFloor]", "CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"e6bd68b5-4a6f-471d-9ddb-646dfc88e1a2"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"GFPoints", "[", 
    RowBox[{"grid_List", ",", " ", "vals_List"}], "]"}], ":=", "\n", "\t", 
   RowBox[{"Flatten", "[", 
    RowBox[{
     RowBox[{"GFArray", "[", 
      RowBox[{"grid", ",", " ", "vals"}], "]"}], ",", " ", 
     RowBox[{
      RowBox[{"Depth", "[", "vals", "]"}], "-", "2"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"GFPoints", "[", "grid_", "]"}], ":=", "\n", "\t", 
  RowBox[{"GFPoints", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"grid", "[", "\"\<Grid\>\"", "]"}], "[", "\"\<Grid\>\"", "]"}], 
    ",", " ", 
    RowBox[{"grid", "[", "\"\<Values\>\"", "]"}]}], 
   "]"}]}]}], \
"CodeInput",ExpressionUUID->"4f146f91-8b98-447d-b28a-dbd70302d2a6"]
}, Closed]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]GFMap\[RightFloor]", "CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"075169e8-2943-450a-b10b-b5b3fc4c67b5"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"GFMap", "[", 
    RowBox[{"tf_", ",", " ", 
     RowBox[{"{", 
      RowBox[{"grid_List", ",", " ", "vals_List"}], "}"}]}], "]"}], ":=", 
   "\n", "\t", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"d", "=", 
        RowBox[{"Depth", "[", "vals", "]"}]}], ",", " ", 
       RowBox[{"array", "=", 
        RowBox[{"GFArray", "[", 
         RowBox[{"grid", ",", " ", "vals"}], "]"}]}]}], "}"}], ",", "\n", 
     "\t\t", 
     RowBox[{"Developer`ToPackedArray", "@", 
      RowBox[{"N", "@", 
       RowBox[{"Map", "[", 
        RowBox[{"tf", ",", " ", "array", ",", " ", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Depth", "[", "vals", "]"}], "-", "1"}], "}"}]}], 
        "]"}]}]}]}], "\n", "\t\t", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"GFMap", "[", 
   RowBox[{"tf_", ",", " ", "f_"}], "]"}], ":=", "\n", "\t", 
  RowBox[{"Module", "[", "\n", "\t\t", 
   RowBox[{
    RowBox[{"{", "\n", "\t\t\t", 
     RowBox[{
      RowBox[{"ogg", "=", 
       RowBox[{
        RowBox[{"f", "[", "\"\<Grid\>\"", "]"}], "[", "\"\<Grid\>\"", "]"}]}],
       ",", "\n", "\t\t\t", 
      RowBox[{"ogv", "=", 
       RowBox[{"f", "[", "\"\<Values\>\"", "]"}]}], ",", "\n", "\t\t\t", 
      "res", ",", "\n", "\t\t\t", "g", ",", "\n", "\t\t\t", "v"}], "\n", 
     "\t\t\t", "}"}], ",", "\n", "\t\t", 
    RowBox[{
     RowBox[{"res", "=", 
      RowBox[{"GFMap", "[", 
       RowBox[{"tf", ",", " ", 
        RowBox[{"{", 
         RowBox[{"ogg", ",", " ", "ogv"}], "}"}]}], "]"}]}], ";", "\n", 
     "\t\t", 
     RowBox[{"Which", "[", "\n", "\t\t\t", 
      RowBox[{
       RowBox[{
        RowBox[{"Dimensions", "[", "res", "]"}], "===", 
        RowBox[{"Dimensions", "[", "ogv", "]"}]}], ",", "\n", "\t", "\t\t\t", 
       
       RowBox[{"GFModify", "[", 
        RowBox[{
        "f", ",", "\n", "\t\t\t\t\t", "Identity", ",", "\n", "\t\t\t\t\t", 
         RowBox[{"res", "&"}]}], "\n", "\t\t\t\t\t", "]"}], ",", "\n", 
       "\t\t\t", 
       RowBox[{
        RowBox[{"Dimensions", "[", "res", "]"}], "===", 
        RowBox[{"Dimensions", "[", "ogg", "]"}]}], ",", "\n", "\t\t\t\t", 
       RowBox[{"GFModify", "[", 
        RowBox[{"f", ",", "\n", "\t\t\t\t\t", 
         RowBox[{
          RowBox[{"GFExtractArrayGrid", "[", "res", "]"}], "&"}], ",", "\n", 
         "\t\t\t\t\t", 
         RowBox[{
          RowBox[{"GFExtractArrayValues", "[", "res", "]"}], "&"}]}], "\n", 
        "\t\t\t\t\t", "]"}], ",", "\n", "\t\t\t", "True", ",", "\n", 
       "\t\t\t\t", 
       RowBox[{"PackageRaiseException", "[", "\n", "\t\t\t\t\t", 
        RowBox[{
        "Automatic", ",", "\n", "\t\t\t\t\t", 
         "\"\<Mapped function returned array of dimension `` but should have \
dimension ``\>\"", ",", "\n", "\t\t\t\t\t", 
         RowBox[{"Dimensions", "[", "res", "]"}], ",", "\n", "\t\t\t\t\t", 
         RowBox[{"Dimensions", "[", "ogv", "]"}]}], "\n", "\t\t\t\t\t", 
        "]"}]}], "\n", "\t\t\t", "]"}]}]}], "\n", "\t\t", 
   "]"}]}]}], \
"CodeInput",ExpressionUUID->"7ba2206a-9854-43c2-9ae1-3ce2f3fd8feb"]
}, Closed]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]GFPermute\[RightFloor]", "CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"7f997480-91f5-49ff-90f1-98618c2b7872"],

Cell[BoxData[
 RowBox[{
  RowBox[{"GFPermute", "[", 
   RowBox[{"g_GridFunctionObject", ",", " ", "newIndices_"}], "]"}], ":=", 
  "\n", "\t", 
  RowBox[{
   RowBox[{"PackageExceptionBlock", "[", "\"\<GridPermute\>\"", "]"}], "@", 
   "\n", "\t\t", 
   RowBox[{"GFModify", "[", 
    RowBox[{"g", ",", " ", "\n", "\t\t\t", 
     RowBox[{
      RowBox[{"GridPermute", "[", 
       RowBox[{"#", ",", " ", "newIndices"}], "]"}], "&"}], ",", "\n", 
     "\t\t\t", 
     RowBox[{
      RowBox[{"Transpose", "[", 
       RowBox[{"#", ",", " ", 
        RowBox[{"Ordering", "@", "newIndices"}]}], "]"}], "&"}]}], "\n", 
    "\t\t\t", 
    "]"}]}]}]], \
"CodeInput",ExpressionUUID->"3f88d5f1-8ef2-45cb-9dff-2c29985db5a9"]
}, Closed]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]GFSlice\[RightFloor]", "CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"edcd1596-d250-4ae1-a635-b32b6d4b1c70"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"iGFSlice", "[", 
    RowBox[{"vals_", ",", " ", "n__Integer"}], "]"}], ":=", "\n", "\t", 
   RowBox[{"Part", "[", "\n", "\t\t", 
    RowBox[{"vals", ",", "\n", "\t\t", "n", ",", "\n", "\t\t", 
     RowBox[{"Sequence", "@@", "\n", "\t\t\t", 
      RowBox[{"ConstantArray", "[", 
       RowBox[{"All", ",", " ", "\n", "\t\t\t\t", 
        RowBox[{
         RowBox[{"Depth", "[", "vals", "]"}], "-", 
         RowBox[{"(", 
          RowBox[{"2", "+", 
           RowBox[{"Length", "[", 
            RowBox[{"{", "n", "}"}], "]"}]}], ")"}]}]}], "\n", "\t\t\t\t", 
       "]"}]}]}], "\n", "\t\t", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"GFSlice", "[", 
    RowBox[{"g_", ",", " ", "n__Integer"}], "]"}], ":=", "\n", "\t", 
   RowBox[{"GFModify", "[", "\n", "\t\t", 
    RowBox[{"g", ",", " ", "\n", "\t\t", 
     RowBox[{
      RowBox[{"GridSlice", "[", 
       RowBox[{"#", ",", " ", "n"}], "]"}], "&"}], ",", "\n", "\t\t", 
     RowBox[{
      RowBox[{"iGFSlice", "[", 
       RowBox[{"#", ",", " ", "n"}], "]"}], "&"}]}], "\n", "\t\t", "]"}]}], 
  ";"}]}], "CodeInput",ExpressionUUID->"2f8d57ad-b4cd-43e0-874b-fe1fc8038114"]\

}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]Manipulation\[RightFloor]", "CodeSubsection",
 Evaluatable->True,ExpressionUUID->"5ef91408-40e4-457f-8d9c-b0cb46df313f"],

Cell[CellGroupData[{

Cell["\[LeftCeiling]GFScale\[RightFloor]", "CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"3c2ee178-67e7-4145-a252-6a0e6e611547"],

Cell[BoxData[{
 RowBox[{"GFScale", "//", "Clear"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"GFScale", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"grid_", ",", " ", "values_"}], "}"}], ",", " ", 
     RowBox[{"n_", "?", "NumericQ"}]}], "]"}], ":=", "\n", "\t", 
   RowBox[{"{", 
    RowBox[{"grid", ",", " ", 
     RowBox[{"values", "*", "n"}]}], "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"GFScale", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"grid_", ",", " ", "values_"}], "}"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"n_", "?", "NumericQ"}], ",", " ", 
       RowBox[{"base_", "?", "NumericQ"}]}], "}"}]}], "]"}], ":=", "\n", "\t", 
   RowBox[{"{", 
    RowBox[{"grid", ",", " ", 
     RowBox[{"base", "+", 
      RowBox[{"n", "*", 
       RowBox[{"(", 
        RowBox[{"values", "-", "base"}], ")"}]}]}]}], "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"GFScale", "[", 
    RowBox[{"gf_GridFunctionObject", ",", " ", 
     RowBox[{"spec", ":", 
      RowBox[{
       RowBox[{"_", "?", "NumericQ"}], "|", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"_", "?", "NumericQ"}], ",", " ", 
         RowBox[{"_", "?", "NumericQ"}]}], "}"}]}]}]}], "]"}], ":=", "\n", 
   "\t", 
   RowBox[{"GridFunctionObject", "@@", "\n", "\t\t", 
    RowBox[{"GFScale", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"gf", "[", "\"\<Grid\>\"", "]"}], ",", " ", 
        RowBox[{"gf", "[", "\"\<Values\>\"", "]"}]}], "}"}], ",", " ", 
      "spec"}], "]"}]}]}], 
  ";"}]}], "CodeInput",ExpressionUUID->"54d9e08c-6ce5-4918-ad98-ccc27a21b9ec"]\

}, Open  ]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]GFGridScale\[RightFloor]", "CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"527d9b99-d3b0-426e-9efa-01edc05322d8"],

Cell[BoxData[{
 RowBox[{"GFGridScale", "//", "Clear"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"GFGridScale", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"grid_", ",", " ", "values_"}], "}"}], ",", " ", "n_"}], "]"}], 
   ":=", "\n", "\t", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"GridScale", "[", 
      RowBox[{"grid", ",", " ", "n"}], "]"}], ",", " ", "values"}], "}"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"GFGridScale", "[", 
    RowBox[{"gf_GridFunctionObject", ",", " ", "spec_"}], "]"}], ":=", "\n", 
   "\t", 
   RowBox[{"GridFunctionObject", "@@", "\n", "\t\t", 
    RowBox[{"GFGridScale", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"gf", "[", "\"\<Grid\>\"", "]"}], ",", " ", 
        RowBox[{"gf", "[", "\"\<Values\>\"", "]"}]}], "}"}], ",", " ", 
      "spec"}], "]"}]}]}], 
  ";"}]}], "CodeInput",ExpressionUUID->"611a07f3-2352-48d7-89a5-d66193e0f50b"]\

}, Open  ]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]GFShift\[RightFloor]", "CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"cb5ef575-9240-473c-96ca-75d9bf8b1ae4"],

Cell[BoxData[{
 RowBox[{"GFShift", "//", "Clear"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"GFShift", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"grid_", ",", " ", "values_"}], "}"}], ",", " ", 
     RowBox[{"n_", "?", "NumericQ"}]}], "]"}], ":=", "\n", "\t", 
   RowBox[{"{", 
    RowBox[{"grid", ",", " ", 
     RowBox[{"values", "+", "n"}]}], "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"GFShift", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"grid_", ",", " ", "values_"}], "}"}], ",", " ", 
     RowBox[{"Scaled", "[", 
      RowBox[{"i_", "?", "NumericQ"}], "]"}]}], "]"}], ":=", "\n", "\t", 
   RowBox[{"GFShift", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"grid", ",", " ", "values"}], "}"}], ",", " ", 
     RowBox[{"Subtract", "@@", 
      RowBox[{"Reverse", "@", 
       RowBox[{"MinMax", "[", "values", "]"}]}]}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"GFShift", "[", 
    RowBox[{"gf_GridFunctionObject", ",", " ", 
     RowBox[{"spec", ":", 
      RowBox[{
       RowBox[{"_", "?", "NumericQ"}], "|", 
       RowBox[{"Scaled", "[", 
        RowBox[{"_", "?", "NumericQ"}], "]"}]}]}]}], "]"}], ":=", "\n", "\t", 
   
   RowBox[{"GridFunctionObject", "@@", "\n", "\t\t", 
    RowBox[{"GFShift", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"gf", "[", "\"\<Grid\>\"", "]"}], ",", " ", 
        RowBox[{"gf", "[", "\"\<Values\>\"", "]"}]}], "}"}], ",", " ", 
      "spec"}], "]"}]}]}], 
  ";"}]}], "CodeInput",ExpressionUUID->"94edfb1c-6aca-4dcc-87f0-8dc755c923ec"]\

}, Closed]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]GFGridShift\[RightFloor]", "CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"90354ed7-e04d-4c6b-b1f2-1a64e69d48d8"],

Cell[BoxData[{
 RowBox[{"GFGridShift", "//", "Clear"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"GFGridShift", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"grid_", ",", " ", "values_"}], "}"}], ",", " ", "n_"}], "]"}], 
   ":=", "\n", "\t", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"GridShift", "[", 
      RowBox[{"grid", ",", " ", "n"}], "]"}], ",", " ", "values"}], "}"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"GFGridShift", "[", 
    RowBox[{"gf_GridFunctionObject", ",", " ", "spec_"}], "]"}], ":=", "\n", 
   "\t", 
   RowBox[{"GridFunctionObject", "@@", "\n", "\t\t", 
    RowBox[{"GFGridShift", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"gf", "[", "\"\<Grid\>\"", "]"}], ",", " ", 
        RowBox[{"gf", "[", "\"\<Values\>\"", "]"}]}], "}"}], ",", " ", 
      "spec"}], "]"}]}]}], 
  ";"}]}], "CodeInput",ExpressionUUID->"5a7cffbc-969b-47e5-b96c-e304df520f41"]\

}, Open  ]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]GFRescale\[RightFloor]", "CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"b6d8515e-ac0a-4a4f-a525-024c0450b3e2"],

Cell["\<\
\[LeftCeiling]
\tThis requires some thought to do appropriately and cleanly
\[RightFloor]\
\>", "Text",
 Evaluatable->True,ExpressionUUID->"34686602-7f86-4a8f-866f-f16a7fed017c"],

Cell[CellGroupData[{

Cell["\[LeftCeiling]getGFScalingRange\[RightFloor]", "CodeSubsubsubsection",
 Evaluatable->True,ExpressionUUID->"230577c3-5bd2-48bf-a482-05d7812d8a56"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"getGFScalingRange", "[", 
    RowBox[{"values_", ",", " ", "minmax_", ",", " ", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"m_", "?", "NumericQ"}], ",", " ", 
       RowBox[{"n_", "?", "NumericQ"}]}], "}"}]}], "]"}], ":=", "\n", "\t", 
   RowBox[{"{", 
    RowBox[{"m", ",", " ", "n"}], "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"getGFScalingRange", "[", 
    RowBox[{"values_", ",", " ", "minmax_", ",", " ", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Scaled", "[", 
        RowBox[{"i_", "?", "NumericQ"}], "]"}], ",", " ", "n_"}], "}"}]}], 
    "]"}], ":=", "\n", "\t", 
   RowBox[{"getGFScalingRange", "[", 
    RowBox[{"values", ",", " ", "minmax", ",", " ", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"i", "*", 
        RowBox[{"minmax", "[", 
         RowBox[{"[", "1", "]"}], "]"}]}], ",", " ", "n"}], "}"}]}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"getGFScalingRange", "[", 
    RowBox[{"values_", ",", " ", "minmax_", ",", " ", 
     RowBox[{"{", 
      RowBox[{"m_", ",", " ", 
       RowBox[{"Scaled", "[", 
        RowBox[{"i_", "?", "NumericQ"}], "]"}]}], "}"}]}], "]"}], ":=", "\n", 
   "\t", 
   RowBox[{"getGFScalingRange", "[", 
    RowBox[{"values", ",", " ", "minmax", ",", " ", 
     RowBox[{"{", 
      RowBox[{"m", ",", " ", 
       RowBox[{"i", "*", 
        RowBox[{"minmax", "[", 
         RowBox[{"[", "2", "]"}], "]"}]}]}], "}"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"getGFScalingRange", "[", 
    RowBox[{"values_", ",", " ", "minmax_", ",", " ", "\n", "\t", 
     RowBox[{"Offset", "[", 
      RowBox[{"spec_", ",", " ", 
       RowBox[{"x_", "?", "NumericQ"}]}], "]"}]}], "\n", "\t", "]"}], ":=", 
   "\n", "\t", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"s", "=", 
       RowBox[{"getGFScalingRange", "[", 
        RowBox[{"values", ",", " ", "minmax", ",", " ", "spec"}], "]"}]}], 
      "}"}], ",", "\n", "\t\t", 
     RowBox[{"s", "-", "x"}]}], 
    RowBox[{"(*", " ", 
     RowBox[{
      RowBox[{
       RowBox[{
       "...", "this", " ", "might", " ", "not", " ", "be", " ", "right"}], 
       "..."}], "?"}], " ", "*)"}], "\n", "\t\t", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"getGFScalingRange", "[", 
   RowBox[{"values_", ",", " ", "minmax_", ",", " ", "\n", "\t", 
    RowBox[{"Offset", "[", 
     RowBox[{"spec_", ",", " ", 
      RowBox[{"Scaled", "[", "n_", "]"}]}], "]"}]}], "\n", "\t", "]"}], ":=", 
  "\n", "\t", 
  RowBox[{"getGFScalingRange", "[", "\n", "\t\t", 
   RowBox[{"values", ",", " ", "minmax", ",", "\n", "\t\t", 
    RowBox[{"Offset", "[", 
     RowBox[{"spec", ",", " ", 
      RowBox[{"Rescale", "[", 
       RowBox[{"n", ",", " ", 
        RowBox[{"{", 
         RowBox[{"0", ",", " ", "1"}], "}"}], ",", " ", "minmax"}], "]"}]}], 
     "]"}]}], "\n", "\t\t", 
   "]"}]}]}], \
"CodeInput",ExpressionUUID->"8c1c1e6a-8252-4713-85d4-356d8776d18a"]
}, Closed]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]iGFRescale\[RightFloor]", "CodeSubsubsubsection",
 Evaluatable->True,ExpressionUUID->"a83fe2e3-4167-4ed4-ab34-46ec511b9d7b"],

Cell[BoxData[{
 RowBox[{"iGFRescale", "//", "Clear"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"iGFRescale", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"grid_", ",", " ", "values_"}], "}"}], ",", " ", "minmax_", ",",
      " ", "spec_"}], "]"}], ":=", "\n", "\t", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"gspec", "=", 
       RowBox[{"getGFScalingRange", "[", 
        RowBox[{"values", ",", " ", "minmax", ",", " ", "spec"}], "]"}]}], 
      "}"}], ",", "\n", "\t\t", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"ListQ", "@", "gspec"}], ",", "\n", "\t\t\t", 
       RowBox[{"{", 
        RowBox[{"grid", ",", " ", 
         RowBox[{"Rescale", "[", 
          RowBox[{"values", ",", " ", "minmax", ",", " ", "gspec"}], "]"}]}], 
        "}"}], ",", "\n", "\t\t\t", 
       RowBox[{"PackageRaiseException", "[", "\n", "\t\t\t\t", 
        RowBox[{
        "Automatic", ",", "\n", "\t\t\t\t", 
         "\"\<Spec `` is invalid for GFRescale\>\"", ",", "\n", "\t\t\t\t", 
         "spec"}], "\n", "\t\t\t\t", "]"}]}], "\n", "\t\t\t", "]"}]}], "\n", 
    "\t\t", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"iGFRescale", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"grid_", ",", " ", "values_"}], "}"}], ",", " ", "spec_"}], 
    "]"}], ":=", "\n", "\t", 
   RowBox[{"iGFRescale", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"grid", ",", " ", "values"}], "}"}], ",", " ", 
     RowBox[{"MinMax", "@", "values"}], ",", " ", "spec"}], "]"}]}], 
  ";"}]}], "CodeInput",ExpressionUUID->"a365dd93-8b5c-4579-b7bc-e83e7c1c4de4"]\

}, Closed]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]GFRescale\[RightFloor]", "CodeSubsubsubsection",
 Evaluatable->True,ExpressionUUID->"df331102-b1e7-4599-88be-91dabb17fd00"],

Cell[BoxData[
 RowBox[{"GFRescale", "//", 
  "Clear"}]], \
"CodeInput",ExpressionUUID->"64eed1ae-756f-4410-9e3d-246a1ac67bee"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"GFRescale", "[", "\n", "\t", 
    RowBox[{"gf_GridFunctionObject", ",", "\n", "\t", 
     RowBox[{"minMax", ":", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"_", "?", "NumericQ"}], ",", " ", 
          RowBox[{"_", "?", "NumericQ"}]}], "}"}], "|", "Automatic"}], ")"}], 
      ":", "Automatic"}], ",", "\n", "\t", "spec_"}], "\n", "\t", "]"}], ":=",
    "\n", "\t", 
   RowBox[{"With", "[", "\n", "\t\t", 
    RowBox[{
     RowBox[{"{", "\n", "\t\t\t", 
      RowBox[{"res", "=", "\n", "\t\t\t\t", 
       RowBox[{
        RowBox[{"PackageExceptionBlock", "[", "\"\<GFRescale\>\"", "]"}], "@",
         "\n", "\t\t\t\t\t", 
        RowBox[{"iGFRescale", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"gf", "[", "\"\<Grid\>\"", "]"}], ",", " ", 
            RowBox[{"gf", "[", "\"\<Values\>\"", "]"}]}], "}"}], ",", " ", 
          "spec"}], "]"}]}]}], "\n", "\t", "\t\t", "}"}], ",", "\n", "\t\t", 
     RowBox[{
      RowBox[{"GridFunctionObject", "@@", "res"}], "/;", 
      RowBox[{"ListQ", "@", "res"}]}]}], "\n", "\t\t", "]"}]}], 
  ";"}]], "CodeInput",ExpressionUUID->"3b8d17cd-2c98-4bdb-a3c0-ccfea705de45"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]GFClip\[RightFloor]", "CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"41c690e3-f3cd-4d37-887f-b25f8ca22d9a"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"GFClip", "[", 
    RowBox[{"f_GridFunctionObject", ",", " ", "s__"}], "]"}], ":=", "\n", 
   "\t", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"vs", "=", 
       RowBox[{"Clip", "[", 
        RowBox[{
         RowBox[{"f", "[", "\"\<Values\>\"", "]"}], ",", " ", "s"}], "]"}]}], 
      "}"}], ",", "\n", "\t\t", 
     RowBox[{
      RowBox[{"GridFunctionObject", "[", 
       RowBox[{
        RowBox[{"f", "[", "\"\<Grid\>\"", "]"}], ",", " ", "vs"}], "]"}], "/;", 
      RowBox[{"ListQ", "@", "vs"}]}]}], "\n", "\t\t", "]"}]}], 
  ";"}]], "CodeInput",ExpressionUUID->"0e7e826e-c2b2-4dfc-bbb9-fb53aa3c35d1"]
}, Closed]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]GFChop\[RightFloor]", "CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"e44143f7-6d77-446a-a376-3d3d0462611d"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"GFChop", "[", 
    RowBox[{"f_GridFunctionObject", ",", " ", "s__"}], "]"}], ":=", "\n", 
   "\t", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"vs", "=", 
       RowBox[{"Threshold", "[", 
        RowBox[{
         RowBox[{"f", "[", "\"\<Values\>\"", "]"}], ",", " ", "s"}], "]"}]}], 
      "}"}], ",", "\n", "\t\t", 
     RowBox[{
      RowBox[{"GridFunctionObject", "[", 
       RowBox[{
        RowBox[{"f", "[", "\"\<Grid\>\"", "]"}], ",", " ", "vs"}], "]"}], "/;", 
      RowBox[{"ListQ", "@", "vs"}]}]}], "\n", "\t\t", "]"}]}], 
  ";"}]], "CodeInput",ExpressionUUID->"3de86c98-b839-4235-b7ea-aa080924ffbc"]
}, Closed]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]GFJoin\[RightFloor]", "CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"bb9484d7-2972-478e-99af-64668e53ac13"],

Cell[BoxData[
 RowBox[{
  RowBox[{"GFJoin", "[", 
   RowBox[{"a_GridFunctionObject", ",", " ", "s__"}], "]"}], ":=", "\n", "\t", 
  RowBox[{"Module", "[", "\n", "\t\t", 
   RowBox[{
    RowBox[{"{", "\n", "\t\t\t", 
     RowBox[{
      RowBox[{"grids", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"#", "[", "\"\<Grid\>\"", "]"}], "&"}], "/@", 
        RowBox[{"{", 
         RowBox[{"a", ",", " ", "s"}], "}"}]}]}], ",", "\n", "\t\t\t", 
      "gridNew", ",", "\n", "\t\t\t", "vals", ",", "\n", "\t\t\t", "valNew", 
      ",", "\n", "\t\t\t", "valDims"}], "\n", "\t\t\t", "}"}], ",", "\n", 
    "\t\t", 
    RowBox[{
     RowBox[{"gridNew", "=", 
      RowBox[{"GridJoin", "@@", "grids"}]}], ";", "\n", "\t\t", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"!", 
        RowBox[{"CoordinateGridObjectQ", "@", "gridNew"}]}], ",", "\n", 
       "\t\t\t", "gridNew", ",", "\n", "\t\t\t", 
       RowBox[{
        RowBox[{"vals", "=", 
         RowBox[{
          RowBox[{
           RowBox[{"#", "[", "\"\<Values\>\"", "]"}], "&"}], "/@", 
          RowBox[{"{", 
           RowBox[{"a", ",", " ", "s"}], "}"}]}]}], ";", "\n", "\t\t\t", 
        RowBox[{"valDims", "=", 
         RowBox[{"Dimensions", "/@", "vals"}]}], ";", "\n", "\t\t\t", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Length", "@", 
            RowBox[{"DeleteDuplicates", "[", 
             RowBox[{"Rest", "/@", "valDims"}], "]"}]}], ">", "1"}], ",", 
          "\n", "\t\t\t\t", 
          RowBox[{"PackageRaiseException", "[", "\n", "\t\t\t\t\t", 
           RowBox[{
           "Automatic", ",", "\n", "\t\t\t\t\t", 
            "\"\<Values of dimensions `` cannot be joined\>\"", ",", "\n", 
            "\t\t\t\t\t", "valDims"}], "\n", "\t\t\t\t\t", "]"}], ",", "\n", 
          "\t\t\t\t", 
          RowBox[{"valNew", "=", 
           RowBox[{"Join", "@@", "vals"}]}]}], "\n", "\t\t\t\t", "]"}], ";", 
        "\n", "\t\t\t", 
        RowBox[{"GFModify", "[", "\n", "\t\t\t\t", 
         RowBox[{"a", ",", "\n", "\t\t\t\t", 
          RowBox[{"gridNew", "&"}], ",", "\n", "\t\t\t\t", 
          RowBox[{"valNew", "&"}]}], "\n", "\t\t\t\t", "]"}]}], ",", "\n", 
       "\t\t\t", "gridNew"}], "\n", "\t\t\t", "]"}]}]}], "\n", "\t\t", 
   "]"}]}]], \
"CodeInput",ExpressionUUID->"218366d0-6674-4318-9755-ac2e455ec82e"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]Mindless\[RightFloor]", "CodeSubsection",
 Evaluatable->True,ExpressionUUID->"4ab47757-6bbb-4f8a-8fd7-696e38205596"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"GFInterpolation", "[", 
    RowBox[{"f_", ",", " ", "a___"}], "]"}], ":=", "\n", "\t", 
   RowBox[{"Interpolation", "[", 
    RowBox[{
     RowBox[{"GFPoints", "[", "f", "]"}], ",", " ", "a"}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"GFMinMax", "[", 
    RowBox[{"f_", ",", " ", "a___"}], "]"}], ":=", "\n", "\t", 
   RowBox[{"MinMax", "[", 
    RowBox[{
     RowBox[{"f", "[", "\"\<Values\>\"", "]"}], ",", " ", "a"}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"GFDimension", "[", "f_", "]"}], ":=", "\n", "\t", 
   RowBox[{"GridDimension", "[", 
    RowBox[{"f", "[", "\"\<Grid\>\"", "]"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"GFLength", "[", "f_", "]"}], ":=", "\n", "\t", 
  RowBox[{"GridLength", "@", 
   RowBox[{
   "f", "[", "\"\<Grid\>\"", 
    "]"}]}]}]}], \
"CodeInput",ExpressionUUID->"b653619c-4f44-4387-8b53-d1fb4e8c3f98"]
}, Closed]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]Higher Level\[RightFloor]", "CodeSubsection",
 Evaluatable->True,ExpressionUUID->"14f80e2f-08a6-4433-9cd4-32f903f2971b"],

Cell[CellGroupData[{

Cell["\[LeftCeiling]GFKroneckerProduct\[RightFloor]", "CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"9d533fb8-7412-4cc7-8a40-ef906b13d575"],

Cell[BoxData[{
 RowBox[{"GFKroneckerProduct", "//", "Clear"}], "\n", 
 RowBox[{
  RowBox[{"GFKroneckerProduct", "[", 
   RowBox[{"g_GridFunctionObject", ",", " ", "g2__GridFunctionObject"}], 
   "]"}], ":=", "\n", "\t", 
  RowBox[{"Module", "[", "\n", "\t\t", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "dimensions", ",", " ", "targetDimension", ",", " ", "points", ",", " ", 
      "grid", ",", " ", "vals", ",", " ", "kp", ",", " ", "op"}], "}"}], ",", 
    "\n", "\t\t", 
    RowBox[{
     RowBox[{"dimensions", "=", 
      RowBox[{
       RowBox[{
        RowBox[{"#", "[", "\"\<Dimensions\>\"", "]"}], "&"}], "/@", 
       RowBox[{"{", 
        RowBox[{"g", ",", " ", "g2"}], "}"}]}]}], ";", "\n", "\t\t", 
     RowBox[{"targetDimension", "=", 
      RowBox[{"Join", "@@", "dimensions"}]}], ";", "\n", "\t\t", 
     RowBox[{"points", "=", 
      RowBox[{"GFPoints", "/@", 
       RowBox[{"{", 
        RowBox[{"g", ",", " ", "g2"}], "}"}]}]}], ";", "\n", "\t\t", 
     RowBox[{"grid", "=", 
      RowBox[{"points", "[", 
       RowBox[{"[", 
        RowBox[{"All", ",", " ", "All", ",", " ", 
         RowBox[{";;", 
          RowBox[{"-", "2"}]}]}], "]"}], "]"}]}], ";", "\n", "\t\t", 
     RowBox[{"vals", "=", 
      RowBox[{"points", "[", 
       RowBox[{"[", 
        RowBox[{"All", ",", " ", "All", ",", " ", 
         RowBox[{"-", "1"}]}], "]"}], "]"}]}], ";", "\n", "\t\t", 
     RowBox[{"kp", "=", 
      RowBox[{"KroneckerProduct", "@@", "vals"}]}], ";", "\n", "\t\t", 
     RowBox[{"op", "=", 
      RowBox[{"Join", "@@@", 
       RowBox[{"Tuples", "@", "grid"}]}]}], ";", "\n", "\t\t", 
     RowBox[{"grid", "=", 
      RowBox[{"ArrayReshape", "[", 
       RowBox[{"op", ",", " ", 
        RowBox[{"Append", "[", 
         RowBox[{"targetDimension", ",", " ", 
          RowBox[{"Length", "@", "targetDimension"}]}], "]"}]}], "]"}]}], ";",
      "\n", "\t\t", 
     RowBox[{"vals", "=", 
      RowBox[{"ArrayReshape", "[", 
       RowBox[{"kp", ",", " ", "targetDimension"}], "]"}]}], ";", "\n", 
     "\t\t", 
     RowBox[{"GridFunctionObject", "[", 
      RowBox[{"grid", ",", " ", "vals"}], "]"}]}]}], "\n", "\t\t", 
   "]"}]}]}], \
"CodeInput",ExpressionUUID->"c4528778-24c2-45ea-9eb4-9f18c73c8c80"]
}, Closed]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]GFCombine\[RightFloor]", "CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"9952b074-1f0e-4d8d-a1ce-3deec8801ff3"],

Cell[BoxData[
 RowBox[{
  RowBox[{"GFCombine", "[", 
   RowBox[{
   "combiner_", ",", " ", "f_GridFunctionObject", ",", " ", 
    "s__GridFunctionObject"}], "]"}], ":=", "\n", "\t", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"vals", "=", 
      RowBox[{
       RowBox[{
        RowBox[{"#", "[", "\"\<Values\>\"", "]"}], "&"}], "/@", 
       RowBox[{"{", 
        RowBox[{"f", ",", " ", "s"}], "}"}]}]}], "}"}], ",", "\n", "\t\t", 
    RowBox[{
     RowBox[{"vals", "=", 
      RowBox[{"combiner", "@", "vals"}]}], ";", "\n", "\t\t", 
     RowBox[{"GFModify", "[", 
      RowBox[{"f", ",", " ", "Identity", ",", " ", 
       RowBox[{"vals", "&"}]}], "]"}]}]}], 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{
     "surely", " ", "this", " ", "is", " ", "not", " ", "the", " ", "best", 
      " ", "way", " ", "to", " ", "do", " ", "this"}], "..."}], " ", "*)"}], 
   "\n", "\t\t", 
   "]"}]}]], \
"CodeInput",ExpressionUUID->"404c1440-035b-4124-946c-24e8957e03d9"]
}, Closed]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]GFAdd\[RightFloor]", "CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"bca07ef8-1d99-464c-b953-513a0add0fdf"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"GFAdd", "[", 
    RowBox[{"f_GridFunctionObject", ",", " ", "s__GridFunctionObject"}], 
    "]"}], ":=", "\n", "\t", 
   RowBox[{"GFCombine", "[", 
    RowBox[{
     RowBox[{"Apply", "[", "Plus", "]"}], ",", " ", "f", ",", " ", "s"}], 
    "]"}]}], ";"}]], \
"CodeInput",ExpressionUUID->"edfa3411-19cd-4bc1-b675-ab5ab4981cf5"]
}, Closed]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]GFSubtract\[RightFloor]", "CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"12272ccd-d84b-4368-ad9e-ec58808a9d50"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"GFSubtract", "[", 
    RowBox[{"f_GridFunctionObject", ",", " ", "s__GridFunctionObject"}], 
    "]"}], ":=", "\n", "\t", 
   RowBox[{"GFCombine", "[", 
    RowBox[{
     RowBox[{"Apply", "[", "Subtract", "]"}], ",", " ", "f", ",", " ", "s"}], 
    "]"}]}], ";"}]], \
"CodeInput",ExpressionUUID->"b83a770b-3337-48cd-863b-681df147f325"]
}, Closed]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]GFDivide\[RightFloor]", "CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"8ae316e5-3ab7-4f94-87d0-c392abe9a7cb"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"GFMultiply", "[", 
    RowBox[{"f_GridFunctionObject", ",", " ", "s__GridFunctionObject"}], 
    "]"}], ":=", "\n", "\t", 
   RowBox[{"GFCombine", "[", 
    RowBox[{
     RowBox[{"Apply", "[", "Divide", "]"}], ",", " ", "f", ",", " ", "s"}], 
    "]"}]}], ";"}]], \
"CodeInput",ExpressionUUID->"03ccc013-514e-4abf-a9b6-d87563e55087"]
}, Closed]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]GFMultiply\[RightFloor]", "CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"92f2527b-ee91-437b-a2a1-1d4c34316020"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"GFMultiply", "[", 
    RowBox[{"f_GridFunctionObject", ",", " ", "s__GridFunctionObject"}], 
    "]"}], ":=", "\n", "\t", 
   RowBox[{"GFCombine", "[", 
    RowBox[{
     RowBox[{"Apply", "[", "Times", "]"}], ",", " ", "f", ",", " ", "s"}], 
    "]"}]}], ";"}]], \
"CodeInput",ExpressionUUID->"90d2689f-9c15-4366-ac8f-6bb33b287147"]
}, Closed]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]GFCompile\[RightFloor]", "CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"17587752-f674-4486-99c7-4f64e132fe89"],

Cell[CellGroupData[{

Cell["\[LeftCeiling]Pointwise\[RightFloor]", "CodeSubsubsubsection",
 Evaluatable->True,
 CellChangeTimes->{{3.738605817394455*^9, 
  3.738605818808558*^9}},ExpressionUUID->"5dd440f8-598f-4faf-b61d-\
e951386213dd"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"iGFPointwiseInterpCut", "[", "\n", "\t", 
    RowBox[{"interp_", ",", "\n", "\t", 
     RowBox[{"coords", ":", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"Automatic", "|", 
          RowBox[{"_", "?", "NumericQ"}]}], ")"}], ".."}], "}"}]}], ",", "\n",
      "\t", "preProcessor_", ",", "\n", "\t", "def_", ",", " ", "\n", "\t", 
     "min_"}], "\n", "\t", "]"}], ":=", "\n", "\t", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"potInterp", "=", "interp"}], ",", " ", 
       RowBox[{"dom", "=", 
        RowBox[{"interp", "[", 
         RowBox[{"[", "1", "]"}], "]"}]}], ",", " ", "preCoords", ",", " ", 
       RowBox[{"i", "=", "1"}], ",", " ", "getPot"}], "}"}], ",", "\n", 
     "\t\t", 
     RowBox[{
      RowBox[{"preCoords", "=", 
       RowBox[{"preProcessor", "@", "coords"}]}], ";", "\n", "\t\t", 
      RowBox[{
       RowBox[{"getPot", "[", "a_", "]"}], ":=", 
       RowBox[{"Apply", "[", 
        RowBox[{"potInterp", ",", " ", "a"}], "]"}]}], ";", "\n", "\t\t", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "@", "preCoords"}], "=!=", 
         RowBox[{"Length", "@", "dom"}]}], ",", "\n", "\t\t\t", 
        RowBox[{"PackageRaiseException", "[", "\n", "\t\t\t\t", 
         RowBox[{
         "Automatic", ",", "\n", "\t\t\t\t", 
          "\"\<Interpolation dimensions (``) and passed coordinate dimensions \
(``) don't match\>\"", ",", "\n", "\t\t\t\t", 
          RowBox[{"Length", "@", "dom"}], ",", "\n", "\t\t\t\t", 
          RowBox[{"Length", "@", "coords"}]}], "\n", "\t\t\t\t", "]"}]}], 
       "\n", "\t\t\t", "]"}], ";", "\n", "\t\t", 
      RowBox[{"Block", "[", 
       RowBox[{
        RowBox[{"{", "crds", "}"}], ",", "\n", "\t\t\t", 
        RowBox[{"Compile", "@@", "\n", "\t\t\t\t", 
         RowBox[{"With", "[", "\n", "\t\t\t\t\t", 
          RowBox[{
           RowBox[{"{", "\n", "\t\t\t\t\t\t", 
            RowBox[{
             RowBox[{"test", "=", "\n", "\t\t\t\t\t\t\t", 
              RowBox[{"With", "[", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"tests", "=", 
                  RowBox[{"MapThread", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "\[LessEqual]", "#2", 
                    "\[LessEqual]", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "&"}], ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"dom", ",", " ", "preCoords"}], "}"}]}], "]"}]}], 
                 "}"}], ",", "\n", "\t", "\t\t\t\t\t\t\t", 
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{"MemberQ", "[", 
                   RowBox[{"tests", ",", " ", 
                    RowBox[{"False", "&"}]}], "]"}], ",", "\n", "\t", "\t", 
                  "\t\t\t\t\t\t\t", "False", ",", "\n", "\t", "\t", 
                  "\t\t\t\t\t\t\t", 
                  RowBox[{"And", "@@", 
                   RowBox[{"DeleteCases", "[", 
                    RowBox[{"tests", ",", " ", "True"}], "]"}]}]}], "\n", 
                 "\t\t\t\t\t\t\t\t\t", "]"}]}], "\n", "\t\t\t\t\t\t\t\t", 
               "]"}]}], ",", "\n", "\t\t\t\t\t\t", 
             RowBox[{"crdSpec", "=", "\n", "\t\t\t\t\t\t\t", 
              RowBox[{"Quiet", "@", "\n", "\t\t\t\t\t\t\t\t", 
               RowBox[{"preProcessor", "@", "\n", "\t\t\t\t\t\t\t\t\t", 
                RowBox[{"Map", "[", "\n", "\t", "\t\t\t\t\t\t\t\t\t", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"#", "===", "Automatic"}], ",", " ", 
                    RowBox[{"crds", "[", 
                    RowBox[{"[", 
                    RowBox[{"i", "++"}], "]"}], "]"}], ",", " ", "#"}], "]"}],
                    "&"}], ",", "\n", "\t", "\t\t\t\t\t\t\t\t\t", "crds"}], 
                 "\n", "\t", "\t\t\t\t\t\t\t\t\t", "]"}]}]}]}]}], "\n", 
            "\t\t\t\t\t\t", "}"}], ",", "\n", "\t\t\t\t\t", 
           RowBox[{"Hold", "[", "\n", "\t\t\t\t\t\t", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"{", 
               RowBox[{"crds", ",", " ", "_Real"}], "}"}], "}"}], ",", "\n", 
             "\t\t\t\t\t\t", 
             RowBox[{"Module", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"default", "=", "def"}], ",", " ", 
                 RowBox[{"mininmum", "=", "min"}]}], "}"}], ",", "\n", 
               "\t\t\t\t\t\t\t", 
               RowBox[{"If", "[", 
                RowBox[{"test", ",", "\n", "\t\t\t\t\t\t\t\t", 
                 RowBox[{
                  RowBox[{"getPot", "[", "crdSpec", "]"}], "-", "mininmum"}], 
                 ",", "\n", "\t\t\t\t\t\t\t\t", "default"}], "\n", 
                "\t\t\t\t\t\t\t\t", "]"}]}], "\n", "\t\t\t\t\t\t\t", "]"}], 
             ",", "\n", "\t\t\t\t\t\t", 
             RowBox[{"{", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"getPot", "[", "_", "]"}], ",", " ", "_Real", ",", 
                " ", "1"}], "}"}], "}"}], ",", "\n", "\t\t\t\t\t\t", 
             RowBox[{"RuntimeOptions", "\[Rule]", 
              RowBox[{"{", "\n", "\t", "\t\t\t\t\t\t", 
               RowBox[{
                RowBox[{"\"\<EvaluateSymbolically\>\"", "\[Rule]", "False"}], 
                ",", "\n", "\t", "\t\t\t\t\t\t", 
                RowBox[{"\"\<WarningMessages\>\"", "\[Rule]", "False"}]}], 
               "\n", "\t", "\t\t\t\t\t\t", "}"}]}], ",", "\n", "\t", 
             "\t\t\t\t\t", 
             RowBox[{"RuntimeAttributes", "\[Rule]", 
              RowBox[{"{", "Listable", "}"}]}]}], "\n", "\t\t\t\t\t\t", 
            "]"}]}], "\n", "\t\t\t\t\t", "]"}]}]}], "\n", "\t\t\t\t", 
       "]"}]}]}], "\n", "\t\t\t", "]"}]}], 
  ";"}]], "CodeInput",ExpressionUUID->"33e79998-89ef-43ab-a277-15f1c1ac6a5f"]
}, Closed]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]Vectorized\[RightFloor]", "CodeSubsubsubsection",
 Evaluatable->True,
 CellChangeTimes->{{3.738605821218403*^9, 
  3.738605822584381*^9}},ExpressionUUID->"096eb1d9-f5cf-48d2-b190-\
9fcf4ddf3f5f"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"iGFVectorizedInterpCut", "[", 
    RowBox[{
    "interp_", ",", " ", "coords_", ",", " ", "preProcessor_", ",", " ", 
     "def_", ",", " ", "min_"}], "]"}], ":=", "\n", "\t", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"potInterp", "=", "interp"}], ",", " ", 
       RowBox[{"dom", "=", 
        RowBox[{"interp", "[", 
         RowBox[{"[", "1", "]"}], "]"}]}], ",", " ", 
       RowBox[{"j", "=", "1"}]}], "}"}], ",", "\n", "\t\t", 
     RowBox[{"Block", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"crds", ",", " ", "pt", ",", " ", "gps"}], "}"}], ",", "\n", 
       "\t\t\t\t", 
       RowBox[{"Module", "[", "\n", "\t", "\t\t\t\t", 
        RowBox[{
         RowBox[{"{", "\n", "\t", "\t\t\t\t\t", 
          RowBox[{
          "getPot", ",", "\n", "\t", "\t\t\t\t\t", "varBlock", ",", "\n", 
           "\t\t\t\t\t\t", "varBlock2", ",", "\n", "\t\t\t\t\t\t", 
           "preCoords"}], "\n", "\t\t\t\t\t\t", "}"}], ",", "\n", 
         "\t\t\t\t\t", 
         RowBox[{
          RowBox[{
           RowBox[{"getPot", "[", "a_", "]"}], ":=", 
           RowBox[{"Apply", "[", 
            RowBox[{"potInterp", ",", " ", "a"}], "]"}]}], ";", "\n", 
          "\t\t\t\t\t", 
          RowBox[{"preCoords", "=", "\n", "\t\t\t\t\t\t", 
           RowBox[{"Quiet", "@", "\n", "\t\t\t\t\t\t\t", 
            RowBox[{"preProcessor", "@", "\n", "\t\t\t\t\t\t\t\t", 
             RowBox[{"Map", "[", "\n", "\t\t\t\t\t\t\t\t\t", 
              RowBox[{
               RowBox[{
                RowBox[{"If", "[", 
                 RowBox[{
                  RowBox[{"#", "===", "Automatic"}], ",", " ", "\n", 
                  "\t\t\t\t\t\t\t\t\t\t", 
                  RowBox[{"Compile`GetElement", "[", 
                   RowBox[{"crds", ",", " ", 
                    RowBox[{"j", "++"}]}], "]"}], ",", " ", "\n", 
                  "\t\t\t\t\t\t\t\t\t\t", "#"}], "\n", "\t\t\t\t\t\t\t\t\t\t",
                  "]"}], "&"}], ",", "\n", "\t\t\t\t\t\t\t\t\t", "coords"}], 
              "\n", "\t\t\t\t\t\t\t\t\t", "]"}]}]}]}], ";", "\n", 
          "\t\t\t\t\t", 
          RowBox[{"j", "=", "1"}], ";", "\n", "\t\t\t\t\t", 
          RowBox[{"(*", " ", 
           RowBox[{"bounds", " ", "checking", " ", "for", " ", "test"}], " ", 
           "*)"}], "\n", "\t", "\t\t\t\t", 
          RowBox[{"With", "[", "\n", "\t\t\t\t\t\t", 
           RowBox[{
            RowBox[{"{", "\n", "\t\t\t\t\t\t\t", 
             RowBox[{
              RowBox[{"test", "=", "\n", "\t\t\t\t\t\t\t\t", 
               RowBox[{"With", "[", "\n", "\t\t\t\t\t\t\t\t\t", 
                RowBox[{
                 RowBox[{"{", "\n", "\t\t\t\t\t\t\t\t\t\t", 
                  RowBox[{"tests", "=", "\n", "\t\t\t\t\t\t\t\t\t\t\t", 
                   RowBox[{"MapThread", "[", "\n", "\t\t\t\t\t\t\t\t\t\t\t\t", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "\[LessEqual]", "\n", 
                    "\t\t\t\t\t\t\t\t\t\t\t\t\t", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"NumericQ", "[", "#2", "]"}], ",", " ", "\n", 
                    "\t\t\t\t\t\t\t\t\t\t\t\t\t\t", 
                    RowBox[{
                    RowBox[{"j", "++"}], ";", "#2"}], ",", " ", "\n", 
                    "\t\t\t\t\t\t\t\t\t\t\t\t\t\t", 
                    RowBox[{"Compile`GetElement", "[", 
                    RowBox[{"pt", ",", " ", 
                    RowBox[{"j", "++"}]}], "]"}]}], "\n", 
                    "\t\t\t\t\t\t\t\t\t\t\t\t\t\t", "]"}], "\[LessEqual]", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "&"}], ",", " ", "\n", 
                    "\t\t\t\t\t\t\t\t\t\t\t\t", 
                    RowBox[{"{", 
                    RowBox[{"dom", ",", " ", "preCoords"}], "}"}]}], "\n", 
                    "\t\t\t\t\t\t\t\t\t\t\t\t", "]"}]}], "\n", 
                  "\t\t\t\t\t\t\t\t\t\t", "}"}], ",", "\n", 
                 "\t\t\t\t\t\t\t\t\t", 
                 RowBox[{"If", "[", 
                  RowBox[{
                   RowBox[{"MemberQ", "[", 
                    RowBox[{"tests", ",", " ", "False"}], "]"}], ",", "\n", 
                   "\t\t\t\t\t\t\t\t\t\t", "False", ",", "\n", "\t", "\t", 
                   "\t", "\t\t\t\t\t\t\t", 
                   RowBox[{"And", "@@", 
                    RowBox[{"DeleteCases", "[", 
                    RowBox[{"tests", ",", " ", "True"}], "]"}]}]}], "\n", 
                  "\t", "\t\t\t\t\t\t\t\t\t", "]"}]}], "\n", 
                "\t\t\t\t\t\t\t\t\t", "]"}]}], ",", "\n", "\t\t\t\t\t\t\t", 
              RowBox[{"crdSpec", "=", "preCoords"}], ",", "\n", "\t", 
              "\t\t\t\t\t\t", 
              RowBox[{"means", "=", 
               RowBox[{"Mean", "/@", "dom"}]}], ",", "\n", "\t\t\t\t\t\t\t", 
              RowBox[{"fn", "=", "\n", "\t\t\t\t\t\t\t\t", 
               RowBox[{"Compile", "[", "\n", "\t\t\t\t\t\t\t\t\t", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"{", 
                   RowBox[{"crds", ",", " ", "_Real", ",", " ", "1"}], "}"}], 
                  "}"}], ",", "\n", "\t\t\t\t\t\t\t\t\t", 
                 RowBox[{"Evaluate", "@", "preCoords"}], ",", "\n", 
                 "\t\t\t\t\t\t\t\t\t", 
                 RowBox[{"RuntimeAttributes", "\[Rule]", 
                  RowBox[{"{", "Listable", "}"}]}]}], "\n", 
                "\t\t\t\t\t\t\t\t\t", "]"}]}]}], "\n", "\t\t\t\t\t\t\t", 
             "}"}], ",", "\n", "\t\t\t\t\t\t", 
            RowBox[{"Compile", "@@", "\n", "\t\t\t\t\t\t\t", 
             RowBox[{"Hold", "[", 
              RowBox[{"(*", " ", 
               RowBox[{
               "True", " ", "Compile", " ", "body", " ", "but", " ", "with", 
                " ", "Hold", " ", "for", " ", "code", " ", "injection"}], " ",
                "*)"}], "\n", "\t", "\t\t\t\t\t\t\t", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"{", 
                 RowBox[{"gps", ",", " ", "_Real", ",", " ", "2"}], "}"}], 
                "}"}], ",", "\n", "\t\t\t\t\t\t\t\t", 
               RowBox[{"Module", "[", "\n", "\t\t\t\t\t\t\t\t\t", 
                RowBox[{
                 RowBox[{"{", "\n", "\t\t\t\t\t\t\t\t\t\t", 
                  RowBox[{
                   RowBox[{"pts", "=", 
                    RowBox[{"fn", "@", "gps"}]}], ",", "\n", 
                   "\t\t\t\t\t\t\t\t\t\t", 
                   RowBox[{"ongrid", "=", 
                    RowBox[{"Table", "[", 
                    RowBox[{"0", ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"i", ",", " ", 
                    RowBox[{"Length", "@", "gps"}]}], "}"}]}], "]"}]}], ",", 
                   "\n", "\t", "\t\t\t\t\t\t\t\t\t", "intres", ",", "\n", 
                   "\t\t\t\t\t\t\t\t\t\t", 
                   RowBox[{"midpt", "=", "means"}], ",", "\n", 
                   "\t\t\t\t\t\t\t\t\t\t", "interpvals", ",", "\n", 
                   "\t\t\t\t\t\t\t\t\t\t", "interpcounter", ",", "\n", "\t", 
                   "\t\t\t\t\t\t\t\t\t", "interppts", ",", "\n", "\t", 
                   "\t\t\t\t\t\t\t\t\t", 
                   RowBox[{"i", "=", "1"}], ",", "\n", "\t", 
                   "\t\t\t\t\t\t\t\t\t", 
                   RowBox[{"barrier", "=", "def"}], ",", "\n", "\t", 
                   "\t\t\t\t\t\t\t\t\t", 
                   RowBox[{"minimum", "=", "min"}]}], "\n", "\t", 
                  "\t\t\t\t\t\t\t\t\t", "}"}], ",", "\n", "\t", 
                 "\t\t\t\t\t\t\t\t", 
                 RowBox[{
                  RowBox[{"interppts", "=", 
                   RowBox[{"Table", "[", 
                    RowBox[{"midpt", ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"i", ",", " ", 
                    RowBox[{"Length", "@", "pts"}]}], "}"}]}], "]"}]}], ";", 
                  "\n", "\t", "\t\t\t\t\t\t\t\t", 
                  RowBox[{"(*", " ", 
                   RowBox[{"Find", " ", "points", " ", "in", " ", "domain"}], 
                   " ", "*)"}], "\n", "\t", "\t\t\t\t\t\t\t\t", 
                  RowBox[{"interpcounter", "=", "0"}], ";", "\n", 
                  "\t\t\t\t\t\t\t\t\t", 
                  RowBox[{"Do", "[", "\n", "\t\t\t\t\t\t\t\t\t\t", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{"test", ",", "\n", "\t\t\t\t\t\t\t\t\t\t\t", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"ongrid", "[", 
                    RowBox[{"[", "i", "]"}], "]"}], "=", "1"}], ";", "\n", 
                    "\t", "\t\t\t\t\t\t\t\t\t\t", 
                    RowBox[{
                    RowBox[{"interppts", "[", 
                    RowBox[{"[", 
                    RowBox[{"++", "interpcounter"}], "]"}], "]"}], "=", 
                    "pt"}]}]}], "\n", "\t\t\t\t\t\t\t\t\t\t\t", "]"}], ";", 
                    "\n", "\t\t\t\t\t\t\t\t\t\t", 
                    RowBox[{"i", "++"}]}], ",", "\n", "\t\t\t\t\t\t\t\t\t\t", 
                    
                    RowBox[{"{", 
                    RowBox[{"pt", ",", " ", "pts"}], "}"}]}], "\n", 
                   "\t\t\t\t\t\t\t\t\t\t", "]"}], ";", "\n", 
                  "\t\t\t\t\t\t\t\t\t", 
                  RowBox[{"(*", " ", 
                   RowBox[{
                   "Apply", " ", "InterpolatingFunction", " ", "only", " ", 
                    "once", " ", 
                    RowBox[{"(", 
                    RowBox[{"one", " ", "MainEval", " ", "call"}], ")"}]}], 
                   " ", "*)"}], "\n", "\t", "\t\t\t\t\t\t\t\t", 
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{"interpcounter", ">", "0"}], ",", "\n", "\t", 
                    "\t\t\t\t\t\t\t\t\t", 
                    RowBox[{
                    RowBox[{"intres", "=", 
                    RowBox[{"interppts", "[", 
                    RowBox[{"[", 
                    RowBox[{";;", "interpcounter"}], "]"}], "]"}]}], ";", 
                    "\n", "\t", "\t\t\t\t\t\t\t\t\t", 
                    RowBox[{"interpvals", "=", 
                    RowBox[{
                    RowBox[{"getPot", "[", 
                    RowBox[{"Transpose", "@", "intres"}], "]"}], "-", 
                    "minimum"}]}], ";", "\n", "\t", "\t\t\t\t\t\t\t\t\t", 
                    RowBox[{"(*", " ", 
                    RowBox[{
                    "Pick", " ", "points", " ", "that", " ", "are", " ", "in",
                     " ", "domain"}], " ", "*)"}], "\n", "\t", 
                    "\t\t\t\t\t\t\t\t\t", 
                    RowBox[{"interpcounter", "=", "0"}], ";", "\n", "\t", 
                    "\t\t\t\t\t\t\t\t\t", 
                    RowBox[{"Map", "[", "\n", "\t", "\t\t\t\t\t\t\t\t\t\t", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"#", "\[Equal]", "1"}], ",", " ", 
                    RowBox[{"interpvals", "[", 
                    RowBox[{"[", 
                    RowBox[{"++", "interpcounter"}], "]"}], "]"}], ",", " ", 
                    "barrier"}], "]"}], "&"}], ",", "\n", "\t", 
                    "\t\t\t\t\t\t\t\t\t\t", "ongrid"}], "\n", "\t", 
                    "\t\t\t\t\t\t\t\t\t\t", "]"}]}], ",", "\n", "\t", 
                    "\t\t\t\t\t\t\t\t\t", 
                    RowBox[{"Table", "[", 
                    RowBox[{"barrier", ",", " ", 
                    RowBox[{"{", 
                    RowBox[{"i", ",", " ", 
                    RowBox[{"Length", "@", "gps"}]}], "}"}]}], "]"}]}], "\n", 
                   "\t", "\t\t\t\t\t\t\t\t\t", "]"}]}]}], "\n", "\t", 
                "\t\t\t\t\t\t\t\t", "]"}], ",", "\n", "\t", "\t\t\t\t\t\t\t", 
               
               RowBox[{"{", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"getPot", "[", "_", "]"}], ",", " ", "_Real", ",", 
                  " ", "1"}], "}"}], "}"}], ",", "\n", "\t", "\t\t\t\t\t\t\t", 
               RowBox[{"RuntimeOptions", "\[Rule]", 
                RowBox[{"{", "\n", "\t", "\t\t\t\t\t\t\t\t", 
                 RowBox[{
                  RowBox[{
                  "\"\<EvaluateSymbolically\>\"", "\[Rule]", "False"}], ",", 
                  "\n", "\t", "\t\t\t\t\t\t\t\t", 
                  RowBox[{"\"\<WarningMessages\>\"", "\[Rule]", "False"}]}], 
                 "\n", "\t\t\t\t\t\t\t\t\t", "}"}]}], ",", "\n", 
               "\t\t\t\t\t\t\t\t", 
               RowBox[{"CompilationOptions", "->", 
                RowBox[{"{", 
                 RowBox[{
                 "\"\<InlineExternalDefinitions\>\"", " ", "->", " ", 
                  "True"}], "}"}]}], ",", "\n", "\t\t\t\t\t\t\t\t", 
               RowBox[{"RuntimeAttributes", "->", 
                RowBox[{"{", "Listable", "}"}]}]}], "\n", "\t\t\t\t\t\t\t", 
              "]"}]}]}], "\n", "\t\t\t\t\t\t", "]"}]}]}], "\n", "\t\t\t\t\t", 
        "]"}]}], "\n", "\t\t\t\t", "]"}]}], "\n", "\t", "\t\t", "]"}]}], 
  ";"}]], "CodeInput",ExpressionUUID->"fc5ac6ec-69b6-44ad-8ca6-82e85c52ba9d"]
}, Closed]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]GFCompile\[RightFloor]", "CodeSubsubsubsection",
 Evaluatable->True,ExpressionUUID->"536b41d8-68f3-48c0-b1b9-4f5a04e97418"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "GFCompile", "]"}], "=", "\n", "\t", 
   RowBox[{"{", "\n", "\t\t", 
    RowBox[{
     RowBox[{"\"\<CoordinateTransformation\>\"", "\[Rule]", "Identity"}], ",",
      "\n", "\t\t", 
     RowBox[{"\"\<Minimum\>\"", "\[Rule]", "0."}], ",", "\n", "\t\t", 
     RowBox[{"\"\<Default\>\"", "\[Rule]", "0."}], ",", "\n", "\t\t", 
     RowBox[{"\"\<Mode\>\"", "\[Rule]", "\"\<Vector\>\""}]}], "\n", "\t\t", 
    "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"GFCompile", "[", "\n", "\t", 
   RowBox[{"gf_", ",", " ", "\n", "\t", 
    RowBox[{"coordSpec", ":", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"Automatic", "|", 
          RowBox[{"_", "?", "NumericQ"}]}], ")"}], ".."}], "}"}], "|", 
      "Automatic"}], ":", "Automatic"}], ",", "\n", "\t", 
    RowBox[{"ops", ":", 
     RowBox[{"OptionsPattern", "[", "]"}]}]}], "\n", "\t", "]"}], ":=", "\n", 
  "\t", 
  RowBox[{
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"OptionValue", "[", "\"\<Mode\>\"", "]"}], "===", 
      "\"\<Vector\>\""}], ",", "\n", "\t\t", "iGFVectorizedInterpCut", ",", 
     "\n", "\t\t", "iGFPointwiseInterpCut"}], "\n", "\t\t", "]"}], "[", "\n", 
   "\t\t\t", 
   RowBox[{
    RowBox[{"GFInterpolation", "[", "gf", "]"}], ",", "\n", "\t\t\t", 
    RowBox[{"Replace", "[", "\n", "\t\t\t\t", 
     RowBox[{"coordSpec", ",", " ", "\n", "\t\t\t\t", 
      RowBox[{"Automatic", "\[RuleDelayed]", 
       RowBox[{"ConstantArray", "[", 
        RowBox[{"Automatic", ",", " ", 
         RowBox[{"GFDimension", "[", "gf", "]"}]}], "]"}]}]}], "\n", 
     "\t\t\t\t", "]"}], ",", "\n", "\t\t\t", 
    RowBox[{"OptionValue", "[", "\"\<CoordinateTransformation\>\"", "]"}], 
    ",", "\n", "\t\t\t", 
    RowBox[{"OptionValue", "[", "\"\<Default\>\"", "]"}], ",", "\n", "\t\t\t", 
    RowBox[{"OptionValue", "[", "\"\<Minimum\>\"", "]"}]}], "\n", "\t\t\t", 
   "]"}]}]}], \
"CodeInput",ExpressionUUID->"b47a876a-235d-48d6-a152-2dbf55f2ecb7"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]GFAverage\[RightFloor]", "CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"c056b072-4975-4133-85db-9d4a537801c5"],

Cell["\<\
\[LeftCeiling]
\tShould allow for averaging a function over some of the dimensions using an \
appropriate PDF.
\tPDF must first be discretized if necessary, dimensions should be checked, \
and grid slicing performed as 
\tneeded.
\[RightFloor]\
\>", "Text",
 Evaluatable->True,ExpressionUUID->"a787bdc5-66a7-43a1-a8d9-1410b2206b5c"],

Cell[CellGroupData[{

Cell["\[LeftCeiling]iGFAverage\[RightFloor]", "CodeSubsubsubsection",
 Evaluatable->True,ExpressionUUID->"d41b34b9-8f38-4b89-8adc-5c47c9ba165f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"iGFAverage", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"grid_", ",", " ", "values_"}], "}"}], ",", " ", "dist_", ",", 
    " ", "n_"}], "]"}], ":=", "\n", "\t", 
  "values"}]], \
"CodeInput",ExpressionUUID->"be52c96b-ae54-4c67-b77a-70734120883f"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]GFAverage\[RightFloor]", "CodeSubsubsubsection",
 Evaluatable->True,ExpressionUUID->"14536278-7efe-43ee-8c8f-fdeb7c93848e"],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{"GFAverage", "[", 
    RowBox[{"gf_", ",", " ", "dist_"}], "]"}], ":="}], 
  "*)"}]], "CodeInput",ExpressionUUID->"4e4096b0-ff59-4ee2-a6d1-782240bb14a0"]\

}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]GFIntegrate\[RightFloor]", "CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"a6a2f3e2-4652-4c47-b03e-b13a51aef1e1"],

Cell["\<\
\[LeftCeiling]
\tOne-dimensional integration via Trapezoid Rule...in n-dim unspecified. 
\tAsked about here: \
https://mathematica.stackexchange.com/questions/189007/trapezoid-rule-esque-\
integration-with-unevenly-spaced-n-d-grid
\[RightFloor]\
\>", "Text",
 Evaluatable->True,ExpressionUUID->"a9936562-7ec6-427e-b22e-5a1e365d0b9a"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"GFIntegrate", "[", "\n", "\t", 
    RowBox[{
     RowBox[{"grid_List", "?", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"VectorQ", "[", 
         RowBox[{"#", ",", " ", "Internal`RealValuedNumericQ"}], "]"}], "&"}],
        ")"}]}], ",", " ", "\n", "\t", 
     RowBox[{"f_List", "?", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"VectorQ", "[", 
         RowBox[{"#", ",", " ", "Internal`RealValuedNumericQ"}], "]"}], "&"}],
        ")"}]}]}], "\n", "\t", "]"}], ":=", "\n", "\t", 
   RowBox[{"Module", "[", "\n", "\t\t", 
    RowBox[{
     RowBox[{"{", "\n", "\t\t\t", 
      RowBox[{
       RowBox[{"diffs", "=", 
        RowBox[{"Differences", "[", "grid", "]"}]}], ",", "\n", "\t\t\t", 
       RowBox[{"means", "=", 
        RowBox[{"MovingAverage", "[", 
         RowBox[{"f", ",", " ", "2"}], "]"}]}]}], "\n", "\t\t\t", "}"}], ",", 
     "\n", "\t\t", 
     RowBox[{"diffs", ".", "means"}]}], "\n", "\t\t", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"GFIntegrate", "[", "\n", "\t", 
    RowBox[{
     RowBox[{"grid_List", "?", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"VectorQ", "[", 
         RowBox[{"#", ",", " ", "Internal`RealValuedNumericQ"}], "]"}], "&"}],
        ")"}]}], ",", " ", "\n", "\t", 
     RowBox[{"f_List", "?", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"VectorQ", "[", 
         RowBox[{"#", ",", " ", "Internal`RealValuedNumericQ"}], "]"}], "&"}],
        ")"}]}], ",", "\n", "\t", 
     RowBox[{"vec_List", "?", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"VectorQ", "[", 
         RowBox[{"#", ",", " ", "Internal`RealValuedNumericQ"}], "]"}], "&"}],
        ")"}]}]}], "\n", "\t", "]"}], ":=", "\n", "\t", 
   RowBox[{"GFIntegrate", "[", 
    RowBox[{"grid", ",", " ", 
     RowBox[{"f", "*", "vec"}]}], "]"}]}], 
  ";"}]}], "CodeInput",ExpressionUUID->"b69b3ee0-4e15-4695-8b30-58a607f67eb6"]\

}, Closed]]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"End", "[", "]"}], 
  ";"}]], "InputSection",ExpressionUUID->"07b32dc5-8759-49c0-8fd1-\
21dac08e936a"]
}, Open  ]],

Cell["", "SectionSeparator",ExpressionUUID->"9b890501-c575-45aa-bf6b-\
4a602a09f246"]
},
WindowSize->{808, 755},
WindowMargins->{{Automatic, 225}, {5, Automatic}},
TaggingRules->{
 "UUIDButtons" -> {
   "Active" -> {
     "Button-b8297203-6b28-48f9-8ba3-edbd5eb431d2" -> False, 
      "Button-8c92aebb-2725-4f7c-a6a8-f90e3a4dce9c" -> False, 
      "Button-ede3a027-3279-40a0-8aa4-1fcc5f60357d" -> False, 
      "Button-89ffd2c3-ec41-4179-a9b1-8e28670bca2c" -> False, 
      "Button-ca46e5e0-4fd1-47e8-8cf6-72998922b757" -> False, 
      "Button-a6d68254-3684-4d32-83fc-e5ef6f443930" -> False}}},
FrontEndVersion->"11.3 for Mac OS X x86 (32-bit, 64-bit Kernel) (March 5, \
2018)",
StyleDefinitions->FrontEnd`FileName[{"BTools"}, "CodePackage.nb", 
  CharacterEncoding -> "UTF-8"]
]

