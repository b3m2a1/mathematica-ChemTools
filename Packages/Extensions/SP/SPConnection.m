(* ::Package:: *)

(* Autogenerated Package *)

$SPProjDir::usage="Current sprectrum assignment directory";
$SPDir::usage="sp binary location";
$SP::usage="Default SPManager from $SPDir";
$SPCAT::usage="Default SPCAT";
$SPFIT::usage="Default SPFIT";


$VARFile::usage=".var file for the current project";
$PARFile::usage=".par file for the current project";
$LINFile::usage=".lin file for the current project";


(* ::Subsubsection::Closed:: *)
(*Build*)



SPBuild::usage="Downloads the SP stuff if necessary and compiles the C code (Unix only)";


(* ::Subsubsection::Closed:: *)
(*Run*)



SPManager::usage="Useful little wrapper";
SPCall::usage="General call function for calling spfit or spcat";
SPRun::usage="Runs SPCall on fit, then cat, then opens the var file 
(end action may change in the future)";
SPRunStrings::usage=
  "Sends strings to spcat and spfit and returns the string output";


(* ::Subsubsection::Closed:: *)
(*IO*)



SPio::usage="Input/Ouput formatter for SPFIT/SPCAT";


SPChanges::usage=
  "Uses git diff to find differences in files across backups";


(* ::Subsubsection::Closed:: *)
(*Viewer*)



SPViewer::usage=
  "An interactive viewer for spfit/spcat calculations";


(* ::Subsubsection::Closed:: *)
(*PAR*)



$SPParIDUsageInfo::usage=
  "A dict of usage info for the various components of a parameter ID";


SPParBuildID::usage=
  "Builds a parameter ID";
SPParParseID::usage=
  "Parses a parameter ID";


$SPParConstantMap::usage=
  "A collection of constants and their ID numbers";
SPParSelectID::usage=
  "Selects the appropriate ID for a given constant";


SPParFile::usage=
  "Generates a par file string from a set of specs";
SPParConfig::usage=
  "Generates a par file config from a set of atoms and specs";


(* ::Subsubsection::Closed:: *)
(*INT*)



SPIntBuildFlags::usage="";
SPIntParseFlags::usage="";


SPIntBuildID::usage="";
SPIntParseID::usage="";


SPIntFile::usage="Formats a .int file";
SPIntConfig::usage="Returns a config association for a set of atoms";


Begin["`Private`"];


(* ::Subsection:: *)
(*Globals*)



$SPProjDir=None;
$SPDir=ChemExtension["sp"];
$SP:=SPManager[$SPDir];
$SPCAT:=SPManager[$SPDir,"spcat"];
$SPFIT:=SPManager[$SPDir,"spfit"];


$VARFile:=Replace[$SPProjDir,s_String:>s<>".var"];
$PARFile:=Replace[$SPProjDir,s_String:>s<>".par"];
$LINFile:=Replace[$SPProjDir,s_String:>s<>".lin"];


(* ::Subsection:: *)
(*Download and make (Unix)*)



$SPHOME="http://spec.jpl.nasa.gov/ftp/pub/calpgm";
$SPFILES="*.c"|"*.h"|"Makefile";


spdownloadFileNames[pat_:$SPFILES]:=
  Select[
    URLParse[#,"Path"][[-1]]&/@
      Replace[$SPFILEURLS,  
        Except[{__String}]:>
          (
            $SPFILEURLS=
              Cases[
                Import[$SPHOME,{"HTML","XMLObject"}],
                XMLElement["a",{___,"href"->f_,___},_]:>
                  StringTrim[f,$SPHOME],
                \[Infinity]
                ]
            )
        ],
    StringMatchQ[$SPFILES]
    ]


SPDownload[dir_:Automatic]:=
  With[{d=Replace[dir,Automatic->$SPDir]},
    If[!DirectoryQ@d,CreateDirectory[d]];
    If[!FileExistsQ@FileNameJoin@{d,"Makefile"},
      URLDownload[
        URLBuild@{$SPHOME,#},
        FileNameJoin@{d,#}]&/@spdownloadFileNames[],
      d
      ]
  ];


SPBuild::make="``";
SPBuild[dir_:Automatic]:=
  With[{d=Replace[dir,Automatic->$SPDir]},
    If[!FileExistsQ@FileNameJoin@{d,"Makefile"},SPDownload@d];
    SetDirectory@d;
    With[{r=RunProcess@{"make","-f",FileNameJoin@{d,"Makefile"}}},
      ResetDirectory[];
      If[r["StandardError"]=!="",Message[SPBuild::make,r["StandardError"]]];
      If[r["StandardOutput"]=!="",Message[SPBuild::make,r["StandardOutput"]]];
      If[r["ExitCode"]=!=0,
        $Failed,
        SPManager[d]
        ]
      ]
    ];


SPDownloadFile[f_,dir:_String?DirectoryQ|Automatic|None:Automatic]:=
  With[{path=
    If[URLParse[f]["Scheme"]===None,
      If[Length@URLParse[f]["Path"]==0||URLParse[f]["Domain"]===None,
        URLBuild@{ChemTools`Private`$SPHOME,f},
        URLBuild@Merge[{"Scheme"->"https",URLParse@f},First]
        ],
      f
      ],
    d=Replace[dir,{Automatic->"~/Desktop",None->$TemporaryDirectory}]},
    URLDownload[path,FileNameJoin@{d,Last@URLParse[path]["Path"]}]
    ];


(* ::Subsection:: *)
(*Run stuff*)



runBasic[cmd_,file_?FileExistsQ]:=(
  SetDirectory@DirectoryName@file;
  With[{r=
    RunProcess@{
      If[
        StringContainsQ[cmd,$PathnameSeparator],
        ExpandFileName@cmd,
        cmd
        ],
      FileNameTake@file}},
    ResetDirectory[];
    If[StringLength@r["StandardError"]>0,
      Message[SPRun::err,r["StandardError"]]
      ];
    If[StringLength@r["StandardOutput"]>0,
      Message[SPRun::out,r["StandardOutput"]]
      ];
    With[{d=DirectoryName@file,b=FileBaseName@file},
      Merge[{
        r,
        "PAR"->
          Replace[FileNameJoin@{d,b<>".par"},Except[_String?FileExistsQ]->None],
        "LIN"->
          Replace[FileNameJoin@{d,b<>".lin"},Except[_String?FileExistsQ]->None],
        "VAR"->
          Replace[FileNameJoin@{d,b<>".var"},Except[_String?FileExistsQ]->None],
        "INT"->
          Replace[FileNameJoin@{d,b<>".int"},Except[_String?FileExistsQ]->None],
        "CAT"->
          Replace[FileNameJoin@{d,b<>".cat"},Except[_String?FileExistsQ]->None],
        "OUT"->
          Replace[FileNameJoin@{d,b<>".out"},Except[_String?FileExistsQ]->None],
        "STR"->
          Replace[FileNameJoin@{d,b<>".str"},Except[_String?FileExistsQ]->None],
        "EGY"->
          Replace[FileNameJoin@{d,b<>".egy"},Except[_String?FileExistsQ]->None]
        },
        Last
        ]
      ]
    ]
  )


createArc[file_]:=
  With[{
    dir=If[DirectoryQ@file,file,DirectoryName@file],
    base=FileBaseName@file,tmp=CreateDirectory[]},
    With[{fs=FileNameJoin@{dir,base<>"."<>#}&/@{"par","var","lin"}},
      CopyFile[#,FileNameJoin@{tmp,FileNameTake@#}]&/@fs;
      If[!FileExistsQ@FileNameJoin@{dir,"Backups"},
        CreateDirectory@FileNameJoin@{dir,"Backups"}];
      CreateArchive[tmp,
        FileNameJoin@{
          dir,
          "Backups",
          DateString@{
            "Month","-","Day","-","Year","_",
            "Hour","-","Minute","-","Second"}<>".zip"
          }]
      ]
    ];


fitCall[spfit_,file_,arc_:True]:=
  With[{f=FileNameJoin@{
    If[DirectoryQ@file,file,DirectoryName@file],
    FileBaseName@file<>".par"}},
    If[arc,createArc@file];
    runBasic[spfit,f]
    ];


catCall[spcat_,file_]:=
  With[{f=
    FileNameJoin@{If[DirectoryQ@file,file,DirectoryName@file],FileBaseName@file<>".var"}
    },
    runBasic[spcat,f]
    ];


SPCall[dir_,prog_,f:_String|_Association]:=
  Replace[{
    a_Association?(KeyMemberQ["PAR"|"VAR"]):>SPio@a,
    a_Association?(KeyMemberQ["spcat"|"spfit"]):>
      Replace[r_Association:>SPio@r]/@a,
    s_SPio:>s,
    e_:>$Failed
    }]@
  Switch[ToLowerCase@prog,
    "spfit",
      If[MatchQ[f,_String],
        fitCall[FileNameJoin@{dir,prog},f],
        Which[
          !KeyMemberQ[f,"PAR"],
            fitCall[FileNameJoin@{dir,prog},f["Directory"]],
          FileExistsQ@f["PAR"],
            fitCall[FileNameJoin@{dir,prog},f["PAR"]],
          FileExistsQ@FileNameJoin@{Lookup[f,"Directory",""],f["PAR"]},
            fitCall[FileNameJoin@{dir,prog},FileNameJoin@{f["Directory"],f["PAR"]}],
          True,
            SPRunStrings[dir,
              Replace[f["Directory"],_Missing:>Sequence[]],
              f,True,False]
          ]
        ],
    "spcat",
      If[MatchQ[f,_String],
        catCall[FileNameJoin@{dir,prog},f],
        Which[
          !KeyMemberQ[f,"VAR"],
            catCall[FileNameJoin@{dir,prog},f["Directory"]],
          FileExistsQ@f["VAR"],
            catCall[FileNameJoin@{dir,prog},f["VAR"]],
          FileExistsQ@FileNameJoin@{Lookup[f,"Directory",""],f["VAR"]},
            catCall[FileNameJoin@{dir,prog},FileNameJoin@{f["Directory"],f["VAR"]}],
          True,
            SPRunStrings[dir,
              Replace[f["Directory"],_Missing:>Sequence[]],
              f,False,True
              ]
          ]
        ],
    _,
      If[MatchQ[f,_String],
        runBasic[FileNameJoin@{dir,prog},f],
        Which[
          !(KeyMemberQ[f,"VAR"]||KeyMemberQ[f,"PAR"]),
            runBasic[FileNameJoin@{dir,prog},f["Directory"]],
          (FileExistsQ@ToString@f["VAR"]||FileExistsQ@ToString@f["PAR"]),
            If[FileExistsQ@f["VAR"],
              runBasic[FileNameJoin@{dir,prog},f["VAR"]],
              runBasic[FileNameJoin@{dir,prog},f["PAR"]]
              ],
          FileExistsQ@FileNameJoin@Lookup[f,{"Directory","VAR"},"---NEX---"]||
          FileExistsQ@FileNameJoin@Lookup[f,{"Directory","PAR"},"---NEX---"],
            If[FileExistsQ@FileNameJoin@Lookup[f,{"Directory","VAR"},"---NEX---"],
              runBasic[
                FileNameJoin@{dir,prog},
                FileNameJoin@Lookup[f,{"Directory","VAR"}]
                ],
              runBasic[
                FileNameJoin@{dir,prog},
                FileNameJoin@Lookup[f,{"Directory","PAR"}]
                ]
              ],
          True,
            SPRunStrings[dir,
              Replace[f["Directory"],_Missing:>Sequence[]],
              f]
          ]
        ]
    ];


SPCall[dir_,prog_,SPio[a_]]:=
  SPCall[dir,prog,a];


SPRun::err="\n``";
SPRun::out="\n``";


SPRun::out//Off;
SPRun::err//Off;


SPRun[dir_:Automatic,proj_:Automatic]:=
  With[{
    d=Replace[proj,Automatic->$SPDir],
    p=Replace[proj,Automatic->$SPProjDir]
    },
    SPCall[dir,"spfit",proj];
    SPCall[dir,"spcat",proj];
    SystemOpen@$VARFile
    ];


gitDiff[f1_?FileExistsQ,f2_?FileExistsQ]:=
  Column@StringCases[
    RunProcess[
      {"git","diff","--no-index",
        ExpandFileName@f1,ExpandFileName@f2},
        "StandardOutput"],
      {
        StartOfLine~~"-"~~firstChar:Except["-"]~~cont:Shortest[__]~~EndOfLine:>
          Row@{Style["Removed: ",RGBColor[.7,0,0]],firstChar<>cont},
        StartOfLine~~"+"~~firstChar:Except["+"]~~cont:Shortest[__]~~EndOfLine:>
          Row@{Style["Added: ",RGBColor[0,.6,0]],firstChar<>cont}
        }
      ];


SPChanges[
  proj:(_?Directory|Automatic):Automatic,
  fileExtension:_String?(StringMatchQ[".*"]):".lin",
  from:_Integer?(#<0&):-1,
  to:_Integer?(#<=0&):0]:=
  With[{
    dir=Replace[proj,Automatic:>$SPProj]
    },
    If[(to===0&&!FileExistsQ@{proj,fileExtension}),
      $Failed,
      With[{backups=
        SortBy[FileNames["*.zip",FileNameJoin@{dir,"Backups"}],
          StringCases[#,n:NumberString:>ToExpression@n]&]},
        If[Abs@from>Length@backups||Abs@to>Length@backups,
          $Failed,
          With[{
            fromFile=
              With[{d=CreateDirectory[]},
                ExtractArchive[backups[[from]],d];
                FileNameJoin@{d,fileExtension}
                ],
            toFile=
              If[to===0,
                FileNameJoin@{proj,fileExtension},
                With[{d=CreateDirectory[]},
                  ExtractArchive[backups[[to]],d];
                  FileNameJoin@{d,fileExtension}
                  ]
                ]},
              gitDiff[fromFile,toFile]
              ]
          ]
        ]
      ]
    ]


spwriteF[projDir_,baseName_,ext_,s_String]:=
  With[{file=OpenWrite@FileNameJoin@{projDir,baseName<>ext}},
    WriteString[file,s];
    Close@file
    ]


sprunStrings[
  spdir_,
  projDir_,
  baseName_,
  parString_,
  linString_,
  varString_,
  intString_,
  runFit:True|False:True,
  runCat:True|False:True]:=
  With[{
    parF=If[runFit,spwriteF[projDir,baseName,".par",parString],None],
    linF=If[runFit,spwriteF[projDir,baseName,".lin",linString],None],
    varF=If[runCat,spwriteF[projDir,baseName,".var",varString],None],
    intF=If[runCat,spwriteF[projDir,baseName,".int",intString],None]},
    With[{fc=
      If[runFit,
        fitCall[
          FileNameJoin@{spdir,"spfit"},
          FileNameJoin@{projDir,baseName},
          False
          ],
        <|"ExitCode"->0,"StandardOutput"->"Skipped fit call","StandardError"->""|>
        ]},
      If[fc["ExitCode"]===0,
        With[{cc=
          If[runCat,
            If[!FileExistsQ@FileNameJoin@{projDir,baseName<>".var"},
              spwriteF[projDir,baseName,".var",parString]
              ];
            catCall[
              FileNameJoin@{spdir,"spcat"},
              FileNameJoin@{projDir,baseName}
              ],
            <|"ExitCode"->0,"StandardOutput"->"Skipped cat call","StandardError"->""|>
            ]},
          Check[
            Merge[{
              DeleteCases[fc,""],
              DeleteCases[cc,""],
              <|
                "NAME"->baseName,
                "PAR"->
                  If[FileExistsQ@FileNameJoin@{projDir,baseName<>".par"},
                      Import[FileNameJoin@{projDir,baseName<>".par"},"Text"],
                      None],
                "VAR"->
                  If[FileExistsQ@FileNameJoin@{projDir,baseName<>".var"},
                      Import[FileNameJoin@{projDir,baseName<>".var"},"Text"],
                      None],
                "LIN"->
                  If[FileExistsQ@FileNameJoin@{projDir,baseName<>".lin"},
                      Import[FileNameJoin@{projDir,baseName<>".lin"},"Text"],
                      None],
                "INT"->
                  If[FileExistsQ@FileNameJoin@{projDir,baseName<>".int"},
                      Import[FileNameJoin@{projDir,baseName<>".int"},"Text"],
                      None],
                "FIT"->
                  If[runFit,
                    If[FileExistsQ@FileNameJoin@{projDir,baseName<>".fit"},
                      Import[FileNameJoin@{projDir,baseName<>".fit"},"Text"],
                      None],
                    None],
                "CAT"->
                  If[runCat,
                    If[FileExistsQ@FileNameJoin@{projDir,baseName<>".cat"},
                      Import[FileNameJoin@{projDir,baseName<>".cat"},"Text"],
                      None],
                    None],
                "EGY"->
                  If[runCat,
                    If[FileExistsQ@FileNameJoin@{projDir,baseName<>".egy"},
                      Import[FileNameJoin@{projDir,baseName<>".egy"},"Text"],
                      None],
                    None],
                "STR"->
                  If[runCat,
                    If[FileExistsQ@FileNameJoin@{projDir,baseName<>".str"},
                      Import[FileNameJoin@{projDir,baseName<>".str"},"Text"],
                      None],
                    None
                    ],
                "OUT"->
                  If[runCat,
                    If[FileExistsQ@FileNameJoin@{projDir,baseName<>".out"},
                      Import[FileNameJoin@{projDir,baseName<>".out"},"Text"],
                      None],
                    None
                    ]
                |>
              },
              Last
              ],
            Merge[{
              DeleteCases[fc,""],
              DeleteCases[cc,""]
              },
              Replace[s:{_String,_String}:>StringJoin@Riffle[s,"\n\n"]]
              ]
            ]
          ],
        fc
        ]
      ]
    ];


sprunStrings[spdir_,projDir_,
  a_Association,
  runFit:True|False:True,
  runCat:True|False:True]:=
  With[{baseName=Lookup[a,"NAME",None],
    parF=a["PAR"],
    linF=a["LIN"],
    intF=a["INT"],
    varF=a["VAR"]},
    If[
      runFit&&!MatchQ[{parF,linF},{_String,_String}]||
      runCat&&!MatchQ[{varF,intF},{_String,_String}],
      $Failed,
      With[{
        par=
          If[runFit,
            If[StringLength@parF>0&&FileExistsQ@parF,
              Import[parF,"Text"],
              parF],
            None],
        lin=
          If[runFit,
            If[StringLength@linF>0&&FileExistsQ@linF,
              Import[linF,"Text"],
              linF],
            None],
        int=
          If[runCat,
            If[StringLength@intF>0&&FileExistsQ@intF,
              Import[intF,"Text"],
              intF],
            None],
        var=
          If[runCat,
            If[StringLength@intF>0&&FileExistsQ@intF,
              Import[intF,"Text"],
              varF],
            None]},
        sprunStrings[spdir,projDir,
          Replace[baseName,
            None:>
              Which[
                TrueQ@Quiet@FileExistsQ@parF,
                  FileBaseName@parF,
                TrueQ@Quiet@FileExistsQ@linF,
                  FileBaseName@linF,
                True,
                  FileBaseName@projDir
                ]
              ],
            par,lin,var,int,
            runFit,runCat]
        ]
      ]
    ];


SPRunStrings[
  sp:_String?DirectoryQ,
  runDir:_String?DirectoryQ|Automatic:Automatic,
  a_Association,
  runFit:True|False:True,
  runCat:True|False:True]:=
  With[{d=
    Replace[runDir,
      Automatic:>
        CreateDirectory@FileNameJoin@{$TemporaryDirectory,CreateUUID["sp-"]}
      ]},
    With[{r=sprunStrings[sp,d,a,runFit,runCat]},
      If[runDir===Automatic,DeleteDirectory[d,DeleteContents->True]];
      If[r=!=$Failed,SPio@r,$Failed]
      ]
    ];


(* ::Subsection:: *)
(*OOP*)



SPManager/:HoldPattern@SPManager[dir_String?DirectoryQ][proc_String]:=
  SPManager[dir,proc];


SPManager/:HoldPattern@Directory@SPManager[dir_String?DirectoryQ,___]:=dir;
SPManager/:HoldPattern@File@SPManager[dir_String?DirectoryQ,file_]:=
  If[FileExistsQ@FileNameJoin@{dir,file},
    ExpandFileName@FileNameJoin@{dir,file},
    $Failed];


SPManager/:
  HoldPattern@
    SPManager[dir_String?DirectoryQ,file_][f_String?FileExistsQ]:=
      Replace[
        File@SPManager[dir,file],
        runf_String:>
          SPCall[dir,file,f]
        ];
SPManager/:
  HoldPattern@
    SPManager[dir_String?DirectoryQ,p_:None][
      d_String?DirectoryQ,
      a_Association|SPio[a_Association]
      ]:=
      SPCall[dir,p,Append[a,"Directory"]];
SPManager/:
  HoldPattern@
    SPManager[dir_String?DirectoryQ,p_:None][a_Association|SPio[a_Association]]:=
      SPCall[dir,p,a]


SPManager[]:=SPManager[$SPDir];


SPio/:
  HoldPattern[ChemSpectrumImport[SPio[a_],bit:_String|Automatic:Automatic]]:=
    With[{b=
      Replace[bit,
          Automatic:>
            Switch[a["CAT"],_String,"CAT",_,"LIN"]
          ]},
      Replace[
        a[b],{
          f_String?(StringLength@#>0&&FileExistsQ&):>ChemSpectrumImport[f],
          f_String?(
            FileExistsQ@
              FileNameJoin@{Lookup[a,"Directory","-- Failed --"],#}&
            ):>
            ChemSpectrumImport[FileNameJoin@{a["Directory"],f}],
          s_String:>ChemSpectrumImportString[s,b],
          e_:>$Failed
          }]
      ];


SPio/:
  HoldPattern[ChemSpectrumPlotDiscrete[SPio[a_],bit:_String|Automatic:Automatic]]:=
    ChemSpectrumPlotDiscrete@ChemSpectrumImport[SPio[a],bit];


SPio[a_][p_]:=
  a[p];


(* ::Subsection:: *)
(*PAR*)



spparNumber[0.0|0,n_:17]:=
  StringPadRight[ToString@N[0.0,n-1],n,"0"]<>"E+00";
spparNumber[r:_?(#<0&),n_:17]:=
  "-"<>spparNumber[-r,n];
spparNumber[r:_?(#>0&),n_:17]:=
  With[{e=Floor@Log10@r},
    StringPadRight[ToString@N[1.r/(10^e),n-1],n,"0"]<>
      "E"<>If[e>=0,"+","-"]<>StringPadLeft[ToString@Abs@e,2,"0"]
    ]


$SPParIDUsageInfo=<|
  "ExtendedEulerFlag"->
"(EX)
Extended Euler-series Flag. (EX \[LessEqual] 5) Operator is a term in an Euler series.",
  "FourierFlag"->
"(FF)
Fourier flag (used for internal rotation). 
If FF \[LessEqual] 10, basic operator is multiplied by cos(FF \[CenterDot]2\[Pi] Kavg \[Rho]/3), 
	where \[Rho] is coded by the absolute value of parameter ID=9100vv. 
If 10 < FF \[LessEqual] 20, basic operator is multiplied by sin((F F \[Minus] 10) \[CenterDot] 2\[Pi] Kavg \[Rho]/3). 
If 20 < FF \[LessEqual] 30, basic operator is multiplied by cos((F F \[Minus] 20) \[CenterDot] 2\[Pi] Kavg \[Rho]/3), 
etc.",
  "SpinID1"->
"(I1)
I1=0 or I2=0 means N. 
If I1 = 0 and I2 > 0, perform commutator with iN^2.",
  "SpinID2"->
"(I2)
See usage for SpinID1",
  "NSPower"->
  "(NS)
NS = power of N \[CenterDot]S where S is the first spin. 
If NS > 4, subtract 5 and add Sz Nz operator",
  "ProjectionType"->
"(TYP)
0 = scalar
1 = NaNa
2 = NbNb
3 = NcNc
3+n =N+^2n + N-^2n, n=1\[CenterDot]\[CenterDot]\[CenterDot]9(L=2n,\[CapitalDelta]K=2n)
11+n =\[OpenCurlyQuote]x\[CloseCurlyQuote]symmetry,n=1\[CenterDot]\[CenterDot]\[CenterDot]8(L=2n+1,\[CapitalDelta]K=2n)
20+n =off-diagonal\[OpenCurlyQuote]a\[CloseCurlyQuote]symmetry,n=0\[CenterDot]\[CenterDot]\[CenterDot]19(for prolate basis: L=n+1,\[CapitalDelta]K=0,2,2,4,4,...)
20 = Na
21 = NbNc + NcNb
40+n =off-diagonal\[OpenCurlyQuote]b\[CloseCurlyQuote]symmetry,n=0\[CenterDot]\[CenterDot]\[CenterDot]19(L=n+1,\[CapitalDelta]K=1,1,3,3,...)
40 = Nb
41 = NaNc + NcNa
60+n = off-diagonal \[OpenCurlyQuote]c\[CloseCurlyQuote] symmetry, n = 0 \[CenterDot]\[CenterDot]\[CenterDot] 19 (for prolate basis: L = n + 1, \[CapitalDelta]K = 1, 1, 3, 3, ...)
60 = Nc
61 = NaNb + NbNa
80+n = unique contribution for K\[CloseCurlyQuote] = K\[CloseCurlyDoubleQuote] = n \[CenterDot] 10 + KSQ
90+2n = Euler series multiplying N+^2n + N-^2n
91+2n = constants for Euler and Fourier series
91 = \[Rho] for Fourier series if KSQ = 0, NSQ1 = 0, and V1=V2. 
	Only the absolute value is used for \[Rho], and the sign is used to designate a special symmetry (see below).
",
  "KSQ"->
"(KSQ)
Power of Nz^2",
  "NSQ"->
"(NSQ)
Power of N(N+1)",
  "VibrationalID1"->
  "(V1)
Vibrational identifier.
For NVIB < 10:
	V1 = V2  = 9 matches all V1 = V2. 
For 9 < NVIB < 100: 
	V1 = V2= 99 matches all V1 = V2.
For 99 < NVIB < 360:
	V1 = V2 = 999 matches all V1 = V2.
Usually, select V1 >= V2. 
V1 < V2 has special meaning for l-doubled states.
",
  "VibrationalID2"->
  "(V2)
See usage for VibrationalID1"
  |>;


par0Reps[opV_,d_]:=
  Replace[opV,{
    Except[_Integer|_String?(StringMatchQ[DigitCharacter..])]->
      StringRepeat["0",d],
    e_:>ToString@e
    }]


Options@SPParBuildID=
  {
    "ExtendedEulerFlag"->None,
    "FourierFlag"->None,
    "SpinID1"->None,
    "SpinID2"->None,
    "NSPower"->None,
    "ProjectionType"->None,
    "KSQ"->None,
    "NSQ"->None,
    "VibrationalID1"->None,
    "VibrationalID2"->None
    };
SPParBuildID[ops:OptionsPattern[]]:=
  StringTrim[
    StringJoin@
      {
        par0Reps[OptionValue@"ExtendedEulerFlag",1],
        par0Reps[OptionValue@"FourierFlag",2],
        par0Reps[OptionValue@"SpinID2",1],
        par0Reps[OptionValue@"SpinID1",1],
        par0Reps[OptionValue@"NSPower",1],
        par0Reps[OptionValue@"ProjectionType",2],
        par0Reps[OptionValue@"KSQ",1],
        par0Reps[OptionValue@"NSQ",1],
        par0Reps[OptionValue@"VibrationalID2",3],
        par0Reps[OptionValue@"VibrationalID1",3]
      },
    StartOfString~~("0"..)]
SPParBuildID[a:_Association|_List]:=
  SPParBuildID@@Normal@a;


SPParParseID[i:_Integer|_String?(StringMatchQ[DigitCharacter..])]:=
  With[{s=StringPadLeft[ToString@i,16,"0"]},
    ToExpression/@AssociationThread[{
      "ExtendedEulerFlag","FourierFlag",
      "SpinID1","SpinID2",
      "NSPower","ProjectionType",
      "KSQ","NSQ",
      "VibrationalID1",
      "VibrationalID2"
      },
      StringTake[s,
        {
          {1},
          {2,3},{4},{5},
          {6},{7,8},
          {9},{10},
          {11,13},
          {14,16}
          }]
      ]
    ];


$SPParConstantMap=<|
  "WatsonA"->
    <|
      "A"->"10000","B"->"20000","C"->"30000",
      "-DeltaJ"->"200","-DeltaJK"->"1100","-DeltaK"->"2000",
      "-deltaJ"->"40100","-deltaK"->"41000",
      "PhiJ"->"300","PhiJK"->"1200","PhiKJ"->"2100","PhiK"->"3000",
      "phiJ"->"40200","phiJK"->"41100","phiK"->"42000",
      "LJ"->"400","LJJK"->"1300","LJK"->"2200","LKKJ"->"3100","LK"->"4000",
      "lJ"->"40300","lJK"->"41200","lK"->"43000",
      "PJ"->"500","PJJK"->"1400","PJK"->"2300","PKKJ"->"4100","PK"->"5000",
      "pJ"->"40400","pJJK"->"41300","pJK"->"42200","pKKJ"->"43100","pK"->"44000"
      |>,
  "WatsonS"->
    <|
      "A"->"10000","B"->"20000","C"->"30000",
      "-DJ"->"200","-DJK"->"1100","-DK"->"2000",
      "d1"->"40100","d2"->"50000","HJ"->"300",
      "HJK"->"1200","HKJ"->"2100","HK"->"3000",
      "h1"->"40200","h2"->"50100","h3"->"60000",
      "LJ"->"400","LJJK"->"1300","LJK"->"2200",
      "LKKJ"->"3100","LK"->"4000",
      "l1"->"40300","l2"->"50200","l3"->"60100","l4"->"70000",
      "PJ"->"500","PJJK"->"1400","PJK"->"2300","PK"->"5000",
      "p1"->"40400","p2"->"50300","p3"->"60200","p4"->"70100","p5"->"80000"
      |>,
  "Spin"->
      <|
        "\[Chi]aa"/2->"nn0010000",3"\[Chi]bb"/2->"nn0020000",3"\[Chi]cc"/2->"nn0030000",
        "\[Chi](b-c)"/4->"nn0040000",
        "\[Chi]ab"->"nn0610000","\[Chi]ab"->"nn0210000","\[Chi]ab"->"nn0410000",
        3"\[Chi]k"/2->"nn0011000",3"\[Chi]J"/2->"nn0010100"
        |>
    |>;


$SPParCurrentSet=None;


SPParSelectID[
  name_String,
  set:"WatsonA"|"WatsonS"|"Spin"|None|Automatic:Automatic,
  nRep_:1
  ]:=
  With[{n=StringReplace[name,{"\[CapitalDelta]"->"Delta","\[Delta]"->"delta","\[CapitalPhi]"->"Phi","\[CurlyPhi]"->"phi","\[Phi]"->"phi"}]},
    With[{s=
      Replace[
        Replace[set,Automatic:>$SPParCurrentSet],
        None:>
          FirstCase[{"WatsonA","WatsonS","Spin"},
            _?(KeyMemberQ[$SPParConstantMap[#],n]&),
            ""
            ]
        ]},
        Replace[
          Lookup[$SPParConstantMap,s,<||>][n],
          s_String:>
            StringReplace[s,"n"->ToString@nRep]
          ]
      ]
  ]


SPParSelectID[a_Association]:=
  SPParSelectID[
    Lookup[a,"Constant",None],
    Lookup[a,"Set",Automatic],
    Lookup[a,"NumberSlot",1]
    ];


Options[SPParFile]={
  "Header"->"-  PAR / VAR File -",
  
  "Parameters"->Automatic,
  "MaxLines"->10,
  "ExtraQuanta"->False,
  "ParameterNumber"->10,
  "AllowDiagnostics"->False,
  "MaxIterations"->10,
  "ExcludedParameters"->0,
  "MarquardtLevenburgThreshold"->0.0,
  "ErrorMax"->1.0*10^6,
  "VarianceImportance"->1.0,
  "InfraredScaling"->1.0,
  
  "WatsonSet"->"a",
  "SymmetricRotor"->False,
  "SpinDegeneracies"->{},
  "ProlateRotor"->False,
  "VibrationalStates"->1,
  "MinKValue"->0,
  "MaxKValue"->0,
  "IncludedInteractions"->All,
  "UseInertialBasis"->False,
  "PrimaryAxis"->Automatic,
  "OddStateWeighting"->Automatic,
  "EvenStateWeighting"->Automatic,
  
  
  "ValueScaling"->1.,
  "BaseError"->1.,
  "ParameterList"->{
    <|"ID"->1,"RatioLocked"->False,"Value"->0.0,"Error"->1.,"Label"->""|>
    }
  
  };
SPParFile[ops:OptionsPattern[]]:=
  Block[{$PARCurrentSet=
    Replace[ToLowerCase@OptionValue@"WatsonSet",{"a"|"g"->"WatsonA","s"->"WatsonS"}]
    },
  StringJoin@
    Riffle[ReplaceAll[e:Except[_String|_List|List]:>ToString@e]@
      Join[
        {
          OptionValue@"Header",
          Riffle[ToString/@
            {" ",
              Replace[OptionValue@"Parameters",
                Automatic:>Length@OptionValue@"ParameterList"
                ],
              If[TrueQ@OptionValue@"ExtraQuanta","-",""]<>
                ToString@OptionValue@"MaxLines",
              If[TrueQ@OptionValue@"AllowDiagnostics","-",""]<>
                ToString@OptionValue@"MaxIterations",
              OptionValue@"ExcludedParameters",
              spparNumber[OptionValue@"MarquardtLevenburgThreshold",6],
              spparNumber[OptionValue@"ErrorMax",6],
              OptionValue@"VarianceImportance",
              OptionValue@"InfraredScaling"
            },
            "    "],
          Riffle[ToString/@
            {
              OptionValue@"WatsonSet",
              If[TrueQ[OptionValue@"SymmetricRotor"],"-",""]<>
                ToString/@
                  Reverse@
                    Replace[DeleteCases[OptionValue@"SpinDegeneracies",0],
                      i:Except[_List]:>{i}
                      ],
              If[TrueQ[OptionValue@"ProlateRotor"],"-",""]<>
                ToString@Replace[OptionValue@"VibrationalStates",Except[_Integer]:>1],
              If[OptionValue@"MinKValue">0//TrueQ,
                IntegerPart@OptionValue@"MinKValue",
                ""
                ],
              If[OptionValue@"MaxKValue">0//TrueQ,
                IntegerPart@OptionValue@"MaxKValue",
                ""
                ],
              Replace[OptionValue@"IncludedInteractions",
                Except[_?(NumericQ)|_String]->""
                ],
              Replace[
                Replace[
                  OptionValue@"PrimaryAxis",
                  Automatic:>If[TrueQ@OptionValue@"UseInertialBasis",1,Automatic]
                  ],{
                Except[_?(NumericQ)|_String]->"",
                e_:>
                  If[TrueQ@OptionValue@"UseInertialBasis","-",""]<>
                    ToString@e
                }],
              Replace[OptionValue@"EvenStateWeighting",{
                n_?(NumericQ):>(1.n),
                Except[_String]->""
                }],
              Replace[OptionValue@"EvenStateWeighting",{
                n_?(NumericQ):>(1.n),
                Except[_String]->""
                }]
              },
              ", "]
          },
          With[{
            baseE=
              OptionValue@"BaseError",
            vScale=
              Replace[OptionValue@"ValueScaling",
                n_?NumericQ:>(n*#&)
                ]
            },
          Map[
            Riffle[
              {
                StringPadLeft[
                  If[TrueQ@Lookup[#,"RatioLocked",False],"-",""]<>
                    Replace[#ID,{
                      i:_Integer|_String?(NumberString):>ToString@i,
                      c:_Association?(KeyMemberQ["Constant"])|_String:>
                        SPParSelectID@c,
                      a_Association:>SPParBuildID@a
                      }],
                    13],
                StringPadLeft[
                  spparNumber[Replace[#Value,n_?NumericQ:>vScale@n],16],
                  22
                  ],
                spparNumber[Lookup[#,"Error",baseE],10],
                Replace[#["Label"],{_Missing->"",s_:>"/"<>s}]
                },
              " "]&,
            OptionValue@"ParameterList"
            ]
            ]
        ],
      "\n"
      ]
    ];
SPParFile[a:(_Association|{_Rule|_RuleDelayed..})]:=
  SPParFile@@Normal@a;


SPParFile[atomList_List,specs:(_Rule|_RuleDelayed)...]:=
  SPParFile@SPParConfig[atomList,specs]


SPParConfig[atomList_List,specs:(_Rule|_RuleDelayed)...]:=
  With[{atoms=
    Replace[atomList,
      {s_?(Not@*ChemDataIsotopeQ),p_}:>
        {ChemDataLookup[s,"PrimaryIsotope"],p},
      1]},
    With[{
      rotorType=ChemUtilsRotorType@atoms,
      spinDs=
        Replace[
          ChemDataLookup[First@#,"Spin"]&/@atoms,
          {
            0->2,
            1/2->0,
            1->4,
            3/2->3,
            _->0
            },
          1],
      iSys=ChemUtilsInertialSystem@atoms
      },
      Merge[{
        specs,
        "SpinDegeneracies"->spinDs,
        "SymmetricRotor"->
          AnyTrue[{{"A","B"},{"A","C"},{"B","C"}},
            Abs@*Subtract@@Lookup[iSys,#]<.01&
            ],
        Switch[rotorType,
          "Linear",
            <|
              "MinKValue"->0,
              "MaxKValue"->0,
              "ParameterList"->{
                <|
                  "ID"-><|"VibrationalID2"->20|>,
                  "Value"->iSys["B"],
                  "Label"->"B"
                  |>,
                <|
                  "ID"-><|"VibrationalID2"->30|>,
                  "RatioLocked"->True,
                  "Value"->iSys["C"],
                  "Label"->"C"
                  |>
                }
              |>,
          "Spherical"|"Prolate",  
            <|
              "ProlateRotor"->True,
              "MinKValue"->0,
              "ParameterList"->
                If[AnyTrue[{{"A","B"},{"A","C"},{"B","C"}},
                    Abs@*Subtract@@Lookup[iSys,#]<.01&
                    ],
                  {
                    <|
                      "ID"-><|"VibrationalID2"->1|>,
                      "Value"->iSys["A"]-iSys["B"],
                      "Label"->"A-B"
                      |>,
                    <|
                      "ID"-><|"VibrationalID1"->100|>,
                      "Value"->iSys["B"],
                      "Label"->"B"
                      |>
                    },
                  {
                    <|
                      "ID"-><|"VibrationalID2"->20|>,
                      "Value"->(iSys["B"]+iSys["C"])/2,
                      "Label"->"(B+C)/2"
                      |>,
                    <|
                      "ID"-><|"VibrationalID2"->30|>,
                      "RatioLocked"->True,
                      "Value"->(iSys["B"]+iSys["C"])/2
                      |>,
                    <|
                      "ID"-><|"VibrationalID2"->40|>,
                      "Value"->(iSys["B"]-iSys["C"])/4,
                      "Label"->"(B-C)/4"
                      |>
                    }
                  ]
              |>,
          "Oblate"|_,
            <|
              "ProlateRotor"->False,
              "MinKValue"->0,
              "ParameterList"->
                If[AnyTrue[{{"A","B"},{"A","C"},{"B","C"}},
                    Abs@*Subtract@@Lookup[iSys,#]<.01&
                    ],
                  {
                    <|
                      "ID"-><|"VibrationalID2"->3|>,
                      "Value"->iSys["B"]-iSys["C"],
                      "Label"->"B-C"
                      |>,
                    <|
                      "ID"-><|"VibrationalID1"->100|>,
                      "Value"->iSys["B"],
                      "Label"->"B"
                      |>
                    },
                  {
                    <|
                      "ID"-><|"VibrationalID2"->20|>,
                      "Value"->(iSys["A"]+iSys["B"])/2,
                      "Label"->"(A+B)/2"
                      |>,
                    <|
                      "ID"-><|"VibrationalID2"->30|>,
                      "RatioLocked"->True,
                      "Value"->(iSys["A"]+iSys["B"])/2
                      |>,
                    <|
                      "ID"-><|"VibrationalID2"->40|>,
                      "Value"->(iSys["A"]-iSys["B"])/4,
                      "Label"->"(A-B)/4"
                      |>
                    }
                  ]
              |>
              ]
        },
        First
        ]
      ]
    ]


(* ::Subsection:: *)
(*INT*)



Options[SPIntBuildFlags]=
  {
    "UsingWavenumbers"->False,
    "ShortOutput"->False,
    "STROutput"->True,
    "EGYOutput"->"Derivatives"
    };
SPIntBuildFlags[ops:OptionsPattern[]]:=
  Replace[i:Except[_String]:>ToString@Mod[IntegerPart@i,10]]/@{
    Boole@TrueQ@OptionValue@"UsingWavenumbers",
    Boole@Not@TrueQ@OptionValue@"ShortOutput",
    Replace[OptionValue@"STROutput",{
      False->0,
      True->1,
      Full|"SeparateDipoles"->2
      }],
    Replace[OptionValue@"EGYOutput",{
      None|False->0,
      True->1,
      "Derivatives"->2,
      "Eigenvectors"->3,
      All->4,
      "Hamiltonian"->5
      }]
    }//StringTrim[StringJoin@#,StartOfString~~("0"..)]&;
SPIntBuildFlags[a_Association]:=
  SPIntBuildFlags@@Normal@a;


SPIntParseFlags[s:(_Integer?(999<#<10000&)|_String?(StringLength@#==4&))]:=
  With[{c=Characters@ToString@s},
    <|
      "UsingWavenumbers"->Switch[c[[1]],"1",True,_,False],
      "ShortOutput"->Switch[c[[2]],"0",True,_,False],
      "STROutput"->Switch[c[[3]],"1",True,"2",Full,_,False],
      "EGYOutput"->
        Switch[c[[4]],
          "0",
            None,
          "2",
            "Derivatives",
          "3",
            "Eigenvectors",
          "4",
            All,
          "5",
            "Hamiltonian",
          _,
            True
          ]
      |>
    ]
    


pad0Left[s_,n_]:=
  StringPadLeft[ToString@s,n,"0"]


Options[SPIntBuildID]={
  "DipoleType"->0,
  "SpinID"->0,
  "VibrationalStates1"->0,
  "VibrationalStates2"->0,
  "Symmetry"->"Magnetic"
  };
SPIntBuildID[OptionsPattern[]]:=
  StringTrim[
    StringJoin@{
      pad0Left[OptionValue@"DipoleType",2],
      pad0Left[OptionValue@"SpinID",1],
      pad0Left[OptionValue@"VibrationalStates1",3],
      pad0Left[OptionValue@"VibrationalStates2",3],
      pad0Left[
        Replace[ToLowerCase@ToString@OptionValue@"Symmetry",{
          "magnetic"->"0",
          "a"->"1",
          "b"->"2",
          "c"->"3"
          }],
        1
        ]
      },
    StartOfString~~("0"..)]//Replace[""->"0"]//StringPadLeft[#,10]&;
SPIntBuildID[a_Association]:=
  SPIntBuildID@@Normal@a;


SPIntBuildID[s_String]:=
  SPIntBuildID["Symmetry"->s];


SPIntParseID[s:_Integer|_String]:=
  ToExpression/@
    AssociationThread[
      Keys@Options[SPIntBuildID],
      StringTake[pad0Left[ToString@s,10],{
        {1,2},{3},
        {4,6},{7,9},
        {10}
        }]
      ]


Options[SPIntFile]=
  {
    "Header"->"- INT File -",
    
    "Flags"->Association@Options@SPIntBuildFlags,
    "Tag"->999999,
    "PartitionFunction"->1.,
    "MinFQuantum"->0,
    "MaxFQuantum"->10,
    "LogStrengthCutoff1"->-8.,
    "LogStrengthCutoff2"->-8.,
    "FrequencyLimit"->9999,
    "Temperature"->300,
    
    "DipoleMoments"->{
      (*<|"ID"\[Rule]
				<|
					"DipoleType"\[Rule]0,
					"SpinID"\[Rule]0,
					"VibrationalStates1"\[Rule]0,
					"VibrationalStates2"\[Rule]0,
					"Symmetry"\[Rule]"Magnetic"
					|>,
				"Value"\[Rule]0.0,
				"Label"\[Rule]""
				|>*)
      }
    };
SPIntFile[OptionsPattern[]]:=
  StringJoin@
    Riffle[{
      OptionValue@"Header",
      Riffle[ToString/@{
        Replace[OptionValue@"Flags",a_Association:>SPIntBuildFlags@a],
        OptionValue@"Tag",
        OptionValue@"PartitionFunction",
        OptionValue@"MinFQuantum",
        OptionValue@"MaxFQuantum",
        OptionValue@"LogStrengthCutoff1",
        OptionValue@"LogStrengthCutoff2",
        OptionValue@"FrequencyLimit",
        OptionValue@"Temperature"
        },
        " "],
      Sequence@@
        Map[
          Riffle[{
            Replace[#ID,
              a:_Association|_String?(StringContainsQ[LetterCharacter]):>
                SPIntBuildID@a],
            ToString@#Value,
            Replace[Lookup[#,"Label",""],{
              s_String?(StringLength@#>0&):>"/ "<>s,
              e_:>Nothing
              }]
            }," "]&,
          Replace[OptionValue@"DipoleMoments",
            (l_String->v_):>
              <|"ID"->l,"Value"->v,"Label"->l|>,
            1]
          ]
      },
      "\n"];
SPIntFile[a_Association]:=
  SPIntFile@@Normal@a;


SPIntFile[atoms_List,specs___]:=
  SPIntFile@SPIntConfig[atoms,specs];


fakeDipoleMoment[atoms_]:=
  Apply[Times]@*Apply[Subtract]@*Reverse/@
    DeleteDuplicatesBy[
      Tuples[
        Replace[atoms,{e_,p_}:>{ChemDataLookup[e,"Electronegativity"],p},1],
        2],
      Sort
      ]//Total


SPIntConfig[atoms_List,specs___]:=
  With[{
    cen=ChemUtilsCenter@atoms,
    sym=ChemUtilsInertialSymmetry@atoms,
    fdm=Abs[
      Transpose@Lookup[ChemUtilsInertialSystem@atoms,{"AAxis","BAxis","CAxis"}].
        fakeDipoleMoment@atoms
      ]
    },
      Merge[{
        specs,
        "DipoleMoments"->{
          If[!sym["BCSymmetric"],
            <|
              "ID"->
                "A",
              "Value"->
                fdm[[1]],
              "Label"->
                "A en*dist sum"
              |>,
            Nothing],
          If[!sym["ACSymmetric"],
            <|
              "ID"->
                "B",
              "Value"->
                fdm[[2]],
              "Label"->
                "B en*dist sum"
              |>,
            Nothing],
          If[!sym["ABSymmetric"],
            <|
              "ID"->
                "C",
              "Value"->
                fdm[[3]],
              "Label"->
                "C en*dist sum"
              |>,
            Nothing]
          }
        },
        First
        ]
      ];


(* ::Subsection:: *)
(*Formatting*)



(* ::Subsubsection::Closed:: *)
(*SPManager*)



$spIcon=Graphics[{{Hue[0.7, 0.5, 0.5], EdgeForm[Hue[0.7, 0.5, 0.5]], FilledCurve[{{Line[CompressedData["
1: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
r+IQU9vzQEzaZ7cJYnK7F0cgPkX6s55JM7X9eMTk8abPE3EnWe8AcT5ZnxUQ
L6IM10ZzVTzZMBEfpwTQ+q8+ziGm9DANsTOZ/8wvNMtRAUT8gpo3W2i2pjaI
uJfMn2rLv/nKav43PzbN/+YDa6L5CtXAmv6N9+ymf+Ob3fhvPLc3/hu/roZ/
43UNsWs1GSDEo6mA1NNM1cediKl6/62O5gFqnkAcQ20IsQUloFqaqXlhN2Lq
/NrHoJnM/trbiKl+rIF4cD6poXk29QDEVL/7WU3zIXJ+uItYmLpib7QKYtcr
lfbHEqto5jg62FpqInYyxraoZlbS3Dbef1O3CeI3DZPu3rpa8T/5+Yz0OJ59
5u2STzSrFfw+7rKynOZZx6YfHmNdhvSoZuyStbeU5sn1tvZOnh9RPQ86vmXU
uRKkDzKdk4vR76dJdsqqF9Hc0DgmeYZ+Ic1Flleh2bwA1avDDqP0bPLRfh4a
6Es75tF8r1Jxb/mRD6hfUAUmF/GxS+Y7Z7yn2d7j9/mvBu/Q86vUTcqt3tCc
cl/Gk7v/NYo3aefTmah+2X9a03g7A91v+ztx+uO0//F3Kt0fZ1D5T6X7J2UX
xVS6v46l9JxC919q/vNIoftzN+XPFLp/N1D1O5nu74N6SqL7fwrlhyR6Poim
/PyCnh9uUPl4Qc8XHmQ5PfGcnj+o+aT2GT2fWFEDwDN6fjGg9P+Unm8mU/59
Qs8/8lT9QTzo30SaK6n1xtJsRdXThzSPpX5//3++f4tmKer6ZZpNKT6Jrv/5
nBjZvWhMH2L15f5vlwS20tzgIWu5bUIbzZfjQhpOxiKe7n4tfeNkJs3Hhlb5
7nFAXB6ptNIrEfEcfbvhFySI/SqjKu8sZdHMONAe9ugU4kUy6g5ZeYgvRBxU
KxvOprlFN1XSYoV4acW3DCwM8XVXIz+pNsRc6TOrxqm102zyIH/EnEOI7yyV
r9bNQIx9Wn9/9Q/EFvtv7tmxkkNzlFTdPPfLiHvuK+N+lYg36jhkBk/i0pxY
HucfvRvxbxeBWVoC4u2/FykUiBEn3/OsqdXh0Sy/JDOc74t4T1n/3u8fEL92
hvkjh/NpHvPrfOc0K8T7w0peaYb9f/6rD/r6H/385b/6+st/9feX/+rz3+/H
0vxX33/5r/7zDjUELHfhg4CsH7+ewHQzwYaNOnx4TdnrKfgo903eLc0fnPd3
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
mHSdC/8Hrg0fcQ==
"]]}, {Line[CompressedData["
1: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
L/zjO3UShophX7LbepeIrqfqfmsvxn8Blvef4g==
"]]}}], Polygon[CompressedData["
1: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
w/8AtlFf+w==
"]]}, {GrayLevel[1], EdgeForm[{Hue[0.7, 0.5, 0.5], Thickness[Tiny]}], Polygon[CompressedData["
1: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
kC13GQzlWSC7mXozVWWRzxrflHjOiXzTsBH2fplhu0hvwuVTHXKzjmCU523k
QU14QAxGnlPzbYk8gLxS5RaBTxlZalsTd+ZK5DN2/futO/6wnb9PKcU3Frl/
d1RvtBEy984B4Rxsmm0tA+VDNeXIHtrRmT1+yLdUB4enpJFbFVUkeUam2CbL
xLhJpSPLSQ7l6VsjO2xQG3dYgRwjGKdwunmS7Ur+Eb+r55DF1/lE9xojX1lP
yhLnQZ7cePGZZ8dvtu0kV3aUpSJP5w8GihsiOxR5XPVcitxQNvOg7M0vtqUr
ztVTk5ETq7n7jB2R5+pvTCWIIzu9EOPuHZ1ge37XVKHxNWTnvWEvE2yRW6y5
hnpEkaXbjsfaff3J9u3lmc4f8pHFhQqOWp5Arpi+lvBcHdmLVkFWpo2j+uUe
cstuQrY7mXBGzxdZ/4umW44Kss7G6vAF8hjb5lvW1B9uQHanGClUXEbOZpb3
c1siD3DJRB8SQP7y3/ONxfHtoD0obvOYwB7/HfEzzQP5BHY+mA1xex+7S2Dn
R72yON/YTQI7XzQuqZf7JxDY+VPUY+FIjCSw80lK1oURHkpg51dGWEguRwCB
nW9r3iaax7oT2PkXJ/7gN99hAjsfF07WJKceILDzM6S5U3PjbgI7X6cFxwZz
DQns/PXwYlyU1ySw83moZq1MmSKBnd+L51mLXjzvWvTiediiF8/LFr14nrbo
xfO2RS+ex/0fMsFtnA==
"]], Polygon[CompressedData["
1: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
AybIiKY=
"]], Polygon[CompressedData["
1:eJxd2Hs0VekbB/DtThG5lCJF9NOUDoWJ4tlEJJSYGibkMtFF0YUhoZvKpRzF
lFSiKJWkksqlVC6lkdLFpSgO5d7ZUoP2mTOzvOdZ6/fXWZ919ll7nfd91n6/
363tu3XV7+IURc0Ro6h/PxMKLFIixonRo6byEzQW8sA3NcD+HiVG72//Gnjc
igcLI7gjI0MULZ/c8lBhOQ8meN3LW9xL0alQrXXQjQftVjyf3W0UrdVbEE55
8eCunqJaaQNF56Sl14cH8IArZ1bF1lK0oX0shwnmQUCv7y6ooOiir1vjNkfw
wKIuYV5MMUVbZ7nzePt4oHKr8MP9Aop+snIJ7Z3Ig88nWo+LXaJoV3buqbep
PCiLHGdvfZaimy5PGnLJ4EHqOuORvSkU7e9OuTy9xIPNNl55D+Mpuke667LN
DR5Y6x/ykdxL0TtvvpQuLeaBunyBqu0fFM36lPj8XMGDvv6mygNbKDpWMac4
vxYdcTPf5ph0h8ih7yMfT7JERySOh0Wh6NgHa69T19DpEcGaAZ/QRUVLY7bo
dIrcvKuleZInelXtjsCcCLSkh5G5VSG6dEO+ZCQfHc1+qVzD+STyw7tN0uLO
aOXJVlAbjw78Hhhs8QRd5eWa5ij3WeTGfdwEpdnoeQ5Uyag9unBoSuLWQ+jw
DIeyigp0mF2yq7hkl8g9d6LKTXTQ5c2fPld6op+PbthueQKtOVXc+2QdOtP4
+pW3ct0i+ziGrR2l0Wt93LZIhqG52+0/DlxGi+9zLXrQgr5ydOdAqHIPXn8y
L07JBr1wSf9svwT08a6V75vvoL9wC5JXd6KdzVTtnqv2iny5defIMmu07KE3
1x5uRftzzPwtTqPLX6ep336Cnh41WmP4HR2p57UnV68P96emzETXFW26Q7vr
dAz6mMa+M5Pz0APl7au4TWinjUtlxsv1i5w78eK9/aZo6Ttywawf2m/dJt0/
uOj7Ms/efilFa16bl7ipB20xpyqDLz8gcjf7PeLaTHTai9m/bDZH22d7cGa7
oL+Fx8t1BKAvOBW3ZUah3bR7S7xT0OJfp53QvIK+XuW8raEc7Z0e7ZjagJ4Q
nD/LdQBdvOQDpSTzReSNk5Wbaqahn0SEaBcYo396/zzgz+Xow1aGeZG+6M/n
jw76hKOXyfab2yWhL25y3jM3By1be7VyYik6cL7ChG/16MqUzW7N3ehZfz9N
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
"]], Polygon[CompressedData["
1:eJw9U31MzGEcf7ot6pSKanGx3hxdpRcklr7PdUm7yVt6uatEumnNy7EUw82E
3Gl5p0x3MVlCbhFZJksKtQp5nTmWsY5rnen3YvH42Xruj2fPnn2f7/f7+X4+
n29g/rY1GhFCCAvn/x3hU2U1XkK4q7nwSkUfC7n1UYkLhHfO+Y+/8DALK+s9
ruXVIpwyIcRV7sOB+MzjERcjwmcVvu/cojlo3lDy42I1wv2zrieFr+VguMst
/tEphPeLtMXeOzlYJ+9p1FQivN7bSbWigoNVxfNPjB4S6m/y+ZR+lYN+fKDL
fS/Cvbczw6QdHHQuTXCyaxG+k1y6YssHDoJldbluGoSfKbonbrRz0PKy72Re
FsLmfq8lf0U8HE58UGtVIrzZphxO8OKhskRbfiMe4d/VJZJZ/jz0bvuaXB8h
9Ht9usMczMOyuQGW9zMQPn2pbujzbB6OM0dL93khHFD0dN3LOTwsHk1iIpwQ
Fje1+0uF+LP0pd/wIIEn+saMmUE8BEQqLVcfE8i2V7jdn8bDatHhhaVmArS/
NKdbVn6GAMU3FqyWSPYSoPhfqGJc5xUQoPOZssJWvk8lQOc32TtbxYsJUH7K
Ms/tl4USoPwpDRdqFkkIvG2dftZjCwevfBXOTVMIUP5l5stjg64EqD61es8j
sc4EqH4H9b2qo05C/XF9v9wkLi2IANWfxtWlukbOzDrysXtApMggvDPKJz+f
REBzkT3nrxH+j8TY1D4Euuc5Dy1LZEGZOTVkIJCAtiMl6GAgC6OGObfiowms
TWtXPBexIPPLjmpJEOrb8AKpjYH8pp5qRRqBubyfzfMFA+5Ff264FBH4mc9l
MvcYB385SPI1pIGB2eP8Nh5LZDyrGAf/Dzu36rfqGdjja5B/7yFwss5kWqJj
oK7qTcqglUBI+Ks4XQkDhUl3r0Q6I1ys9kiP2sE49E+eFFsYt52B8IK2sU+B
CEvzWkLtQpz6h+ZTf9H65eP+o/2pPyk+6l+Kn/r7iR+X1dDGwPCp6CDVboTp
/OIN1tfGMoQpP81dRyybKxDutBg1y8WsY7+0/TG6slAWPhbrdqVWIUz575MP
bJpSgzDVh+4v1Y/uN9X3H+pV3QM=
"]]}, Polygon[CompressedData["
1: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
9feDt7dFR/46X/194f9ABnKf
"]], {Hue[0.7, 0.5, 0.5], EdgeForm[{GrayLevel[1], Thickness[Tiny]}], FilledCurve[{{Line[CompressedData["
1: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
0Q==
"]]}, {Line[CompressedData["
1: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
"]]}}], Polygon[CompressedData["
1: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
G8Sr9qi2Cf0fwPMWfQ==
"]], Polygon[CompressedData["
1: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
teXPhZN/9T0p3H2VAf4H8XC0pQ==
"]]}}, Background -> GrayLevel[0.95], Frame -> True, FrameStyle -> GrayLevel[0.8], FrameTicks -> None, ImageSize -> {Automatic, 32}];


Format[SPManager[d_String?DirectoryQ,f_:None]]:=
  RawBoxes@BoxForm`ArrangeSummaryBox[
    "SPManager",
    If[f=!=None,
      SPManager[d,f],
      SPManager@d
      ],
    $spIcon,
    {
      Replace[f,None->""]
      },
    {
      BoxForm`MakeSummaryItem[{"Directory: ",
        Button[Hyperlink@FileNameTake@d,
          SystemOpen@d,
          BaseStyle->"Hyperlink",
          Appearance->"Frameless"]
        },StandardForm]
      },
    StandardForm
    ];


(* ::Subsubsection::Closed:: *)
(*SPio*)



$spIOicon=Graphics[{EdgeForm[GrayLevel[0.8]], FaceForm[GrayLevel[0.95]], Polygon[{{0, 0.95}, {0.665, 0.95}, {0.65, 1.05}, {1, 0.825}, {0.65, 0.6}, {0.665, 0.7}, {0, 0.7}, {0.05, 0.825}}], Polygon[{{0.35, -0.1}, {0.33499999999999996`, 0.}, {1, 0.}, {0.95, 0.125}, {1, 0.25}, {0.33499999999999996`, 0.25}, {0.35, 0.35}, {0, 0.125}}], Inset[Graphics[{GrayLevel[0.6], EdgeForm[GrayLevel[0.7]], FilledCurve[{{Line[CompressedData["
1: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
"]]}, {Line[CompressedData["
1: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
50wXegPW0X8AP0Z4CA==
"]]}}], Polygon[CompressedData["
1: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
OhnsNWAQKyUD3Zgelp+ik+ZvuP3XPknDyTc3mqmldJLUfF1ZcV4a2s9PQxHq
DNIdl933a6TBfH5NdNNOBvkg5cjDhAnScK81Kkz3PoMU3/et+y4F1+6u2htY
xSCDbhlH9IRLQZDtkGnjRCaZFTD3YMsiKWAJZYnEHUxyU8/sobomyRF9ZvSY
Sa4u0v6v7qIk1F5QbTnWxCTdJ56gXzeThP65tU8Hx7LIKw65+SsGJADLIddj
JIscbGmC0hAJ8FC5MhzoxiLfYpqzc7YEaGE+uuUWi2xwNI0ZTOWBySfHL3Xv
WKTrumNPQ9fw4B7mt7MaWOS6N7BJp4o7or9VWWxyj5oRa4sfF+xbbUy6x7HJ
01eSnvpqcWHX8g7/tzPY5DdMu+MxDxXz5Mvz2GTml1s+i2wxXhTc7WXMJuNo
swdKh9ggppO7FrLJwym3FAK82CPrk1zCJu3DLMaqzmRDe/Zbk1I8Lq5HqQUs
EGa+TL5ryiYD1bbO3W/Pgr0RBazPhmxSUPPJqUaKBesaqKwlWuyR/Vz/ggnG
WprMFFU22T97aMcsXI9WTKhPmCzHJmWzNb55YJ44FLN8/gK8Hg2HLZZpkQx4
ahafYdfFIsX6KUmLMeL/QCmL3GW20+XbDzo0Trxfn57KIifCRmXqRTpsHjLt
v/iQRWb2v9eRV6JDEctgj91pFlm9ftO0O89o0H/EiL10I4v0KBa2R5rRIHfT
sqzFGizyyKGma7IlVFjx2DHWdpBJds6vUxrYTQWvHf7oXBaTXGvx4b+TE6gg
vV85xukmk0y0iVnG/UCBcK+48KVuTHIgYkd8oz0FHMdXWc/7j0mmYB2pJRpG
VZj/2XUxyLQ5P8Jm6g+jcaT33vQ4Bsm45DXw8ugQ6v/Qmr1tD4M87T87oPbd
IAodVNxoPI1BKrr8+pBkNoimrNj23reZTiasfMbxTROhuPCH+l/i6WTuGrac
7kQRCmrVzX/rQCdVOp3XHfMaQNOrT4W3COlkombVu821/QjL4cjVKTQyHPR2
eh7uR8a35tcuPEojz1oGSARJ9yNp1Kimb0AjEy5Hd3ee7UPXPNfpxJVTyUn7
8QYx+5C4bjl6U0nVwe4DdtG96BFv0bSx83C+ivuiZS8Sn8fbFgrp3z/P5Gp5
D5L2WOEQdY5C2uLEc7nYgx75TS5O1aWQ6o0/OAuNelAw1v8pH4aJ5HWZjONt
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
psI=
"]]}, ImageSize -> {28.8, 28.8}], {Rational[1, 2], 0.475}]}, ImageSize -> {32, 32}, PlotRange -> {{0, 1}, {-0.125, 1.075}}]/.GrayLevel[.95]->White;


(*
With[{h=.25,plus=.1,xm=0,xc=.65,aw=.015,xM=1,yc1=.825,yc2=.125,
ims=32,spgraphic=$spIcon},
Graphics[{
EdgeForm@GrayLevel[.8],
FaceForm@GrayLevel[.95],
Polygon@{
{xm,yc1+h/2},{aw+xc,yc1+h/2},{xc,yc1+h/2+plus},
{xM,yc1},
{xc,yc1-h/2-plus},{aw+xc,yc1-h/2},{xm,yc1-h/2},
{xm+plus/2,yc1}
},
Polygon@{
{(xM-xc),yc2-h/2-plus},{(xM-xc)-aw,yc2-h/2},{xM,yc2-h/2},
{xM-plus/2,yc2},
{xM,yc2+h/2},{(xM-xc)-aw,yc2+h/2},{(xM-xc),yc2+h/2+plus},
{xm,yc2}
},
Inset[
Show[spgraphic,ImageSize\[Rule].9*{ims,ims}],
{Mean@{xm,xM},Mean@{yc1,yc2}}]
},
PlotRange\[Rule]{{xm,xM},{yc2-h,yc1+h}},
ImageSize\[Rule]{ims,ims}
]
];*)


spWriteTemp[a_,parameter_]:=
  Replace[a[parameter],{
    s_String:>
      Button[
        MouseAppearance[
          Mouseover[
            Style[parameter,"Hyperlink"],
            Style[parameter,"HyperlinkActive"]
            ],
          "Arrow"
          ],
        With[{new=
          ExpandFileName@
          If[StringLength@ToString@a[parameter]>0&&
            (
            FileExistsQ@ToString@a[parameter]||
            (
            FileExistsQ@
              FileNameJoin@{
                Lookup[a,"Directory","-- Failed --"],
                ToString@a[parameter]
                }&&
            !DirectoryQ@
              FileNameJoin@{
                Lookup[a,"Directory","-- Failed --"],
                ToString@a[parameter]
                }
              )
              ),
            If[FileExistsQ@a[parameter],
              a[parameter],
              FileNameJoin@{a["Directory"],a[parameter]}
              ],
            With[{f=
              OpenWrite@
                FileNameJoin@{
                  $TemporaryDirectory,
                  Lookup[a,"NAME",parameter]<>"."<>ToLowerCase@parameter
                  }
                },
              WriteString[f,s];
              Close@f
              ]
            ]},
            Switch[$OperatingSystem,
              "MacOSX",
                If[
                  RunProcess[{"open","-a","TextWrangler",new}]["ExitCode"]=!=0,
                  RunProcess[{"open","-t",new}]
                  ],
              "Windows",
                If[
                  RunProcess[{"pspad",new}]["ExitCode"]=!=0,
                  RunProcess[{"Notepad",new}]
                  ];
                ,
              _,
                NotebookOpen@new
              ];
            If[
              StringLength@ToString@a[parameter]==0||
              !FileExistsQ@ToString@a[parameter],
              Pause[1];
              DeleteFile@new
              ]
          ],
        Appearance->"Frameless",
        BaseStyle->"Hyperlink"
        ],
    _->None
    }];


dialogTmpOpen[t_,s_]:=
  Button[
    MouseAppearance[
      Mouseover[
        Style[t,"Hyperlink"],
        Style[t,"HyperlinkActive"]
        ],
      "Arrow"
      ],
    CreateDialog[
      Panel@
        Framed[
          Pane[s,{500,500},Scrollbars->Automatic],
          Background->White,
          FrameStyle->GrayLevel[.8]
          ],
      WindowClickSelect->True,
      WindowTitle->t,
      Deployed->False,
      Selectable->True,
      Editable->False
      ],
    Appearance->"Frameless",
    BaseStyle->"Hyperlink"
    ];


Format[SPio[a_Association]]:=
  RawBoxes@BoxForm`ArrangeSummaryBox[
    "SPio",
    SPio[a],
    $spIOicon,
    {
      Replace[a["NAME"],{
        _Missing:>Nothing,
        e_:>
          BoxForm`MakeSummaryItem[{"Name: ",e},StandardForm]
        }],
      Replace[a["Directory"],{
        _Missing:>Nothing,
        e_:>
          BoxForm`MakeSummaryItem[{"Directory: ",
            Button[Hyperlink@FileNameTake@e,
              SystemOpen@e,
              Appearance->"Frameless",
              BaseStyle->"Hyperlink"]
            },StandardForm]
        }],
      Replace[a["ExitCode"],{
        _Missing:>Nothing,
        e_:>
          BoxForm`MakeSummaryItem[{"Exit code: ",e},StandardForm]
        }],
      If[KeyMemberQ[a,"NAME"|"ExitCode"|"Directory"],
        Nothing,
        "- Input Files -"
        ]
      },
    {
      Replace[a["StandardOutput"],{
        _Missing|"":>Nothing,
        e_:>dialogTmpOpen["Output Messages",e]
        }],
      Replace[a["StandardError"],{
        _Missing|"":>Nothing,
        e_:>dialogTmpOpen["Error Messages",e]
        }],
      If[KeyMemberQ[a,"FIT"],
        BoxForm`MakeSummaryItem[{"Fit: ",spWriteTemp[a,"FIT"]},StandardForm],
        Nothing],
      If[KeyMemberQ[a,"VAR"],
        BoxForm`MakeSummaryItem[{"Var: ",spWriteTemp[a,"VAR"]},StandardForm],
        Nothing
        ],
      If[KeyMemberQ[a,"PAR"],
        BoxForm`MakeSummaryItem[{"Par: ",spWriteTemp[a,"PAR"]},StandardForm],
        Nothing],
      If[KeyMemberQ[a,"LIN"],
        BoxForm`MakeSummaryItem[{"Lin: ",spWriteTemp[a,"LIN"]},StandardForm],
        Nothing
        ],
      If[KeyMemberQ[a,"INT"],
        BoxForm`MakeSummaryItem[{"Int: ",spWriteTemp[a,"INT"]},StandardForm],
        Nothing
        ],
      If[KeyMemberQ[a,"CAT"],
        BoxForm`MakeSummaryItem[{"Cat: ",spWriteTemp[a,"CAT"]},StandardForm],
        Nothing
        ],
      If[KeyMemberQ[a,"EGY"],
        BoxForm`MakeSummaryItem[{"Egy: ",spWriteTemp[a,"EGY"]},StandardForm],
        Nothing
        ],
      If[KeyMemberQ[a,"STR"],
        BoxForm`MakeSummaryItem[{"Str: ",spWriteTemp[a,"STR"]},StandardForm],
        Nothing
        ],
      If[KeyMemberQ[a,"OUT"],
        BoxForm`MakeSummaryItem[{"Out: ",spWriteTemp[a,"OUT"]},StandardForm],
        Nothing
        ]
      },
    StandardForm
    ];


(* ::Subsection:: *)
(*Imports*)



(* ::Subsubsection::Closed:: *)
(*streamImporterRegister*)



streamImporterRegister[importer_Symbol]:=
  (
    importer[file:_String?FileExistsQ]:=
      Module[
        {stream},
        Internal`WithLocalSettings[
          stream=OpenRead@file,
          importer[stream],
          Close@stream//Quiet
          ]
        ];
    importer[url:_URL|_String?(StringStartsQ[URLParse[#, "Scheme"], "http"]&)]:=
      Module[
        {stream},
        Internal`WithLocalSettings[
          stream=StringToStream@Import[url, "Text"],
          importer[stream],
          Close@stream//Quiet
          ]
        ];
    importer[str:_String]:=
      Module[
        {stream},
        Internal`WithLocalSettings[
          stream=StringToStream@str,
          importer[stream],
          Close@stream//Quiet
          ]
        ];
    )



(* ::Subsubsection::Closed:: *)
(*textImporterRegister*)



textImporterRegister[importer_Symbol]:=
  (
    importer[file:_String?FileExistsQ|_InputStream]:=
      importer@Import[file, "Text"];
    importer[
      url:_URL|_String?(
        StringFreeQ[#, Whitespace]&&
        StringStartsQ[URLParse[#, "Scheme"], "http"]&
        )
      ]:=
      importer@Import[url, "Text"];
    )



(* ::Subsubsection::Closed:: *)
(*LIN*)



spimportLIN//Clear
spimportLIN[stream_InputStream]:=
  spimportLINTable@ReadList[stream, Number, RecordLists->True];
streamImporterRegister[spimportLIN];


spimportLINTable[data_]:=
  <|
    "Frequencies"->data[[All, -3]],
    "Errors"->data[[All, -2]],
    "Weights"->data[[All, -1]],
    "Transitions"->data[[All, ;;-4]]
    |>;


(* ::Subsubsection::Closed:: *)
(*PAR*)



spimportPAR//Clear
spimportPAR[stream:_InputStream]:=
  With[{
    headers=ReadList[stream,String,3]},
    With[{data=ReadList[stream, Number, RecordLists->True]},
      spimportPARTable@
        Join[{
          headers[[1]],
          Flatten@Map[
            ImportString[StringTrim[#,","],"Table"]&,
            StringSplit[headers[[2]],","]
            ],
          Flatten@Map[
            ImportString[StringTrim[#,","],"Table"]&,
            StringSplit[headers[[3]],","]
            ]
          },
          Rest@data
          ]
      ]
    ];
streamImporterRegister[spimportPAR];


spimportPARTable[data_]:=
  If[MatchQ[data,{_String,_List,_List,__List}],
    With[{
      line1=data[[1]],
      line2=PadRight[DeleteCases[data[[2]],","],8,None],
      line3=PadRight[DeleteCases[data[[3]],","],12,None],
      parBlock=Cases[data[[4;;]],{_Integer,_Real,__}]
      },
      
      <|
        "Header"->line1,
        "ParameterNumber"->line2[[1]],
        "ExtraQuanta"->(line2[[2]]<0),
        "MaxLines"->Abs@line2[[2]],
        "AllowDiagnostics"->(line2[[3]]<0),
        "MaxIterations"->Abs@line2[[3]],
        "ExcludedParameters"->line2[[4]],
        "MarquardtLevenburgThreshold"->line2[[5]],
        "ErrorMax"->line2[[6]],
        "VarianceImportance"->line2[[7]],
        "InfraredScaling"->line2[[8]],
        Replace[
          line3[[1]],{
            Except[_String]->Nothing,
            e_:>("WatsonSet"->First@StringCases[e,LetterCharacter])
            }
          ],
        Replace[
          line3[[2]],{
            Except[_?(NumericQ)]->Nothing,
            e_:>("SymmetricRotor"->(e<0))
            }
          ],
        Replace[
          line3[[2]],{
            Except[_?(NumericQ)]->Nothing,
            e_:>("SpinDegeneracies"->(Abs@e))
            }
          ],
        Replace[
          line3[[3]],{
            Except[_?(NumericQ)]->Nothing,
            e_:>("ProlateRotor"->(e>=0))
            }
          ],
        Replace[
          line3[[3]],{
            Except[_?(NumericQ)]->Nothing,
            e_:>("VibrationalStates"->(Abs@e))
            }
          ],
        Replace[
          line3[[4]],{
            Except[_?(NumericQ)]->Nothing,
            e_:>("MinKValue"->(e))
            }
          ],
        Replace[
          line3[[5]],{
            Except[_?(NumericQ)]->Nothing,
            e_:>("MaxKValue"->(e))
            }
          ],
        Replace[
          line3[[6]],{
            Except[_?(NumericQ)]->Nothing,
            e_:>("IncludedInteractions"->e)
            }
          ],
        Replace[
          line3[[7]],{
            Except[_?(NumericQ)]->Nothing,
            e_:>("UseInertialBasis"->(e<0))
            }
          ],
        Replace[
          line3[[7]],{
            Except[_?(NumericQ)]->Nothing,
            e_:>("PrimaryAxis"->(Abs@e))
            }
          ],
        Replace[
          line3[[8]],{
            Except[_?(NumericQ)]->Nothing,
            e_:>("OddStateWeighting"->(e))
            }
          ],
        Replace[
          line3[[9]],{
            Except[_?(NumericQ)]->Nothing,
            e_:>("EvenStateWeighting"->(e))
            }
          ],
            
        "ParameterList"->
          Map[<|
            "ID"->Abs@#[[1]],
            "RatioLocked"->#[[1]]<0,
            "Value"->#[[2]],
            "Error"->#[[3]],
            "Label"->If[Length@#>3,StringTrim[#[[4]],StartOfString~~"/"],None]
            |>&,parBlock
            ]
          |>
    ],
  $Failed
  ];


(* ::Subsubsection::Closed:: *)
(*CAT*)



spimportCAT//Clear
textImporterRegister[spimportCAT];
spimportCAT[string_String]:=
  Merge[
    Replace[
      StringTake[StringSplit[string,"\n"],
        {
          {1,13},{14,21},{22,29},
          {30,31},{32,41},{42,44},
          {45,51},{52,55},
          {56,57},{58,59},{60,61},{62,63},{64,65},{66,67},
          {68,69},{70,71},{72,73},{74,75},{76,77},{78,79}
          }
          ],
      {
        {frq_,err_,lgnt_,dof_,elo_,gup_,tag_,qft_,
          u1_,u2_,u3_,u4_,u5_,u6_,
          l1_,l2_,l3_,l4_,l5_,l6_}:>
          Replace[{
            Power[s_,t_]:>(Power[s,ToExpression@t]),
            s_String?(StringMatchQ[Whitespace]|""):>Null,
            l_List:>
              Map[Quiet@Check[ToExpression@#,#]&,
                DeleteCases[l,_String?(StringMatchQ[Whitespace|""])]
                ],
            e_String:>(Quiet@Check[ToExpression@e,e])
            }]/@<|
            "Frequencies"->frq,"Errors"->err,"Weights"->10.^lgnt,
            "DegreesOfFreedom"->dof,"LowerStateEnergies"->elo,
            "UpperStateDegeneracies"->gup,"Tags"->Abs@ToExpression@tag,
            "ExperimentalLines"->(ToExpression@tag<0),
            "QuantumNumberFormat"->qft,
            "Transitions"->(
                {
                  l1,l2,l3,l4,l5,l6,
                  u1,u2,u3,u4,u5,u6
                  }
                )
            |>
            
        },
      1],
    Join
    ];


(* ::Subsubsection::Closed:: *)
(*INT*)



spimportINT//Clear;
textImporterRegister[spimportINT]
spimportINT[string_String]:=
  With[{lines=StringSplit[string,EndOfLine]},
    With[{
      hline=lines[[1]],
      fline=First@ImportString[lines[[2]],"Table"],
      dipoles=
        Replace[StringSplit[Rest@lines[[2;;]],"/"],
          {s_,l___}:>Join[ImportString[s,"Table"],{l}]
          ]
      },
      <|
        "Header"->hline,
        
        "Flags"->SPIntParseFlags@fline[[1]],
        "Tag"->fline[[2]],
        "PartitionFunction"->fline[[3]],
        "MinFQuantum"->fline[[4]],
        "MaxFQuantum"->fline[[5]],
        "LogStrengthCutoff1"->fline[[6]],
        "LogStrengthCutoff2"->fline[[7]],
        "FrequencyLimit"->fline[[8]],
        "Temperature"->fline[[9]],
  
        "DipoleMoments"->
          Replace[dipoles,
            {dip_,val_,l_:""}:>
              <|
                "ID"->SPIntParseID@dip,
                "Value"->val
                "Label"->l
                |>
            1]
        |>
      ]
    ]


(* ::Subsubsection::Closed:: *)
(*EGY*)



spimportEGY//Clear
textImporterRegister[spimportEGY]
spimportEGY[string_String]:=
  With[{lines=StringSplit[string,"\n"]},
    If[StringMatchQ[StringTake[#,{6}],DigitCharacter],
      Replace[
        StringTake[#,{
          {1,6},{7,11},
          {12,29},{30,47},{48,59},
          {60,-1}
          }],
        {iblk_,indx_,egy_,err_,pmix_,q_}:>
          <|
            "BlockNumber"->ToExpression@iblk,
            "BlockIndex"->ToExpression@indx,
            "Energy"->ToExpression@egy,
            "Error"->ToExpression@err,
            "Mixing"->ToExpression@pmix,
            "QuantumNumbers"->First@ImportString[q,"Table"]
            |>
        ],
      #
      ]&/@lines
    ]


(* ::Subsection:: *)
(*Interactive Version*)



$dinterfSize={500,500};
$dinterfBorder=Gray;
$dinterfBackground=White;
$dinterfRounding=0;
SPViewer[
  spdir:_String?DirectoryQ:$SPDir,
  initialRun_Association?(KeyMemberQ["CAT"])|
    SPio[initialRun_Association?(KeyMemberQ["CAT"])]
  ]:=
  DynamicModule[
    {
      src=initialRun,backups={},
      dir=spdir,out="Automatic",
      name,par,var,lin,int,fit,cat,
      stdout=initialRun["StandardOutput"],
      stderr=initialRun["StandardError"],
      tab,simpleTabCMD,
      runTab,parTab,varTab,linTab,fitTab,
      catTab,intTab,
      saveCMD,runCMD,backupCMD,revertCMD,
      backupPos=1
      },
      (*----INITIALIZE----*)
      name=src["NAME"];
      par=src["PAR"];
      var=src["VAR"];
      lin=src["LIN"];
      int=src["INT"];
      fit=src["FIT"];
      cat=src["CAT"];
      (*----BACKUP----*)
      backupCMD[]:=
        AppendTo[backups,
          backupPos=1;
          Now->
            <|
              "NAME"->name,
              "VAR"->var,
              "PAR"->par,
              "LIN"->lin,
              "FIT"->fit,
              "INT"->int,
              "CAT"->cat
              |>];
      (*----REVERT TO PREVIOUS BACKUP----*)
      revertCMD[n_:1,scan:True|False:True]:=
        With[{d=Last@backups[[-Abs@n]]},
          If[
            lin!=d["LIN"]||var!=d["VAR"]||par!=d["PAR"]||
            int!=d["INT"]||fit!=d["FIT"]||cat!=d["CAT"],
            If[
              AllTrue[Last/@backups,
                lin!=#["LIN"]||var!=#["VAR"]||par!=#["PAR"]||
                int!=d["INT"]&
                ],
              backupCMD[]
              ];
            backupPos=n;
            fit=d["FIT"];
            var=d["VAR"];
            par=d["PAR"];
            lin=d["LIN"];
            cat=d["CAT"];
            int=d["INT"],
            If[scan&&Length@backups<Abs@n,
              revertCMD[n+1]
              ];
            ]
          ];
      (*----SAVE TO DIRECTORY----*)
      saveCMD[]:=
        With[{d=
          If[out==="Automatic"||!DirectoryQ@out,
            SystemDialogInput["Directory"],
            out]},
          If[MatchQ[d,_String?DirectoryQ],
            With[{f=OpenWrite[FileNameJoin@{d,name,".lin"}]},
              WriteString[f,lin];Close@f];
            With[{f=OpenWrite[FileNameJoin@{d,name,".par"}]},
              WriteString[f,par];Close@f];
            With[{f=OpenWrite[FileNameJoin@{d,name,".var"}]},
              WriteString[f,var];Close@f];
            With[{f=OpenWrite[FileNameJoin@{d,name,".fit"}]},
              WriteString[f,fit];Close@f];
            With[{f=OpenWrite[FileNameJoin@{d,name,".cat"}]},
              WriteString[f,cat];Close@f];
            With[{f=OpenWrite[FileNameJoin@{d,name,".int"}]},
              WriteString[f,int];Close@f];
            Export[FileNameJoin@{d,name<>"_backups",".m"},backups];
            ]
          ];
      (*----RUN CURRENT FILES----*)
      runCMD[]:=(
        backupCMD[];
        stdout=stderr=None;
        With[{a=
          SPManager[dir][
            If[out=="Automatic",Automatic,
              If[Not@DirectoryQ@out,CreateDirectory@out];
              out
              ],
              <|
                "NAME"->name,
                "PAR"->par,
                "LIN"->lin,
                "VAR"->var,
                "INT"->int
                |>]},
          tab=1;
          stdout=a["StandardOutput"];
          stderr=a["StandardError"];
          par=a["PAR"];
          var=a["VAR"];
          lin=a["LIN"];
          fit=a["FIT"];
          cat=a["CAT"];
          int=a["INT"];
          ]
        );
      (*----RUN TAB----*)
      runTab=
        With[{
          (*----SPCAT/SPFIT DIR INPUT FIELD----*)
          spd=
            Labeled[
              InputField[Dynamic@dir,String],
              "SPCAT/SPFIT Directory",
              {Top,Left}],
          (*----OUTPUT DIR INPUT FIELD----*)
          outd=
            Labeled[
              InputField[Dynamic@out,String],
              "Output Directory",
              {Top,Left}],
          (*----RUN BUTTON----*)
          runb=
            Button["Run",
              runCMD[]
              ],
          (*----DISPLAY OUTPUT MESSAGES----*)
          outmb=
            Button["Output Messages",
              If[stdout=!=None,
                CreateDialog[
                  Framed[
                    Pane[
                      Column@stdout,$dinterfSize,
                      Scrollbars->Automatic],
                    FrameStyle->Gray,
                    Background->White],
                  WindowTitle->"SP- Output"
                  ]
                ]
              ],
          (*----DISPLAY ERROR MESSAGES----*)
          errmb=
            Button["Error Messages",
              If[stderr=!=None,
                CreateDialog[
                  Framed[
                    Pane[
                      Column@stderr,$dinterfSize,
                      Scrollbars->Automatic],
                    FrameStyle->Gray,
                    Background->White],
                  WindowTitle->"SP- Errors"
                  ]
                ]
              ],
          (*----SAVE----*)
          saveb=
            Button["Save",
              saveCMD[],
              Method->"Queued"
              ],
          (*----REVERT TO----*)
          bktob=
            Button["Revert to...",
              If[Length@backups>0,
                With[{j=
                  DialogInput[
                    Panel@Pane[
                      Column@
                        Reverse@
                          Table[With[{i=i},
                            Button[
                              backups[[i,1]],
                              DialogReturn@(Length@backups-i),
                              Appearance->"Palette"]
                            ],
                            {i,Length@backups}
                          ]
                      ],
                    WindowTitle->"Choose saved state..."
                    ]},
                  If[MatchQ[j,_Integer],revertCMD[j]]
                  ]
                ],
              Method->"Queued"
              ],
          (*----REVERT LAST----*)
          bckpb=
            Button["Revert Previous",
              If[Length@backups>0,
                revertCMD[backupPos]
                ]
              ],
          (*----CAT PLOT----*)
          linplt=
            Dynamic[
              Check[
                EventHandler[
                  Tooltip[
                  ChemSpectrumPlotDiscrete[
                    ChemSpectrumImportString[cat,"CAT"],
                    ImageSize->Scaled@1,
                    Background->White
                    ],
                  "Double click to pop"
                  ],
                  {
                  "MouseClicked":>
                    If[CurrentValue@"MouseClickCount"==2,
                      CreateDialog@
                      ChemSpectrumViewer[
                        ChemSpectrumImportString[cat,"CAT"]
                        ]
                      ]
                    }],
                $Failed
                ]
              ]
            },
        (*----TAB INTERFACE----*)
        Panel[
          Pane[
            Grid[
              {
                {spd,outd},
                {runb,saveb},
                {bckpb,outmb},
                {bktob,errmb},
                {linplt,SpanFromLeft}
                },
              Dividers->{{},{2->Gray,3->Gray,-2->Gray}}
              ],
            $dinterfSize
            ]
          ]
        ];
      (*----TAB MAKE COMMAND----*)
      simpleTabCMD[sym_]:=
        Framed[
          Pane[
            InputField[Dynamic@sym,String,FieldSize->Full,Appearance->"Frameless"],
            $dinterfSize,
            Scrollbars->Automatic,
            BaseStyle->{FontFamily->"Bitstream Vera Sans Mono"}
            ],
          Background->$dinterfBackground,
          FrameStyle->$dinterfBorder,
          RoundingRadius->$dinterfRounding
          ];
      simpleTabCMD~SetAttributes~HoldFirst;
      (*----PAR TAB----*)
      parTab=simpleTabCMD@par;
      (*----VAR TAB----*)
      varTab=simpleTabCMD@var;
      (*----LIN TAB----*)
      linTab=simpleTabCMD@lin;
      (*----INT TAB----*)
      intTab=simpleTabCMD@int;
      (*----FIT TAB----*)
      fitTab=simpleTabCMD@fit;
      (*----CAT TAB----*)
      catTab=simpleTabCMD@cat;
      (*----DYNAMIC INTERFACE----*)
      tab=1;
      EventHandler[
        TabView[
          {
            "Run"->runTab,
            "PAR"->parTab,
            "VAR"->varTab,
            "LIN"->linTab,
            "INT"->intTab,
            "CAT"->catTab,
            "FIT"->fitTab},
          Dynamic[tab],
          ImageSize->$dinterfSize+{25,25},
          ControlPlacement->{Top,Left}
          ],{
        {"MenuCommand","Save"}:>saveCMD[],
        {"MenuCommand","HandleShiftReturn"}:>runCMD[]
        }]
      ];


SPViewer[
  dir:_String?DirectoryQ:$SPDir,
  a_Association?(Not@*KeyMemberQ["FIT"])]:=
  SPViewer[dir,First@SPManager[dir][a]];


End[];



