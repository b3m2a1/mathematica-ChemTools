(* ::Package:: *)


(* ::Title:: *)
(*Cystallography Package*)

(* ::Text::GrayLevel[.5]:: *)
(*Autogenerated ChemTools package*)

ChemCrystal::usage="Formatting head for a crystal structure";
ChemCrystalView::usage="Crystal stucture graphics";
ChemCrystalImport::usage="Imports from a CIF file";


ChemCrystalPropertyLookup::usage=
	"Primary nested lookup form";
ChemCrystalCellInfo::usage=
	"Returns the cell info or specified parts of it";
ChemCrystalChemicalInfo::usage=
	"Returns the chemical info of the crystal";


ChemCrystalUnitAxes::usage=
	"Returns the unit axes for the crystal as (a ,b ,c)";


ChemCrystalSymmetryOperations::usage=
	"The set of provided symmetry functions for the crystal"


ChemCrystalElementPositions::usage=
	"Computes missing atoms with appropriate positions";


Begin["`Private`"];


linePattern=
	StartOfLine~~
		"_"~~Except[WhitespaceCharacter]..~~
		Whitespace~~Except["\n"]..~~EndOfLine;
loopStartPattern=
	"_loop"~~EndOfLine;
blockPattern=
	";";
titlePattern=
	"data_"~~Except[WhitespaceCharacter]..;


cifManualImport[stream_InputStream]:=
	Block[{
		title=None,
		inLoop=False,
		loopElements={},loopData={},
		inBlock=False,
		blockHeader=None,blockData={},
		outData={}
		},
		Do[
			With[{ld=Replace[ReadList[stream,String,1],{{s_}:>s,{}:>Return[]}]},
				Which[
					StringMatchQ[ld,loopStartPattern],
						inLoop=True,
					StringMatchQ[ld,linePattern],
						If[inLoop,
							If[Length@loopData==0,
								AppendTo[loopElements,ld],
								AppendTo[outData,loopElements->loopData]
								],
							AppendTo[outData,
								StringSplit[ld,Whitespace,1]
								]
							],
					StringMatchQ[ld,blockPattern],
						If[inBlock,
							AppendTo[outData,blockHeader->blockData];
							blockData={};blockHeader=None;
							inBlock=False,
							
							blockHeader=Last@outData;
							outData=Delete[outData,-1];
							],
					StringMatchQ[ld,titlePattern],
						title=StringTrim[ld,"data_"],
					True,
						If[inLoop,
							AppendTo[loopData,ld],
							If[inBlock,
								AppendTo[blockData,ld],
								Nothing
								]
							]
					]
				],
			\[Infinity]
			];
		outData
		];


ChemCrystalImport[stream_InputStream]:=
	ChemCrystal@
		With[{basics=
			GroupBy[StringSplit[First@#,"_"][[2]]&]/@
				GroupBy[StringSplit[First@#,"_"][[1]]&]@
					Import[stream,"CIF"]
				},
				With[{mainKeys=Keys@basics},
					Association@
					KeyValueMap[
						With[{mK=#},
							mK->
							Association@
							KeyValueMap[
								With[{sK=#,d=#2},
									sK->
									With[{keyStripped=
										Map[
											StringTrim[
												StringTrim[First@#,"_"<>mK<>"_"<>sK],
												"_"
												]->Last@#&,d]
										},
										If[
											MatchQ[#2,{Rule[_,_List]..}]&&
											Length@DeleteDuplicates[Length@*Last/@#2]==1,
											MapThread[Association,Thread/@keyStripped],
											Merge[keyStripped,Replace[{v_}:>v]]
											]
										]
									]&,
								#2
								]
							]&,
						basics
						]
					]
				]


ChemCrystalImport[file_String?(FileExistsQ)]:=
	With[{s=OpenRead@file},
		With[{o=ChemCrystalImport@s},
			Close@s;
			o
			]
		]
ChemCrystalImport[string_String?(StringContainsQ["\n"])]:=
	With[{s=StringToStream@string},
		With[{o=ChemCrystalImport@s},
			Close@s;
			o
			]
		];
ChemCrystalImport[url_String?(StringContainsQ["/"])]:=
	Replace[StringToStream@Import[url,"Text"],
		s_String:>
			ChemCrystalImport@s
		];


Format[ChemCrystal[a_Association?(KeyMemberQ["cell"])]]:=
	RawBoxes@BoxForm`ArrangeSummaryBox[
		"ChemCrystal",
		ChemCrystal@a,
		None,
		{
			BoxForm`MakeSummaryItem[
				{"Formula: ",
					AtomsetEmpiricalFormula@AtomsetWrapper@
						ChemCrystalElementPositions[a,False]
					},
				StandardForm]
			},
		{
			BoxForm`MakeSummaryItem[
				{"a: ",ChemCrystalCellInfo[a,"a"]},
				StandardForm],
			BoxForm`MakeSummaryItem[
				{"c: ",ChemCrystalCellInfo[a,"b"]},
				StandardForm],
			BoxForm`MakeSummaryItem[
				{"c: ",ChemCrystalCellInfo[a,"c"]},
				StandardForm],
			BoxForm`MakeSummaryItem[
				{"\[Alpha]: ",ChemCrystalCellInfo[a,"alpha"]},
				StandardForm],
			BoxForm`MakeSummaryItem[
				{"\[Beta]: ",ChemCrystalUnitCell[a,"beta"]},
				StandardForm],
			BoxForm`MakeSummaryItem[
				{"\[Gamma]: ",ChemCrystalCellInfo[a,"gamma"]},
				StandardForm]
			},
		StandardForm
		]


ChemCrystal/:
	HoldPattern[Normal@ChemCrystal[a_]]:=
		a;


ChemCrystal/:
	HoldPattern[Dataset@ChemCrystal[a_]]:=
		Dataset@a;


ChemCrystal/:
	HoldPattern[Keys@ChemCrystal[a_]]:=
		Keys@a;


ChemCrystal/:
	HoldPattern[ChemCrystal[a_][m_,o___]]:=
		Replace[
			ChemCrystalPropertyLookup[a,m,
				Replace[{o},
					{
						{}->All,
						{p:Automatic|All|_String}:>p,
						l:{_String, __String}:>{l},
						{l_List}:>l
						}]
					],
			d_Association:>
				Dataset@d
			];


ChemCrystal/:
	HoldPattern[ChemView[ChemCrystal[a_],ops___]]:=
		ChemCrystalView[ChemCrystal[a],ops];


ChemCrystalPropertyLookup[
	a_Association|ChemCrystal[a_],
	primarySource_String,
	parts:_String|{(_String|_List)..}|All:All]:=
	With[{lookups=
		Replace[parts,{
			s_String:>ToLowerCase@s,
			Verbatim[Verbatim][s_]:>s,
			s:{__String}:>ToLowerCase/@s
			}]},
		Replace[a[primarySource],
			mainData_Association:>
				If[parts===All,
					mainData,
					Replace[parts,{
						s_String:>
							Lookup[mainData,s,
								Replace[
									Do[Replace[mainData[k,s],r_String:>Return[r]],
										{k,Keys@mainData}],
									Null->Missing["KeyAbsent",s]
									]
								],
						s:{(_String|_List)..}:>
							With[{d=
								Map[
									Replace[
										Replace[#,{
												{src__,p_}:>mainData[src],
												_->mainData
												}],{
										l_Association:>
											With[{prop=
												Replace[#,{
													{src__,p_}:>p,
													_->mainData
													}]},
												Lookup[
													l,
													prop,
													Replace[
														Do[Replace[mainData[k,s],r_String:>Return[r]],
															{k,Keys@mainData}],
														Null->Missing["KeyAbsent",prop]
														]
													]
												]
											}]&,
									s
									]
									},
								If[Length@s===1,First@d,d]
								]
						}]
					]
			]
		];


ChemCrystalCellInfo[
	a_Association?(KeyMemberQ["cell"])|ChemCrystal[a_],
	parts:_String|{(_String|_List)..}|All|Automatic:Automatic]:=
	With[{lookups=
		Replace[parts,{
			s_String:>s,
			Automatic:>{
				{"length","a"},
				{"length","b"},
				{"length","c"},
				{"angle","alpha"},
				{"angle","beta"},
				{"angle","gamma"}
				}
			}]},
		ChemCrystalPropertyLookup[a,"cell",lookups]
		];


ChemCrystalChemicalInfo[
	a_Association?(KeyMemberQ["chemical"])|ChemCrystal[a_],
	parts:_String|{(_String|_List)..}|All|Automatic:Automatic]:=
	With[{lookups=
		ToLowerCase/@
			Replace[parts,{
				s_String:>s,
				Automatic:>{
					{"name","mineral"},
					{"name","systematic"}
					}
				}]},
		ChemCrystalPropertyLookup[a,"chemical",lookups]
		];


toAxes[{
	a_,b_,c_,
	alpha_,beta_,gamma_
	}]:=
	With[{bx=RotationMatrix[gamma,{0,0,1}].{1,0,0}},
		{
			{a,0,0},
			b*bx,
			c*Replace[(beta-gamma),{
					0|0.->IdentityMatrix[3],
					v_:>RotationMatrix[v,bx]
					}].
					RotationMatrix[alpha,{1,0,0}].bx
			}
		];


ChemCrystalUnitAxes[
	a_Association?(KeyMemberQ["cell"])|ChemCrystal[a_]
	]:=
	With[{u=ChemCrystalCellInfo@a},
		{1,1,1,Degree,Degree,Degree}*
			Replace[u,{
				s_String:>
					ToExpression@First@StringSplit[s,"("]
				},
				1]//toAxes
			]


With[{sopCon=$Context},
	toSymOp[s_String|{s_String}]:=
		Block[{x,y,z},
			Function[Evaluate@ToExpression@
				StringSplit[
					StringReplace[s,
						ax:"x"|"y"|"z":>(sopCon<>ax)
						],
					","]]/.
				{x:>#[[1]],y:>#[[2]],z:>#[[3]]}
			]
		]


ChemCrystalSymmetryOperations[
	a_Association?(KeyMemberQ["atom"])|ChemCrystal[a_]
	]:=
	Replace[
		Replace[
			Replace[
				a["symmetry","Int","Tables_number"],
				_Missing:>
					a["symmetry","space","group_name_H-M"]
					],{
				g:_Integer|_String:>
					ChemDataLookup[g,"SpaceGroups"]
			}],
		_Missing:>
			Replace[a["symmetry","equiv"],{
				l_List:>
					Replace[l,{
						e_Association:>toSymOp@First@Values@e,
						e_String:>toSymOp@e
						},1],
				e_Association:>toSymOp/@Values@e
				}]
		];


ChemCrystalElementPositions[
	a_Association?(KeyMemberQ["atom"])|ChemCrystal[a_],
	symmetryExpanded:True|False:True
	]:=
	With[{
		unit=ChemCrystalUnitAxes[a]
		},
		With[{
			main=
				Map[
					{
						First@StringSplit[#["label"],DigitCharacter],
						Total@unit*
							Replace[{#["fract_x"],#["fract_y"],#["fract_z"]},
								p:{__String}:>
									ToExpression@
										Map[First,
											StringSplit[p,"("]
											]
								]
						}&,
					Replace[a["atom","site"],{
						l:{__Association}:>l,
						d_Association:>
							Map[
								AssociationThread[{
									"label",
									"fract_x",
									"fract_y",
									"fract_z"
									},#]&,
								Transpose@
									Lookup[d,{"label","fract_x","fract_y","fract_z"}]
								]
						}]
					]
			},
			If[symmetryExpanded,
				With[{symm=ChemCrystalSymmetryOperations@a},
					Nest[
						With[{atoms=#},
							DeleteDuplicates@*Join@@
								Table[
									Map[{First@#,sop@Last@#}&,#],
									{sop,symm}
									]
							]&,
						main,
						2]
					],
				main
				]
			]
		]


Options[ChemCrystalView]=
	Normal@Merge[{
		Options@Graphics3D,
		"CellAxes"->True,
		"SymmetryReduced"->True
		},
		Last];
ChemCrystalView[
	a_Association|ChemCrystal[a_],
	ops:OptionsPattern[]]:=
	With[{
		eps=
			ChemCrystalElementPositions[a,
				Not@TrueQ@OptionValue@"SymmetryReduced"
				],
		axes=
			ChemCrystalUnitAxes@a},
			With[{base=
				ChemView[eps,
					Sequence@@
						FilterRules[{ops},
							Except["CellAxes"|"SymmetryReduced"]
							]
					]},
				If[TrueQ@OptionValue@"CellAxes",
					Show[base,
						Graphics3D@
							{
								FaceForm@None,
								Parallelepiped[{0,0,0},axes]
								}
						],
					base
					]
				]
		]


End[];



