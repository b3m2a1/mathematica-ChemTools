(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



CharacterTable::usage="Storage class for character table data";
CharacterTableData::usage="Looks up char table data";


Begin["`Private`"];


normalizeCTName[ct_]:=
	Replace[
		Capitalize@ToLowerCase@
			StringDelete[
				StringJoin@ReplaceAll[ct,Subscript|SubscriptBox->List],
				Whitespace
				],
		HoldPattern[Capitalize[s_]]:>
			ToUpperCase[StringTake[s,1]]<>StringDrop[s,1]
		]


CharacterTableURL[ct_]:=
	TemplateApply[
		"http://www.webqc.org/printable-symmetrypointgroup-ct-``.html",
		ToLowerCase@ct
		]


CharacterTableRawData[ct_]:=
	CharacterTableCleanRawData@
		Map[
			Map[
				StringDelete[
					StringJoin@
						System`Convert`HTMLImportDump`SymbolicXML2Text@#,
					Except["\n", Whitespace]
					]&,
				#[[3]]
				]&,
			Cases[
				Import[CharacterTableURL@ct,{"HTML","XMLObject"}],
				XMLElement["table", __],
				\[Infinity]
				][[2, 3]]
			]


(* ::Text:: *)
(*We\[CloseCurlyQuote]ll do this procedurally because I can\[CloseCurlyQuote]t see a good alternate strategy*)



CharacterTableCleanRawData[tdata_]:=
	Module[{
		trueTab=
			ConstantArray[None,
				Length@tdata+
					Length@Select[Rest@tdata, StringContainsQ["\n"][#[[2]]]&]
				],
		rowFillCounter=2,
		splitRow
		},
		trueTab[[1]]=tdata[[1]];
		Map[
			If[StringContainsQ["\n"][#[[2]]],
				splitRow=StringSplit[#,"\n"]&/@#;
				With[{maxLen=Max@Map[Length,splitRow]},
					Do[
						trueTab[[rowFillCounter++]]=
							Map[
								If[Length[#]===maxLen,
									#[[i]],
									#[[1]]<>ToString[i]
									]&,splitRow],
						{i, maxLen}
						]
					],
				trueTab[[rowFillCounter++]]=#
				]&,
			Rest@tdata
			];
		trueTab
		]


$pointGroupMap=
	<|
		"C1"->1,"Ci"->2,"C2"->3,
		"Cs"->4,"C2h"->5,"D2"->6,
		"C2v"->7,"D2h"->8,"C4"->9,
		"S4"->10,"C4h"->11,"D4"->12,
		"C4v"->13,"D2d"->14,"D4h"->15,
		"C3"->16,"S6"->17,"D3"->18,
		"C3v"->19,"D3d"->20,"C6"->21,
		"C3h"->22,"C6h"->23,"D6"->24,
		"C6v"->25,"D3h"->26,"D6h"->27,
		"T"->28,"Th"->29,"O"->30,
		"Td"->31,"Oh"->32
		|>;
CharacterTablePointGroupEnt[ct_]:=
	Entity["FiniteGroup",
		{
			"CrystallographicPointGroup", 
			$pointGroupMap@
				normalizeCTName@ct
			}
		]


$CharacterTableKeys=
	{
		"PointGroup",
		"SymmetryClasses",
		"IrreducibleRepresentations",
		"CharacterTable",
		"Others"
		};


If[!AssociationQ@$CharacterTables, $CharacterTables=<||>];
CharacterTableImport[ct_]:=
	With[{nm=normalizeCTName@ct},
		Lookup[$CharacterTables,nm,
			$CharacterTables[nm]=
				<|
					"PointGroup"->nm,
					"SymmetryClasses"->#[[1, 2;;Length[#] ]],
					"IrreducibleRepresentations"->
						#[[2;;, 1 ]],
					"CharacterTable"->
						Map[Quiet[Check[ToExpression[#],#]]&, #[[2;;, 2;;Length[#] ]]],
					"Others"->
						AssociationThread[
							#[[1, 1+Length[#];; ]],
							Transpose@#[[2;;, 1+Length[#];; ]]
							]
					|>&@CharacterTableRawData@nm
			]
		]


CharacterTableGrid[data_]:=
	Grid[
		Prepend[
			Prepend[data["SymmetryClasses"],data["PointGroup"]]
			]@
		MapThread[
			Prepend,
			{
				data["CharacterTable"],
				data["IrreducibleRepresentations"]
				}
			],
		Alignment->Right,
		Dividers->{{2->Black},{2->Black}}
		];


pointGroups=
	AssociationThread[
		EntityValue[#,"ShortName"],
		#
		]&[Entity["FiniteGroup",{"CrystallographicPointGroup",#}]&/@Range[32]]


CharacterTable[data_Association][k__]:=
	data[k]
CharacterTable[pg_String]:=
	CharacterTable@CharacterTableImport[pg];
CharacterTable/:Normal[CharacterTable[data_Association]]:=data;
CharacterTable/:Dataset[CharacterTable[data_Association]]:=Dataset@data;
Format[CharacterTable[data_Association]]:=
	Interpretation[
		Deploy@
			Style[
				Row@{
					"CharacterTable",
					"[",
					Panel[
						CharacterTableGrid[data],
						Appearance->{
							"Default"->
								FrontEnd`FileName[{"Typeset", "SummaryBox"}, "Panel.9.png"]
							}
						],
					"]"
					},
			ShowStringCharacters->False
			],
		CharacterTable[data]
		];


CharacterTableData//Clear


CharacterTableData[ct_String]:=
	CharacterTable[ct];
CharacterTableData[ct_CharacterTable]:=
	ct;
CharacterTableData[ct:_String|_CharacterTable,
	prop:Alternatives@@$CharacterTableKeys
	]:=
	CharacterTableData[ct][prop];
CharacterTableData[ct:_String|_CharacterTable,
	{"IrreducibleRepresentation"|"IR", irrep:_String|_Integer}
	]:=
	With[{coredata=CharacterTableData[ct]},
		With[{irpos=
			Switch[irrep,
				_Integr,
					irrep,
				_String,
					FirstPosition[coredata["IrreducibleRepresentations"], 
						irrep,
						$Failed
						][[1]],
				_,
					$Failed
				]
			},
			<|
				"PointGroup"->coredata["PointGroup"],
				"IrreducibleRepresentation"->
					coredata["IrreducibleRepresentations"][[irpos]],
				"Vector"->
					coredata["CharacterTable"][[irpos]]
				|>/;Length[coredata["IrreducibleRepresentations"]]<=irpos
			]
		];
CharacterTableData[ct:_String|_CharacterTable,
	{"SymmetryClass"|"SC", sc:_String|_Integer}
	]:=
	With[{coredata=CharacterTableData[ct]},
		With[{scpos=
			Switch[sc,
				_Integer,
					sc,
				_String,
					FirstPosition[coredata["SymmetryClasses"], 
						sc,
						$Failed
						][[1]]
				]
			},
			<|
				"PointGroup"->coredata["PointGroup"],
				"SymmetryClass"->
					coredata["SymmetryClasses"][[scpos]],
				"Vector"->
					coredata["CharacterTable"][[scpos]]
				|>/;Length[coredata["SymmetryClasses"]]<scpos
			]
		];


$CharacterTableThingProps=
	{
		"PointGroup",
		"Vector",
		"SymmetryClass",
		"IrreducibleRepresentation"
		};
CharacterTableData[ct:_String|_CharacterTable,
	{p:"IrreducibleRepresentation"|"IR"|"SymmetryClass"|"SC", thing:_String|_Integer},
	prop:Alternatives@@$CharacterTableThingProps
	]:=
	With[{base=CharacterTableData[ct, {p, thing}]},
		base[prop]/;AssociationQ@base
		]


PackageAddAutocompletions["CharacterTableData",
	{
		Keys@$pointGroupMap, 
		Join[$CharacterTableKeys, 
			{"SymmetryClass", "IrreducibleRepresentation"}
			],
		$CharacterTableThingProps
		}
	]


End[];



