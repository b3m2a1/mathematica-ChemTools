(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



ChemData::usage=
	"A wrapper for various chemical data stuff to act like an extensible ChemicalData";


$ChemDataSources::usage="";
ChemDataSource::usage=
	"Converts a string into a datasource from which to pull relevant properties";


ChemDataLookup::usage="Looks up relevant chemical data";
ChemDataQuery::usage=
	"A descriptive head used in to pass multiple parameters to sources";
ChemDataProperties::usage="Finds properties matching a pattern";
ChemDataCacheClear::usage="Clears cached data matching a pattern";


$ChemSpider::usage="Service connection to ChemSpider";
ChemSpiderHasQ::usage="Checks whether ChemSpider has a structure or not";
ChemSpiderID::usage="Gets the ID or IDs for a compound";
ChemSpiderInfo::usage="Gets structure info for a given ID";


$ChemSpiderToken::usage="Token for manual API connection";
ChemSpiderRequest::usage="Formats an HTTPRequest for the ChemSpider API";
ChemSpiderParse::usage="Parses the output from a ChemSpider call";
ChemSpiderImport::usage="Imports a ChemSpider HTTPRequest and caches it";


ChemSpiderScrape::usage="Scrapes data from a ChemSpider page";


PubChemCompound::usage=
	"Symbolic head for an entry in the PubChem compound db";
PubChemSubstance::usage=
	"Symbolic head for an entry in the PubChem substance db";


$PubChem::usage="Service connection to PubChem";
PubChemID::usage="Gets a compound ID";
PubChemComponentIDs::usage=
	"Gets the component IDs for a PubChem structure";
PubChemParentIDs::usage=
	"Gets the parent IDs for a given ID";
PubChemSubstanceIDs::usage=
	"Gets the substance IDs for a given ID";
PubChemRelatedIDs::usage=
	"Gets CIDs relating to a compound";
PubChemHasQ::usage="Checks whether PubChem has a structure or not";
PubChemStructure::usage=
	"Gets structure for a given ID or compound";
PubChemSDF::usage=
	"Gets the (proper) 3D SDF for a given ID";
PubChemParentSDF::usage=
	"Gets the SDF for the parent IDs";
PubChemComponentSDF::usage=
	"Gets the SDF for the component IDs";
PubChemInfo::usage=
	"Pulls the CompoundProperties for the specs";


Begin["`Private`"];


$chemSpiderSecurityToken=
	Quiet@Check[
		Import@
			Do[
				With[{f=PackageFilePath["Private",c]},
					If[FileExistsQ@f,
						Return@f
						]
					],
				{
					c,
					{
						"ChemSpiderKey.wl",
						"ChemSpiderKey.m"
						}
				}],
			""];


$chemSpiderConnection=None;
$ChemSpider:=
Replace[$chemSpiderConnection,
		Except[_ServiceObject]:>
			With[{num=ToString[$ModuleNumber+20]},
				With[{
					preempt="OAuthDialogDump`Private`var$"<>num},
					OAuthDialogDump`Private`$TermsAndConditionsAccepted=True;
					OAuthDialogDump`Private`$OAuthDialogSaveQ=True;
					With[{
						listener=
						RunScheduledTask[
							Replace[Evaluate[Symbol@preempt]["token"],{
								Except[_String?(StringLength@StringTrim[#]>0&)]:>
									(
										Evaluate[Symbol@preempt]["token"]=
											$chemSpiderSecurityToken
										),
								e_:>
									($chemSpiderSecurityToken=e)
								}],
							.05
							]},
						Replace[ServiceConnect["ChemSpider"],
							so_ServiceObject:>($chemSpiderConnection=so)
							];
						RemoveScheduledTask@listener;
						$chemSpiderConnection
						]
					]
				]
		];


ChemSpiderID[compound_String]:=
	Replace[
		Normal@$ChemSpider["Search","Query"->compound],{
			l:{__}:>Map[ToExpression@#ID&,l],
			a_Association:>ToExpression@a["ID"],
			_->Missing["NotAvailable"]
		}];


ChemSpiderInfo[id_Integer]:=
	$ChemSpider["ExtendedCompoundInformation","ID"->id];


ChemSpiderInfo[id_Integer,extended_:False]:=
	$ChemSpider[
		If[TrueQ@extended,
			"ExtendedCompoundInformation",
			"CompoundInformation"
			],
		"ID"->id];


ChemSpiderHasQ[compound_String]:=
	!MatchQ[Quiet@ChemSpiderID@compound,_Missing];	


$ChemSpiderToken:=
	Replace[$chemSpiderSecurityToken,
		Except[_String?(StringContainsQ["-"])]->""
		];
$ChemSpiderToken/:
	HoldPattern[Set[$ChemSpiderToken,val_]]:=
		(
			Export[
				PackageFilePath["Private","ChemSpiderKey.wl"],
				val];
			$chemSpiderSecurityToken=val
			);
$ChemSpiderToken/:
	HoldPattern[Clear[$ChemSpiderToken]]:=
		Quiet@DeleteFile@
			PackageFilePath["Private","ChemSpiderKey.wl"]


$chemSpiderAPIRoot="www.chemspider.com/";


If[MatchQ[$chemSpiderCallCache,_Symbol],
$chemSpiderCallCache=<||>
	];


$chemSpiderReplacements=<|
	"CompoundID"->"CSID",
	"SearchByFormula"->"SearchByFormula2",
	"SearchByMass"->"SearchByMass2"
	|>;


$ChemSpiderAPIs=<|
	"Search"->"Search",
	"MassSpecAPI"->"MassSpecAPI",
	"MassSpec"->"MassSpecAPI",
	"Spectra"->"Spectra",
	"SpectrumAPI"->"Spectra",
	"InChI"->"InChI",
	"InChIAPI"->"InChI"
	|>;


pullCalls[api_]:=
	Thread[
		StringTrim/@StringCases[
			Import@TemplateApply["http://www.chemspider.com/``.asmx",api],
				"\n"~~Whitespace~~WordCharacter..~~Whitespace~~"\n"
			]->api
		];


$ChemSpiderCalls=<|
	"AsyncSimpleSearch"->"Search",
	"AsyncSimpleSearchOrdered"->"Search",
	"CSID2ExtRefs"->"Search",
	"ElementsSearch"->"Search",
	"ElementsSearchOrdered"->"Search",
	"GetAsyncSearchResult"->"Search",
	"GetAsyncSearchResultPart"->"Search",
	"GetAsyncSearchStatus"->"Search",
	"GetAsyncSearchStatusAndCount"->"Search",
	"GetCompoundInfo"->"Search",
	"GetCompoundThumbnail"->"Search",
	"GetDataSliceCompounds"->"Search",
	"GetRecordDetails"->"Search",
	"GetRecordImage"->"Search",
	"IntrinsicPropertiesSearch"->"Search",
	"IntrinsicPropertiesSearchOrdered"->"Search",
	"LassoSearch"->"Search","Mol2CSID"->"Search",
	"MolAndDS2CSID"->"Search",
	"PredictedPropertiesSearch"->"Search",
	"PredictedPropertiesSearchOrdered"->"Search",
	"SimilaritySearch"->"Search",
	"SimpleSearch"->"Search",
	"SimpleSearch2IdList"->"Search",
	"StructureSearch"->"Search",
	"SubstructureSearch"->"Search",
	
	"GetRecordMol"->"MassSpecAPI",
	"GetRecordsSdf"->"MassSpecAPI",
	"GetDatabases"->"MassSpecAPI",
	"GetExtendedCompoundInfo"->"MassSpecAPI",
	"GetExtendedCompoundInfoArray"->"MassSpecAPI",
	"GetCompressedRecordsSdf"->"MassSpecAPI",
	"GetExtendedMolCompoundInfoArray"->"MassSpecAPI",
	"GetFormulaArrayAsyncSearchResult"->"MassSpecAPI",
	"GetMassArrayAsyncSearchResult"->"MassSpecAPI",
	"SearchByFormula2"->"MassSpecAPI",
	"SearchByFormulaArrayAsyncOrdered"->"MassSpecAPI",
	"SearchByFormulaAsync"->"MassSpecAPI",
	"SearchByFormulaAsyncOrdered"->"MassSpecAPI",
	"SearchByMass2"->"MassSpecAPI",
	"SearchByMassArrayAsyncOrdered"->"MassSpecAPI",
	"SearchByMassAsync"->"MassSpecAPI",
	"SearchByMassAsyncOrdered"->"MassSpecAPI",
	
	"GetAllSpectraInfo"->"Spectra",
	"GetCompoundSpectraInfo"->"Spectra",
	"GetSpectraInfoArray"->"Spectra",
	"GetSpectrumInfo"->"Spectra",
	
	"CSIDToMol"->"InChI",
	"GenerateInChI"->"InChI",
	"GenerateInChIInfo"->"InChI",
	"GenerateInChIKey"->"InChI",
	"InChIKeyToCSID"->"InChI",
	"InChIKeyToInChI"->"InChI",
	"InChIKeyToMol"->"InChI",
	"InChIToCSID"->"InChI",
	"InChIToInChIKey"->"InChI",
	"InChIToMol"->"InChI",
	"InChIToSMILES"->"InChI",
	"IsValidInChIKey"->"InChI",
	"MolToInChI"->"InChI",
	"MolToInChIKey"->"InChI",
	"ResolveInChIKey"->"InChI",
	"SMILESToInChI"->"InChI"
	|>;


Options[ChemSpiderRequest]={
		"Token"->Automatic,
		"API"->Automatic,
		"Function"->"GetCompoundID",
		"Query"->{}
		};
ChemSpiderRequest[OptionsPattern[],headers:_Association:<||>]:=
	HTTPRequest[
		URLBuild@
			<|
				"Scheme"->"https",
				"Domain"->$chemSpiderAPIRoot,
				"Path"->{
					ToLowerCase@
						Replace[OptionValue@"API",
							Append[
								$ChemSpiderAPIs,
								Automatic:>
									Lookup[$ChemSpiderCalls,
										OptionValue@"Function",
										"Search"]
								]
							]<>".asmx",
					Replace[$chemSpiderReplacements]@
						OptionValue@"Function"
					},
				"Query"->
					ReplaceAll[$chemSpiderReplacements]@
					Map[
						ToString@*
							Replace[{
								l_List:>StringJoin@Riffle[ToString/@l,","]
								}],
						Append[
							Replace[OptionValue@"Query",Except[_List]->{}],
								Replace[
									Replace[OptionValue@"Token",Automatic:>$ChemSpiderToken],{
									s_String?(StringContainsQ["-"]):>("token"->s),
									_->Nothing
									}
									]
								],
						{2}]
				|>,
		headers
		];
ChemSpiderRequest[
	token:_String?(StringContainsQ["-"])|Automatic:Automatic,
	api:_String?(KeyMemberQ[$ChemSpiderAPIs,#]&|Automatic):Automatic,
	function_String,
	query:(_Rule|_RuleDelayed)...,
	headers:_Association:<||>
	]:=
	ChemSpiderRequest[
		"Token"->token,
		"API"->api,
		"Function"->function,
		"Query"->{query},
		headers
		];


parseImport[XMLElement["string",_,{s_}]]:=
	s;
parseImport[XMLElement["int",_,{i_}]]:=
	ToExpression@i;


parseImport[XMLElement["ArrayOfInt",_,ints:{___}]]:=
	ToExpression@
		Replace[ints,
			XMLElement["int",{},{int_}]:>int,
			1];
parseImport[
	XMLElement["ExtendedCompoundInfo"|"CompoundInfo",_,info:{__}]
	]:=
	Replace[info,{
		XMLElement["CSID",{},{id_}]:>
			"CompoundID"->ToExpression@id,
		XMLElement["InChI",{},{str_}]:>
			"InChI"->str,
		XMLElement["InChIKey",{},{k_}]:>
			"InChIKey"->k,
		XMLElement["SMILES",{},{s_}]:>
			"SMILES"->s,
		XMLElement["AverageMass",{},{s_}]:>
			"AverageMass"->ToExpression@s,
		XMLElement["MolecularWeight",{},{s_}]:>
			"MolecularWeight"->ToExpression@s,
		XMLElement["MonoisotopicMass",{},{s_}]:>
			"MonoisotopicMass"->ToExpression@s,
		XMLElement["NominalMass",{},{s_}]:>
			"NominalMass"->ToExpression@s,
		XMLElement["ALogP",{},{s_}]:>
			"ALogP"->ToExpression@s,
		XMLElement["XLogP",{},{s_}]:>
			"XLogP"->ToExpression@s,
		XMLElement["CommonName",{},{s_}]:>
			"CommonName"->s
		},
		1];
parseImport[
	XMLElement["ArrayOfString",_,info:{__}]
	]:=
	Replace[info,{
		XMLElement["string",_,{s_}]:>s
		},
		1];


ChemSpiderParse[XMLObject[_][_,data_,_]]:=
	Replace[parseImport@data,_parseImport->data];
ChemSpiderParse[xml_String]:=
	ChemSpiderParse@ImportString[xml,"XML"];


ChemSpiderImport[req_HTTPRequest]:=
	With[{call=
		Replace[URLParse@First@req,
			a_:>
				ReplacePart[a,
					"Query"->FilterRules[a["Query"],Except["token"]]
					]
				]
			},
		Replace[
			Lookup[
				$chemSpiderCallCache,
				call,
				Replace[
					With[{imp=Import[req,"Text"]},
						Quiet[
							Check[ImportString[imp,"XML"],
								imp
								(*$Failed*)
								],
							XML`Parser`XMLGetString::prserr
							]
						],
					x:XMLObject[_][___]:>
						($chemSpiderCallCache[call]=x)
					]
				],
			x:XMLObject[_][___]:>ChemSpiderParse@x
			]
		]


If[MatchQ[$chemSpiderScrapeCache,_Symbol],
$chemSpiderScrapeCache=<||>
	];


pullSpectra[xml_]:=
	Cases[xml,
		XMLElement["div",{___,"class"->"spectra-block",___},d_]:>
			Prepend[
				Cases[d,
					XMLElement["span",
						{___,"class"->"prop-value",___},
						{___,
							XMLElement["a",{___,"href"->l_,___},_],
							___}
						]:>
							XMLElement["tr",{},
								{XMLElement["td",{},{l}],___}
								]
					],
				FirstCase[d,
					XMLElement["span",
						{___,"class"->"user_data_category_name",___},_],
					XMLElement["span",
						{___,"class"->"user_data_category_name",___},
						{"Type Not Found"}],
					\[Infinity]
					]	
				],
		\[Infinity]
		];
		


ChemSpiderScrape[xml:XMLObject[_][__]]:=
Block[{
		cache={},
		header=None,
		headerCache={},
		prop=None,
		data={},
		propsCacheResults=(
			AppendTo[headerCache,
			prop->Replace[data,{_Rule,___}:>Association@data]];
			data={};prop=None;
			&
			),
		cacheResults=(
			propsCacheResults[];
			AppendTo[cache,header->Association@headerCache];
			headerCache={};header=None;
			&
			)
		},
		Replace[
			Flatten@{
				FirstCase[xml,
					XMLElement["ul",
						{___,"class"->"user_data_categories_list",___},data_]:>
						Cases[data,
							XMLElement["span"|"tr",___],
							\[Infinity]
							],
					{},
					\[Infinity]
					](*,
				pullSpectra@xml*)
				},{
			XMLElement["span",
				{___,"class"->"user_data_category_name",___},{p_}]:>
				(
					If[header=!=None,
						cacheResults[]
						];
					header=StringTrim[p,":"]
					),
			XMLElement["span",
				{___,"class"->"user_data_property_name",___},{p_}]:>
				(
					If[prop=!=None,
						propsCacheResults[]
						];
					prop=StringTrim[p,":"]
					),
			XMLElement["tr",_,d:{XMLElement["td",_,{val_,___}],___}]:>
				AppendTo[data,
					Replace[FirstCase[d,XMLElement["strong",_,{s_}]:>s,None,\[Infinity]],{
						None->val,
						s_:>(s->val)
						}]
					]
			},
		1];
		Association@cache
	];


ChemSpiderScrape[s_String?(StringContainsQ["/"])]:=
	Lookup[$chemSpiderScrapeCache,
		s,
		Replace[Import[s,{"HTML","XMLObject"}],
			imp:XMLObject[_][__]:>(
				$chemSpiderScrapeCache[s]=
					ChemSpiderScrape@imp
					)
			]
		];
ChemSpiderScrape[id_Integer]:=
	ChemSpiderScrape@
		TemplateApply[
			"http://www.chemspider.com/Chemical-Structure.``.html",
			id];
ChemSpiderScrape[s_String]:=
	Replace[ChemSpiderID@s,
		i_Integer:>ChemSpiderScrape@i
		]


PubChemCompound~SetAttributes~Listable;
PubChemSubstance~SetAttributes~Listable;


$pubChemConnection=
	None;
$PubChem:=
Replace[$pubChemConnection,
		None->($pubChemConnection=ServiceConnect["PubChem"])
		];


pubChemSearchKeys=
	Alternatives@@{
		"CompoundID",
		"SMILES",
		"Name",
		"InChI",
		"InChIKey",
		"Formula"
		};
pubChemCIDPull[id_,key_,ops___]:=
	Replace[
		Replace[
			Normal@$PubChem["CompoundCID",key->id,ops],{
				l_List:>Map[ToExpression@#CompoundID&,l],
				a_Association:>ToExpression@a["CompoundID"],
				_:>Missing["NotAvailable"]
			}],{
		{i_}:>i,
		{}:>Missing["NotAvailable"]
	}];


pubChemNamePattern=
	_String?(Not@*StringMatchQ[DigitCharacter..])|
		{__String?(Not@*StringMatchQ[DigitCharacter..])};


PubChemID[
	compound:pubChemNamePattern,
	Optional["Name","Name"]
	]:=
	pubChemCIDPull[compound,"Name"];
PubChemID[
	compound:Entity["Chemical",_],
	Optional["Name","Name"]
	]:=
	PubChemID[CommonName@compound,"Name"];
PubChemID[
	id_String?(StringMatchQ[DigitCharacter..]),
	Optional["Name","Name"]
	]:=
	PubChemID@ToExpression@id;
PubChemID[id_Integer?Positive,	
	Optional["Name","Name"]]:=
	id;
PubChemID[_Integer,Optional["Name","Name"]]:=
	Missing["NotAvailable"];


PubChemID[keys_,"Formula",ops___]:=
	pubChemCIDPull[keys,"Formula",Method->"FormulaSearch",ops];


pubChemCIDrelated[id_,args__]:=
	Replace[PubChemID@id,{
		Except[_Integer|{__Integer}]:>
			$Failed,
		i_:>
			Replace[
				"CompoundID"/.Normal@
					Check[
						$PubChem["CompoundCID",
							"CompoundID"->i,
							args
							],
						<|"CompoundID"->$Failed|>
						],{
				{s_}:>s,
				{}:>Missing["NotFound"]
				}]
		}];
cidTypes=
	Alternatives@@{
		"Original",
		"Parent",
		"Component",
		"Similar2D",
		"Similar3D",
		"SameStereo",
		"SameIsotopes",
		"SameConnectivity",
		"SameTautomer",
		"SameParent",
		"SameParentStereo",
		"SameParentIsotopes",
		"SameParentConnectivity",
		"SameParentTautomer"
		};
PubChemRelatedIDs[id_,cidType:cidTypes]:=
	pubChemCIDrelated[id,
		"CIDType"->cidType
		];
PubChemParentIDs[id_]:=
	PubChemRelatedIDs[id,"Parent"];
PubChemComponentIDs[id_]:=
	PubChemRelatedIDs[id,"Component"];


pubChemInfoOps=
	Alternatives@@{
		"CompoundID", 
		"SMILES", 
		"Name",
		"InChI",
		"InChIKey",
		"Formula",
		"RecordType"
		};
pubChemInfoPull[ids_,mode:pubChemInfoOps,ops___]:=
	Replace[
		Normal@$PubChem["CompoundProperties",mode->ids,ops],{
		{i_}:>i,
		{}:>Missing["NotAvailable"]
		}];
PubChemInfo[
	compounds:pubChemNamePattern,
	Optional["Name","Name"],
	ops___]:=
	pubChemInfoPull[compounds,"Name"];
PubChemInfo[
	compounds:pubChemNamePattern,
	"Formula",
	ops___]:=
	pubChemInfoPull[compounds,
		"Formula",
		Method->"FormulaSearch"
		];
PubChemInfo[
	ids:_Integer|{__Integer},
	ops___]:=
	pubChemInfoPull[ids,"CompoundID",ops];
PubChemInfo[ids_,key:pubChemInfoOps,ops___]:=
	pubChemInfoPull[ids,key,ops];


sidTypes=
	Alternatives@@{
		All,
		"Standardized",
		"Component"
		};
pubChemSID[id_,args__]:=
	Replace[PubChemID@id,{
		Except[_Integer|{__Integer}]:>
			$Failed,
		i_:>
			Replace[
				"SubstanceID"/.Normal@
					$PubChem["CompoundSID",
						"CompoundID"->i,
						args
						],{
				{s_}:>s,
				{}:>Missing["NotFound"]
				}]
		}];
PubChemSubstanceIDs[id_,sid:sidTypes:All]:=
	pubChemSID[id,"SIDType"->sid];


PubChemStructure[compound_String]:=
	Replace[
		"MOL"/.
			Quiet@
				Check[Normal@$PubChem["CompoundSDF",{"Name"-> compound}],
					{"MOL"->{$Failed}}],{
			{s_}:>s,
			{}:>Missing["NotAvailable"]
		}];
PubChemStructure[id_Integer]:=
	Replace[
		"MOL"/.
			Quiet@
				Check[Normal@$PubChem["CompoundSDF",{"CompoundID"-> id}],
					{"MOL"->{$Failed}}],{
			{s_}:>s,
			{}:>Missing["NotAvailable"]
		}];


pubChemStructureLoc[cid_]:=
	URLBuild@
		<|
			"Scheme"->"https",
			"Domain"->"pubchem.ncbi.nlm.nih.gov",
			"Path"->{"rest","pug","compound","cid",
					ToString@cid,"record","SDF"},
			"Query"->{
				"record_type"->"3d"
				}
			|>;	


PubChemSDF[
	cid:_Integer|
		(_String?(StringMatchQ[DigitCharacter..]))
		]:=
	Replace[Quiet@Import[pubChemStructureLoc[cid],"Text"],
		$Failed:>
			Missing["NotAvailable"]
		];


pubChemSDFPull[idList_,take_]:=
	Replace[idList,{
		{}->
			Missing["NotFound"],
		i_Integer:>PubChemSDF@i,
		i:{__}:>
			Map[PubChemSDF,
				Take[i,Replace[take,_Integer->UpTo[take]]]
				]
		}];


PubChemSDF[
	compound:
		Entity["Chemical",_]|
		_String?(Not@*(StringMatchQ[DigitCharacter..])),
	take_:All]:=
	pubChemSDFPull[PubChemID@compound,take];


PubChemParentSDF[compound_,take_:All]:=
	pubChemSDFPull[PubChemParentIDs@compound,take];
PubChemComponentSDF[compound_,take_:All]:=
	pubChemSDFPull[PubChemComponentIDs@compound,take];
PubChemSubstanceSDF[compound_,take_:5]:=
	pubChemSDFPull[PubChemSubstanceIDs@compound,take];



PubChemHasQ[compound:Entity["Chemical",_]|_String]:=
	!MatchQ[Quiet@PubChemID@compound,_Missing|$Failed];


$ChemDataSourcesDontCacheFlag=False;


If[!AssociationQ@$ChemDataSources,
	$ChemDataSources=<||>
	];


ChemData::badsrc=
	"$ChemDataSources can only take ChemData object";
$ChemDataSources/:
	HoldPattern[
		Set[
			$ChemDataSources[key_],
			val:Except[_ChemData]]
			]:=(
				Message[ChemData::badsrc];
				$Failed
				);


chemDataSourceAdd[key_,val_]:=
	If[!KeyMemberQ[$ChemDataSources,key],
		$ChemDataSources[key]=val
		];
chemDataSourceAdd[key_->val_]:=
	chemDataSourceAdd[key,val]


chemDataSourceAdd[
	"AtomColors"->
			ChemData[$ChemAtomColors,
			(ElementData[#,"IconColor"]&)
			]
	];


CDSBondDistance[query_,___]:=
	With[{q=If[AtomQ@query,query,List@@query]},
		$ChemDataSourcesDontCacheFlag=True;
		$ChemBondDistances@
		Append[
			Sort@#[[;;2]],
			#[[3]]
			]&@
		Replace[q,{
			s_String:>
				Append[
					If[StringLength[query]>2&&
						LowerCaseQ@StringTake[s,{2}],
						StringJoin/@
							Partition[
								Prepend[
									StringSplit[
										StringTake[First@query,{2,-1}],
										c_?(Not@*LowerCaseQ):>c,3],
									StringTake[First@query,{1}]
									],
									2],
						{StringTake[s,{1}],StringTake[s,{2,-1}]}
						],
					1],
			{a_,b_}:>
				{a,b,1}
			}]
		];


chemDataSourceAdd[
	"BondDistances"->
		ChemData[CDSBondDistance,-1.&]
	]


chemDataSourceAdd[
	"UnitConversions"->
		ChemData[<|
			"InertialConstant"->
				UnitConvert[
					Quantity[1/(8\[Pi]^2),
						"PlanckConstant"/
						("AtomicMassUnit"*"Angstroms"^2)],
					"Megahertz"]
				|>,
			$Failed&]
	];


CDSSpaceGroup[query_,___]:=(
	$ChemDataSourcesDontCacheFlag=True;
	With[{r=
		Replace[{
			i_Integer:>$ChemSpaceGroups[[i]],
			s_String:>$ChemSpaceGroups[s],
			Keys:>Keys@$ChemSpaceGroups,
			Values:>Values@$ChemSpaceGroups,
			Dataset:>Dataset@$ChemSpaceGroups
			}]
		},
		Replace[r@query,
			_Missing:>
		Replace[r@StringReplace[query," "->""],
			_Missing:>
		Replace[
			r@StringReplace[query,
				{" "~~d:DigitCharacter:>"-"<>d," "->""}],
			_Missing:>
				Missing["NoSpaceGroup"]
			]]]
		]
	);


chemDataSourceAdd[
	"SpaceGroups"->
		ChemData[
			CDSSpaceGroup,
			Missing["NoSpaceGroup",#]&
			]
	];


CSDElementValences[query_,___]:=
(
	$ChemDataSourcesDontCacheFlag=True;
	Lookup[$ChemElementValences,
		query,
		Lookup[$ChemElementValences,
			ElementData[query,"Symbol"]
			]
		]
	)


chemDataSourceAdd[
	"ElementValences"->
		ChemData[CSDElementValences,
			Missing["NotAvailable",#]&]
	]


CDSPubChemID[query_,___]:=
	Replace[query,{
			PubChemCompound[id_]:>
				PubChemID[id],
			PubChemSubstance[id_]:>
				PubChemSubstanceIDs[id],
			ChemDataQuery[e___]:>
				PubChemID[e],
			e_:>
				PubChemID[e]
			}]


chemDataSourceAdd[
	"PubChemIDs"->
		ChemData[CDSPubChemID,$Failed&]
	];


CDSPubChemNames[query_,___]:=
	With[{inf=
		Replace[query,{
			ChemDataQuery[ids_,pars___]:>
				PubChemInfo[ids,pars],
			ids_:>
				PubChemInfo[ids]
			}]
		},
		With[{names=Lookup[inf,"IUPACName"]},
			Replace[query,{
				ChemDataQuery[k_]:>
					(ChemData[k,"PubChemNames"]=names;names),
				_->names
				}]
			]
		]


chemDataSourceAdd[
	"PubChemNames"->
		ChemData[CDSPubChemNames,$Failed&]
		]


chemDataSourceAdd[
	"ComponentIDs"->
		ChemData[PubChemComponentIDs@#&,$Failed&]
	]


chemDataSourceAdd[
	"ParentIDs"->
		ChemData[PubChemParentIDs@#&,$Failed&]
	]


CDSSimilarIDs[query_,___]:=
	With[{keyParameters=
		Replace[query,{
			ChemDataQuery[k_]:>
				{k,"Similar3D"},
			ChemDataQuery[k_,p_]:>
				{k,p},
			k_:>
				{k,"Similar3D"}
			}]},
		PubChemRelatedIDs[
			ChemDataLookup[First@keyParameters,"PubChemIDs"],
			Last@keyParameters
			]
		];


chemDataSourceAdd[
	"SimilarIDs"->
		ChemData[CDSSimilarIDs,$Failed&]
	]


chemDataSourceAdd[
	"2DStructures"->
			ChemData[PubChemStructure@#&,$Failed&]
	]


chemDataSourceAdd[
	"SDFFiles"->
		ChemData[
			Replace[PubChemSDF@#,
				_Missing|$Failed:>
					Replace[PubChemParentSDF@#,
						_Missing|$Failed:>PubChemComponentSDF@#
						]
				]&,
			$Failed&]
	]


chemDataSourceAdd[
	"PrimaryIsotope"->
		ChemData[
			If[ChemDataIsotopeQ@#,
				Last@First@
					IsotopeData[IsotopeData[#,"AtomicNumber"]],
				Last@First@IsotopeData[#]
				]&,
			$Failed&
			]
		];


chemDataSourceAdd[
	"StandardName"->
		ChemData[
			With[{s=Replace[#,{"D"->"H2","T"->"H3"}]},
				If[ChemDataIsotopeQ@s,
					IsotopeData[s,"StandardName"],
					ElementData[s,"StandardName"]
					]
				]&,
			$Failed&,
			<|
				"X"->"X",
				"Invisible"->
					"Invisible",
				"Black"->
					"Black",
				"White"->
					"White"
				|>
			]
	]


chemDataSourceAdd[
	"Symbol"->
		ChemData[
			If[ChemDataIsotopeQ@#,
				ElementData[
					ChemDataLookup[#,"AtomicNumber",IsotopeData],
					"Symbol"
					],
				ElementData[#,"Symbol"]
				]&,
			$Failed&,
			<|
				"X"->"X",
				"Invisible"->
					"Invisible",
				"Black"->
					"Black",
				"White"->
					"White"
				|>
			]
	]


CDSourceRadius[query_,___]:=
	With[{n=
		If[ChemDataIsotopeQ@query,
			ChemDataLookup[query,
				"AtomicNumber",IsotopeData],
			query]},
		Replace[
			ElementData[n,"VanDerWaalsRadius"],
			Except[_?NumericQ|_Quantity]:>
					Replace[ElementData[n,"AtomicRadius"],
						Except[_?NumericQ|_Quantity]:>$Failed
						]
			]
		];


chemDataSourceAdd[
	"Radius"->
		ChemData[
			CDSourceRadius,
			Quantity[25.,"Picometers"]&,
			<|
				"X"->
					Quantity[50.,"Picometers"],
				"Invisible"->
					Quantity[50.,"Picometers"],
				"Black"->
					Quantity[50.,"Picometers"],
				"White"->
					Quantity[50.,"Picometers"]
				|>
			]
	];


CDSourceMass[query_,___]:=
	If[ChemDataIsotopeQ@query,
		Quantity[
			ChemDataLookup[query,"AtomicNumber",IsotopeData]+
				ChemDataLookup[query,"NeutronNumber",IsotopeData],
			"AtomicMassUnit"
			],
		ElementData[query,"AtomicMass"]
		]


chemDataSourceAdd[
	"Mass"->
		ChemData[
			CDSourceMass,
			$Failed&,
			<|
				"X"->
					Quantity[0.,"AtomicMassUnit"],
				"Invisible"->
					Quantity[0.,"AtomicMassUnit"],
				"Black"->
					Quantity[0.,"AtomicMassUnit"],
				"White"->
					Quantity[0.,"AtomicMassUnit"]
				|>
			]
	]


chemDataSourceAdd[
	"AtomicNumber"->
		ChemData[
			ChemDataLookup[#,"AtomicNumber",IsotopeData]&,
			$Failed&,
			<|
				"X"->
					-1,
				"Invisible"->
					-2,
				"Black"->
					-3,
				"White"->
					-4
				|>
			]
	]


CDElectronegativity[query_,___]:=
	If[ChemDataIsotopeQ@query,
		ChemDataLookup[
			ChemDataLookup[query,"AtomicNumber",IsotopeData],
			"Electronegativity"
			],
		ElementData[query,"AtomicMass"]
		]


chemDataSourceAdd[
	"Electronegativity"->
		ChemData[
			CDSourceMass,
			$Failed&,
			<|
				"X"->
					0,
				"Invisible"->
					0,
				"Black"->
					0,
				"White"->
					0
				|>
			]
	]


ChemDataSource[s_String]:=
	Which[
		s==="ElementData",
			ElementData,
		s==="ChemicalData",
			ChemicalData,
		s==="IsotopeData",
			IsotopeData,
		KeyMemberQ[$ChemCustomAtoms, s],
			"CustomAtoms",
		KeyMemberQ[$ChemDataSources,s],
			$ChemDataSources[s],
		KeyMemberQ[$ChemElements,s]||
			KeyMemberQ[$ChemElements,ToLowerCase@s],
			ElementData,
		KeyMemberQ[$ChemSpaceGroups,s],
			"SpaceGroups",
		StringMatchQ[ToLowerCase@s,"d"|"t"|"deuterium"|"tritium"]||
		With[{t=StringTrim[s,NumberString]},
			KeyMemberQ[$ChemElements,t]||
				KeyMemberQ[$ChemElements,ToLowerCase@t]
			],
			IsotopeData,
		True,
			ChemicalData
		]


PackageAddAutocompletions[
	"ChemDataLookup",
	{
		None,
		Keys@$ChemDataSources,
		Join[
			ToString/@{ElementData,IsotopeData,ChemicalData},
			Keys@$ChemDataSources
			]
		}
	]


If[Not@AssociationQ@$chemDataCache,
	$chemDataCache=<||>
	];


ChemData[data:Except[_String],fallback_,cache_:<||>][
	key:Except["Properties"],
	attr_:None]:=
	Replace[
		Lookup[cache,key,data[key]],{
		e:Except[_Missing]:>
			Replace[e,
				_Association|{__Rule}:>
					Lookup[e,attr,fallback[key,attr]]
				],
		_:>
			fallback[key,attr]
		}];


extractProps[data_]:=
	Switch[data,
			_Association,
				If[AllTrue[Values@data,MatchQ[_Association]],
					Join@@Keys/@Values@data,
					Keys@data
					],
			ElementData|IsotopeData|ChemicalData,
				data["Properties"],
			_,
				{}
			]


ChemData[data:Except[_String],
	fallback_,
	cache_:<||>]["Properties"]:=
	Join[
		extractProps@cache,
		extractProps@data,
		extractProps@fallback
		];


chemDataPrep[props_]:=
	Replace[props,{
		c:ChemData[_,__]:>
			c,
		a_Association?(KeyMemberQ[#,"Main"]&):>
			ChemData@@
				Lookup[
					Join[<|
						"FallBack"->($Failed&)
						|>,
						a
						],
					{"Main","FallBack","Cache"},
					Nothing
					],
		e_:>
			chemDataPrep[<|"Main"->e|>]
		}]


ChemData/:
	Set[ChemData[name_String],props_]:=
		($ChemDataSources[name]=
			chemDataPrep[props]);
ChemData/:
	SetDelayed[ChemData[name_String],props_]:=
		($ChemDataSources[name]:=
			props);
ChemData/:
	Unset[ChemData[name_String],props_]:=
		($ChemDataSources[name]=.);


ChemData::nosrc="No data source \"``\"";
ChemData::newsrc="No data source \"``\". Creating new one.";
chemDataSet[name_,key_,value_]:=
	(
		$chemDataCache[ChemDataQuery[key,name]]=.;
		If[KeyMemberQ[$ChemDataSources,name],
			Replace[$ChemDataSources[name],{
				ChemData[a_,b_]:>
					($ChemDataSources[name]=
						ChemData[a,b,<|key->value|>];),
				ChemData[a_,b_,c_]:>
					($ChemDataSources[name]=
						ChemData[a,b,Append[c,key->value]];)
				}],
			Message[ChemData::newsrc,name];
			$ChemDataSources[name]=
				ChemData[
					(Missing["KeyAbsent",#]&),
					$Failed&,
					<|key->value|>
					]
			];
		);


chemDataSetDelayed[name_,key_,value_]:=
	(
		$chemDataCache[ChemDataQuery[key,name]]=.;
		If[KeyMemberQ[$ChemDataSources,name],
			Replace[$ChemDataSources[name],{
				ChemData[a_,b_]:>
					($ChemDataSources[name]=
						ChemData[a,b,<|key:>value|>];),
				ChemData[a_,b_,c_]:>
					($ChemDataSources[name]=
						ChemData[a,b,Append[c,key:>value]];)
				}],
			Message[ChemData::newsrc,name];
			$ChemDataSources[name]=
				ChemData[
					(Missing["KeyAbsent",#]&),
					$Failed&,
					<|key:>value|>
					]
			];
		);
chemDataSetDelayed~SetAttributes~HoldRest;


chemDataUnset[name_,key_]:=
	(
		$chemDataCache[ChemDataQuery[key,name]]=.;
		If[KeyMemberQ[$ChemDataSources,name],
			Replace[$ChemDataSources[name],{
				ChemData[a_,b_,c_]:>
					($ChemDataSources[name]=
						ChemData[a,b,KeyDrop[c,key]];)
				}],
			Message[ChemData::nosrc,name];
			];
		);


ChemData/:
	HoldPattern[Set[ChemData[name_String][key_],val_]]:=
	chemDataSet[name,key,val];
ChemData/:
	HoldPattern[SetDelayed[ChemData[name_String][key_],val_]]:=
	chemDataSetDelayed[name,key,val];
ChemData/:
	HoldPattern[Unset[ChemData[name_String][key_]]]:=
	chemDataUnset[name,key];


`Package`PackageAddAutocompletions[
	"ChemData",
	{Keys@$ChemDataSources}
	]


Format[
	d:ChemData[data:Except[_String],
		fallback_]
	]:=
	RawBoxes@BoxForm`ArrangeSummaryBox[
		"ChemData",
		d,
		None,
		{
			BoxForm`MakeSummaryItem[{
				"Properties: ",
				Replace[
					d["Properties"],
					Except[{__}]->"Unknown"
					]
				},
				StandardForm
				]
			},
		{
			If[AssociationQ@data,
				BoxForm`MakeSummaryItem[{
					"Data: ",
					Short[data,1]
					},
					StandardForm
					],
				BoxForm`MakeSummaryItem[{
					"Function: ",
					Short[data,1]
					},
					StandardForm
					]
				],
			If[fallback=!=($Failed&),
				BoxForm`MakeSummaryItem[{
					"FallBack: ",
					Short[fallback,1]
					},
					StandardForm
					],
				Nothing
				]
			},
		StandardForm
		]


Format[
	d:ChemData[data:Except[_String],
		fallback_,
		cache_:<||>]
	]:=
	RawBoxes@BoxForm`ArrangeSummaryBox[
		"ChemData",
		d,
		None,
		{
			BoxForm`MakeSummaryItem[{
				"Properties: ",
				d["Properties"]
				},
				StandardForm
				]
			},
		{
			BoxForm`MakeSummaryItem[{
				"Data: ",
				Short[data,1]
				},
				StandardForm
				],
			BoxForm`MakeSummaryItem[{
				"FallBack: ",
				Short[fallback,1]
				},
				StandardForm
				],
			BoxForm`MakeSummaryItem[{
				"Cache Length: ",
				Length@cache
				},
				StandardForm
				]
			},
		StandardForm
		]


ChemDataProperties[pat_:"*",
	datasource:IsotopeData|ElementData|ChemicalData|_ChemData]:=
	With[{props=datasource["Properties"]},
		Cases[Replace[props,Entity[_,p_]:>p],
			_String?(StringMatchQ[pat])]
		];
ChemDataProperties[pat_:"*",
	s_String?(KeyMemberQ[$ChemDataSources,#]&)]:=
	ChemDataProperties[pat,$ChemDataSources[s]];
ChemDataProperties[thing_,pat_:"*"]:=
	ChemDataProperties[pat,ChemDataSource@thing];


ChemDataCacheClear[string_:_,attr_:_]:=
	With[{old=
		KeySelect[$chemDataCache,
			MatchQ[ChemDataQuery[string,attr]]
			]},
		$chemDataCache=
			KeySelect[$chemDataCache,
				Not@*MatchQ[ChemDataQuery[string,attr]]];
		old
		];


HoldPattern[
	ChemDataLookup[
		string:Except[_Key|_List|_Pattern|_Optional],
		attr_,
		o__,"Overwrite"->True]
	]:=(
	$chemDataCache[ChemDataQuery[string,attr]]=.;
	ChemDataLookup[string,attr,o]
	);


HoldPattern[
	ChemDataLookup[
		string:Except[_Key|_List|_Pattern|_Optional],
		attr_,
		dataSource:
			IsotopeData|ElementData|
			ChemicalData|_ChemData]
	]:=
	If[TrueQ@attr===None,
		dataSource[Replace[string,{"D"->"H2","T"->"H3"}],attr],
		Lookup[$chemDataCache,ChemDataQuery[string,attr],
			With[{d=
				dataSource[
					Replace[string,{"D"->"H2","T"->"H3"}],
					attr]},
				If[TrueQ@$ChemDataSourcesDontCacheFlag,
					$ChemDataSourcesDontCacheFlag=False;
					d,
					$chemDataCache[ChemDataQuery[string,attr]]=d
					]
				]
			]
		];
HoldPattern[
	ChemDataLookup[
		string:Except[_Key|_List|_Pattern|_Optional],
		attr_,
		dataSource:
			IsotopeData|ElementData|
			ChemicalData|_ChemData,
		default_]
	]:=
	If[attr===None,
		Replace[
			dataSource[Replace[string,{"D"->"H2","T"->"H3"}],
				attr],
			_Missing->default],
		Lookup[$chemDataCache,ChemDataQuery[string,attr],
			With[{d=
				Replace[
					dataSource[Replace[string,{"D"->"H2","T"->"H3"}],
						attr],
					_Missing->default]},
				If[TrueQ@$ChemDataSourcesDontCacheFlag,
					$ChemDataSourcesDontCacheFlag=False;
					d,
					$chemDataCache[ChemDataQuery[string,attr]]=d
					]
				]
			]
		];


chemDataCacheThreadSet[keys:{__},vals:{__}]:=
	AssociateTo[$chemDataCache,
		Thread[keys->vals]
		];
chemDataCacheThreadSet[ChemDataQuery[l:{__},k_],v:{__}]:=
	chemDataCacheThreadSet[
		Map[ChemDataQuery[#,k]&,l],
		v
		];
		
chemDataCacheThreadSetDelayed[keys:{__},vals:{__}]:=
	AssociateTo[$chemDataCache,
		Thread[keys:>vals]
		];
chemDataCacheThreadSetDelayed[ChemDataQuery[l:{__},k_],v:{__}]:=
	chemDataCacheThreadSetDelayed[
		Map[ChemDataQuery[#,k]&,l],
		v
		];
chemDataCacheThreadSetDelayed~SetAttributes~HoldRest;


chemDataCacheThreadUnset[keys:{__}]:=
	KeyDropFrom[$chemDataCache,keys];
chemDataCacheThreadUnset[ChemDataQuery[l:{__},k_]]:=
	chemDataCacheThreadUnset[Map[ChemDataQuery[#,k]&,l]];


ChemDataLookup/:HoldPattern[
		Set[ChemDataLookup[name:Except[_List],attr_],val_]]:=
	($chemDataCache[ChemDataQuery[name,attr]]=val);
ChemDataLookup/:HoldPattern[
		SetDelayed[
			ChemDataLookup[name:Except[_List],attr_],val_]]:=
	($chemDataCache[ChemDataQuery[name,attr]]:=val);
ChemDataLookup/:HoldPattern[
		Unset[ChemDataLookup[name:Except[_List],attr_]]]:=
	($chemDataCache[ChemDataQuery[name,attr]]=.);


ChemDataLookup/:
	HoldPattern[
		Set[ChemDataLookup[name:_List,attr_],val_]]:=
	chemDataCacheThreadSet[ChemDataQuery[name,attr],val];
ChemDataLookup/:
	HoldPattern[
		SetDelayed[ChemDataLookup[name:_List,attr_],val_]]:=
	chemDataCacheThreadSetDelayed[ChemDataQuery[name,attr],val];
ChemDataLookup/:
	HoldPattern[
		Unset[ChemDataLookup[name:_List,attr_]]
		]:=
	chemDataCacheThreadUnset[ChemDataQuery[name,attr]];


HoldPattern[
	ChemDataLookup[
		string:Except[_Key|_List|_Pattern|_Optional],
		attr_,
		source_String?(KeyMemberQ[$ChemDataSources,#]&)]
	]:=
	ChemDataLookup[string,attr,$ChemDataSources[source]];
HoldPattern[
	ChemDataLookup[
		string:Except[_Key|_List|_Pattern|_Optional],
		attr_,
		source_String?(KeyMemberQ[$ChemDataSources,#]&),default_]
	]:=
	ChemDataLookup[string,attr,
		$ChemDataSources[source],default];


HoldPattern[
	ChemDataLookup[
		string:Except[_Key|_List|_Pattern|_Optional],
		source:
			ChemicalData|ElementData|IsotopeData|
			_String?(KeyMemberQ[$ChemDataSources,#]&)
		]
	]:=
	ChemDataLookup[string,source,source];


HoldPattern[
	ChemDataLookup[
		string:Except[_Key|_List|_Pattern|_Optional],
		source:
			ChemicalData|ElementData|IsotopeData|
			_String?(KeyMemberQ[$ChemDataSources,#]&),
		default_]
	]:=
	ChemDataLookup[string,source,source,default];


HoldPattern[
	ChemDataLookup[
		string:Except[_Key|_List|_Pattern|_Optional],
		attr_]
	]:=
	ChemDataLookup[string,attr,ChemDataSource@string];
HoldPattern[
	ChemDataLookup[
		string:Except[_Key|_List|_Pattern|_Optional],
		attr_,default_]
	]:=
	ChemDataLookup[string,attr,ChemDataSource@string,default];


HoldPattern[ChemDataLookup[l_List,a__]]:=
	ChemDataLookup[#,a]&/@l;


ChemDataLookup[attr:Except[_Association]][
	string:Except[_Key]]:=
	ChemDataLookup[string,attr];
ChemDataLookup[spc:_Association][string_]:=
	ChemDataLookup[string,
		Lookup[spc,"Property",None],
		Lookup[spc,"Source",Sequence[]],
		Lookup[spc,"Default",Sequence[]]
		];


End[];



