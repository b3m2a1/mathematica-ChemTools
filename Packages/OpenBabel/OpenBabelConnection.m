(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



OpenBabel::usage=
	"Primary connection object for running OpenBabel";


$OpenBabel::usage=
	"Default OpenBabel object";
$OBDir::usage=
	"Default OpenBabel directory";


OBBuild::usage=
	"Downloads and builds openbabel";


OBInput::usage=
	"Input wrapper for OpenBabel";
OBOutput::usage=
	"Output wrapper for OpenBabel";


OBRun::usage=
	"Runs OpenBabel";
OBPyCommand::usage=
	"Converts to OpenBabel ready python code";
OBPyRun::usage=
	"Runs after converting to python";


OBParse::usage=
	"General purpose parsing for open babel output. To be extended.";


OBMolecularEnergy::usage="A basic energy calculator";
OBFormatConvert::usage="A molecular format converter";
OBRingMap::usage="Maps a function over a molecule"


Begin["`Private`"];


PyToolsLoad[]


$eigen3src="http://bitbucket.org/eigen/eigen/get/3.2.10.zip";


$openbabelsrc=
	"https://sourceforge.net/projects/openbabel/files/latest/download?source=files";


eigenDownload[dir_String?DirectoryQ]:=
		With[{
			tmpDir=
				CreateDirectory@
					FileNameJoin@{
						$TemporaryDirectory,
						StringJoin@RandomSample[Alphabet[],10]
						}
			},
			With[{
				f=URLDownload[$eigen3src,FileNameJoin@{tmpDir,"eigen3_tmp.zip"}],
				out=FileNameJoin@{dir,"eigen3"}
				},
				ExtractArchive[f,tmpDir];
				DeleteFile[f];
				If[DirectoryQ@out,DeleteDirectory[out,DeleteContents->True]];
				CopyDirectory[First@FileNames["*",tmpDir],out];
				Quiet@DeleteDirectory[tmpDir,DeleteContents->True];
				Replace[
					out,
					Except[_String?FileExistsQ]->$Failed
					]
			]
		];


$obprefix="openbabel";


openbabelDownload[dir_String?DirectoryQ]:=
	With[{
			tmpDir=
				CreateDirectory@
					FileNameJoin@{
						$TemporaryDirectory,
						StringJoin@RandomSample[Alphabet[],10]
						}
			},
			With[{
				f=URLDownload[$openbabelsrc,
					FileNameJoin@{tmpDir,"openbabel-src.tar.gz"}],
				out=FileNameJoin@{dir,$obprefix}
				},
				ExtractArchive[f,tmpDir];
				DeleteFile[f];
				If[DirectoryQ@out,DeleteDirectory[out,DeleteContents->True]];
				CopyDirectory[First@FileNames["*",tmpDir],out];
				Quiet@DeleteDirectory[tmpDir,DeleteContents->True];
				Replace[
					out,
					Except[_String?FileExistsQ]->$Failed
					]
			]
		];


OBBuild::nodir="Directory `` not found";
obBuild[
	dir_?DirectoryQ,
	eigen:_String?DirectoryQ|Automatic:Automatic]:=
	With[{parentDir=ExpandFileName@dir},
	If[DirectoryQ@FileNameJoin@{parentDir,$obprefix}&&
		Length[FileNames["*",FileNameJoin@{parentDir,$obprefix}]]>0,
		AbsoluteTiming[{
		If[(!DirectoryQ@FileNameJoin@{parentDir,$obprefix,"bin"})&&
				cmakeCheck@parentDir,
			terminalRun[{
				If[FileExistsQ@FileNameJoin@{parentDir,"cmake","bin","cmake"},
					FileNameJoin@{parentDir,"cmake","bin","cmake"},
					"cmake"
					],
				FileNameJoin@{parentDir,$obprefix},
				"-DCMAKE_INSTALL_PREFIX="<>
					FileNameJoin@{parentDir,$obprefix},
				"-DRUN_SWIG=ON",
				"-DSWIG_EXECUTABLE="<>FileNameJoin@{parentDir,"swig","bin","swig"},
				"-DSWIG_DIR="<>FileNameJoin@{parentDir,"swig"},
				"-DPYTHON_BINDINGS=ON",
				"-DEIGEN3_INCLUDE_DIR="<>
					Replace[eigen,
						Automatic:>FileNameJoin@{parentDir,"eigen3"}
						]
				},
				ProcessEnvironment-><|
					"PATH"->
						StringJoin@{
							Environment["PATH"],
							":",
							Riffle[{
									FileNameJoin@{parentDir,"cmake","bin"},
									FileNameJoin@{parentDir,$obprefix}
									},
								":"
								]
							}
					|>,
				ProcessDirectory->
					FileNameJoin@{parentDir,$obprefix}
				]
			],
		If[!FileExistsQ@FileNameJoin@{
					parentDir,
					$obprefix,"build","bin","obabel"
					},
			terminalRun[{"make","install"},
				ProcessDirectory->
					ExpandFileName@FileNameJoin@{parentDir,$obprefix}
				]
			],
		If[FileExistsQ@
				FileNameJoin@{parentDir,$obprefix,"bin","obabel"},
				FileNameJoin@{parentDir,$obprefix}
				]
		}]//If[Last@Last@#=!=Null,
			TemplateApply["Built to `pkg`. Took `time`.",
					<|
						"time"->(
							$OBBuildLogs=Last@#;
							UnitConvert[Quantity[First@#,"Seconds"],"Minutes"]
							),
						"pkg"->Last@Last@#
						|>
					],
			$Failed
			]&,
		Message[OBBuild::nodir,FileNameJoin@{parentDir,$obprefix}]
		]
	];


OBBuild[parentDir:_?DirectoryQ]:=
	(
		If[!cmakeCheck@parentDir,
			cmakeBuild@parentDir
			];
		If[!FileExistsQ@FileNameJoin@{parentDir,"eigen3"},
			eigenDownload@parentDir
			];
		SwigBuild[parentDir];
		If[!FileExistsQ@FileNameJoin@{parentDir,$obprefix}||
			Length[
				Select[DirectoryQ]@
					FileNames["*",FileNameJoin@{parentDir,$obprefix}]
				]===0,
			openbabelDownload@parentDir
			];
		obBuild@parentDir
		);
OBBuild[Optional[Automatic,Automatic]]:=
	OBBuild[DirectoryName[$OBDir]]


$OBDir=ChemExtensionDir[$obprefix];
$OpenBabel:=$OpenBabel@$OBDir;


$OBPythonInterpreter="python2.7";


obabWriteTmp[fil_,string_]:=
	With[{f=OpenWrite@fil},
		WriteString[f,string];
		Close@f
		];


$OBOptions=<|
	"ImportStart"->"f",
	"ImportEnd"->"l",
	"SingleMolecule"->"t",
	"IgnoreErrors"->"e",
	"CompressOutput"->"z",
	"MultipleOutputs"->"m"
	"DeleteHydrogens"->"d",
	"AddHydrogens"->"h",
	"pHAppropriateHydrogens"->"p",
	"ConvertDativeBonds"->"b",
	"CenterCoordinates"->"c",
	"JoinInputMolecules"->"j",
	"ConvertMatching"->"s",
	"ConvertExcept"->"v"
	|>;


obabRun[a_]:=
	Block[{
		babelDir=a["OpenBabel"],
		binary=a["Mode"],
		processDir=a["Directory"],
		inputData=a["Input"],inputFiles,
		outputSpecs=a["Output"],
		babelOps=Lookup[a,"Options",{}]
		},
		binary=FileNameJoin@{babelDir,"bin",binary};
		If[!FileExistsQ@binary,Return[$Failed]];
		processDir=
			Replace[processDir,{
				Automatic:>
					Switch[inputData,
						_String?FileExistsQ,
							DirectoryName@inputData,
						_->$TemporaryDirectory
						],
				Except[_String?DirectoryQ]->
					$TemporaryDirectory
				}];
		inputFiles=
			Switch[inputData,
				_String?FileExistsQ,
					<|FileNameTake@inputData->inputData|>,
				_String,
					With[{filname=
						FileNameJoin@{processDir,"input"}
						},
						<|
							FileNameTake@filname->
								obabWriteTmp[filname,inputData]
							|>
						],
				_Association,
					Association@
						KeyValueMap[
							#->
								obabWriteTmp[FileNameJoin@{processDir,#},#2]&,
							inputData
							]
				];
			babelOps=
				Replace[Flatten@{Normal@babelOps},{
					(k_->True):>
						If[KeyMemberQ[$OBOptions,k],
							"-"<>$OBOptions[k],
							k
							],
					(_->False)->
						Nothing,
					(k_->v_):>
						(Lookup[$OBOptions,k,k]->ToString@v)
					},
					1];
			RunProcess[Flatten@{
				binary,
				Values@inputFiles,
				Sequence@@babelOps
				},
				ProcessDirectory->processDir,
				ProcessEnvironment->
					StringJoin@
						Riffle[{
							babelDir,
							DirectoryName@binary,
							Environment["PATH"]
							},":"
							]
				]
		]


$pybelSession:=
	If[!PySessionActive["pybel"],PySessionStart["pybel"],PySession["pybel"]]


pybelRunProcessRun[a_]:=
	Block[{
		babelDir=a["OpenBabel"],
		processDir=a["Directory"],
		inputFile=a["Input"],
		outputSpecs=a["Output"]
		},
		If[!
			AllTrue[{
				{"lib",$OBPythonInterpreter,"site-packages"},
				{"lib","_openbabel.so"}
				},
				FileExistsQ@FileNameJoin@Flatten@{babelDir,#}&
				],
			Return[$Failed]
			];
		processDir=
			Replace[processDir,{
				Automatic:>
					Switch[inputFile,
						_String?FileExistsQ,
							DirectoryName@inputFile,
						_->$TemporaryDirectory
						],
				Except[_String?DirectoryQ]->
					$TemporaryDirectory
				}];
		inputFile=
			Switch[inputFile,
				_String?FileExistsQ,
					inputFile,
				_String,
					With[{filname=
						FileNameJoin@{processDir,"input.py"}
						},
						obabWriteTmp[filname,inputFile]
						],
				_Association|_List,
					Sequence@@
						Replace[Flatten@{Normal@inputFile},{
							(fn_->s_):>
								obabWriteTmp[FileNameJoin@{processDir,fn},s]
							},
						1
						]
				];
			RunProcess[
				Flatten@{
					"python",
					inputFile
					},
				ProcessDirectory->
					processDir,
				ProcessEnvironment-><|
					"PATH"->
						Environment["PATH"],
					"PYTHONPATH"->
						StringJoin@
							Riffle[{
								FileNameJoin@{babelDir,"lib",$OBPythonInterpreter,"site-packages"},
								FileNameJoin@{babelDir,"scripts","python"}
								},":"
								]
					|>
				]
		]


pybelSessionRun[a_]:=
	Block[{
		babelDir=a["OpenBabel"],
		processDir=a["Directory"],
		inputFile=a["Input"],
		outputSpecs=a["Output"]
		},
		If[!
			AllTrue[{
				{"lib",$OBPythonInterpreter,"site-packages"},
				{"lib","_openbabel.so"}
				},
				FileExistsQ@FileNameJoin@Flatten@{babelDir,#}&
				],
			Return[$Failed]
			];
		processDir=
			Replace[processDir,{
				Automatic:>
					Switch[inputFile,
						_String?FileExistsQ,
							DirectoryName@inputFile,
						_->$TemporaryDirectory
						],
				Except[_String?DirectoryQ]->
					$TemporaryDirectory
				}];
		inputFile=
			Switch[inputFile,
				_String?FileExistsQ,
					Import[inputFile,"Text"],
				_String,
					inputFile,
				_Association|_List,
					Sequence@@
						Replace[Flatten@{Normal@inputFile},{
							(fn_->s_):>
								s
							},
						1
						]
				];
			With[{
				t1=
					PySessionRun["pybel",
						inputFile
						]
				},
				If[!AssociationQ@t1,
					PySessionStart["pybel",
						ProcessDirectory->
							processDir,
						ProcessEnvironment-><|
							"PATH"->
								Environment["PATH"],
							"PYTHONPATH"->
								StringJoin@
									Riffle[{
										FileNameJoin@{babelDir,"lib",$OBPythonInterpreter,"site-packages"},
										FileNameJoin@{babelDir,"scripts","python"}
										},":"
										]
							|>
						];
					PySessionRun["pybel",
						inputFile
						],
					t1
					]
				]
		]


pybelRun[a_]:=
	If[Lookup[a,"Session",False]//TrueQ,
		pybelSessionRun@a,
		pybelRunProcessRun@a
		]


OBRun[a_Association]:=
	Block[{babelDir,binary},
		binary=
			Replace[a["Mode"],{
				s_String?FileExistsQ:>
					FileNameTake@s,
				Automatic|Except[_String]:>
					Replace[a["Input"],{
						{f_String?(FileExistsQ@#&&FileExtension@#=="py"&),___}:>
							"Pybel",
						_->
							"obabel"
						}]
				}];
		babelDir=
			Replace[a["Directory"],
				Automatic|Except[_String?DirectoryQ]:>
				Replace[a["Mode"],
					{
						s_String?FileExistsQ:>
							Replace[
								FileNameJoin@
									SequenceCases[FileNameSplit@s,
										{base__,$obprefix,___}:>
											FileNameJoin@{base,$obprefix}
										],{
								{d_}:>d,
								_->$OBDir
								}],
						_->
							$OBDir
						}]
				];
		Switch[binary,
			"Pybel",
				pybelRun@Merge[{a,
					"Directory"->babelDir,
					"Input"->
						Replace[a["Input"],
							inp_Association:>
								OBPyConfig@inp
							]
					},
					Last],
			_,
				obabRun@Merge[{a,"Directory"->babelDir,"Mode"->binary},Last]
				]
		];
OBRun[f_String?FileExistsQ,args___String]:=
	OBRun@<|
		"Input"->{f,args}
		|>;


$OBPyHeader=
	With[{dir=FileNameJoin@{$OBDir,"lib",$OBPythonInterpreter,"site-packages"}},
		{
			PyFromImportSow["__future__","print_function"],
			PyImportSow[{"openbabel","pybel"}]
			}
		]


$OBPyMolecule=
	Evaluate[
		ToSymbolicPython[
			pybelLoadMolString = PyString[#,"'''"];
			pybelLoadName = PyString[#2];
			pybelLoadFormat = PyString@#3;
			#2 = pybel.readstring[PyString@#3, pybelLoadMolString];
			#2.inputString = pybelLoadMolString;
			#2.inputFormat = pybelLoadFormat;
			#2.inputName = pybelLoadName;
			]
		]&


OBPyMoleculeString//Clear


OBPyMoleculeString[fmt_String->molspec:_List|_String,name_]:=
	$OBPyMolecule[
		If[StringQ[molspec],
			molspec,
			ChemUtilsGenerateMolString[molspec]
			],
		name,
		fmt
		];
OBPyMoleculeString[molspec:_List|_String,name_]:=
	OBPyMoleculeString[
		StringTrim[ChemUtilsDetectMolFormat[molspec],"Rules"]->molspec,
		name
		];


OBPyCommand[
	molecules_:{},
	body_
	]:=
	PyColumn@Flatten@{
		$OBPyHeader,
		MapIndexed[
			Replace[#,{
				(fmt_->thing_->name_String):>
					OBPyMoleculeString[
						fmt->thing,
						name
						],
				(thing_->name_String?(StringMatchQ[(WordCharacter|"_")..])):>
					OBPyMoleculeString[
						thing,
						name
						],
				_:>
					OBPyMoleculeString[
						#,
						"pybelMol"<>If[#2[[1]]>1,ToString@First@#2,""]
						]
				}]&,
			If[!ListQ[molecules]||ChemUtilsDetectMolFormat[molecules]==="MOL",
				{molecules},
				molecules
				]
			],
		If[SymbolicPythonQ[body]||StringQ[Unevaluated[body]],
			body,
			ToSymbolicPython[body]
			]
		}//ToPython;
OBPyCommand~SetAttributes~HoldRest


OpenBabel::runfile="File string for OpenBabel run:

``";


OpenBabel::runerr="Error in OpenBabel run:

``";


Options[OBPyRun]=
	{
		"OpenBabel"->Automatic,
		"Directory"->Automatic,
		"Session"->False,
		"EmitMessages"->True,
		"EchoFile"->False
		};
OBPyRun[
	molecules_:{},
	body:Except[_Rule|_RuleDelayed|_FilterRules|{(_Rule|_RuleDelayed|_FilterRules)..}],
	imps:"StandardError"|"StandardOutput"|{Repeated["StandardError"|"StandardOutput",2]}:
		"StandardOutput",
	ops:OptionsPattern[]
	]:=
	With[{f=$OBPyRunFileString=OBPyCommand[molecules,body]},
		If[OptionValue["EchoFile"],
			Echo[f]
			];
		With[{
			runData=
				OBRun[
					<|
						ops,
						"OpenBabel"->Replace[OptionValue["OpenBabel"],Automatic:>$OBDir],
						"Mode"->"Pybel",
						"Input"->f
						|>
					]
			},
		If[OptionValue["EmitMessages"],
			With[{errdats=StringTrim@runData["StandardError"]},
				If[StringLength[errdats]>0,
					Message[OpenBabel::runerr,errdats]
					]
				]
			];
		If[Length[#]===1,
			If[StringLength@#[[1]]>0,#[[1]]],
			#
			]&@
		Lookup[
			Map[
				StringTrim,
				KeyDrop[runData,"ExitCode"]
				],
			Flatten@{imps}
			]
		]
	];
OBPyRun~SetAttributes~HoldAll


OBMolecularEnergy[molecule_,ops:OptionsPattern[]]:=
	OBPyRun[molecule,
		ff = openbabel.OBForceField.FindForceField[PyString@"MMFF94"];
		If[ff == 0,
		  Print["Could not find forcefield"]
		  ];
		ff.SetLogLevel[openbabel."OBFF_LOGLVL_HIGH"];
		ff.SetLogToStdErr[];
		If[ff.Setup[pybelMol.OBMol] == 0,
		  Print["Could not set up forcefield"]
		  ];
		Print[ff.Energy[]],
		ops
		]


OBFormatConvert[molecule_,format_,ops:OptionsPattern[]]:=
	OBPyRun[molecule,
		If[MemberQ[{PyString@"SMILES",PyString@"InChI"},pybelMol.inputFormat],
			pybelMol.make3D[]
			];
		pybelMol.write[PyString[format]]//Print,
		ops
		]


OBRingMap[f_,mol_,ops:OptionsPattern[]]:=
	With[{fReal=Replace[f,Identity->Function@#]},
		OBPyRun[mol,
			MapIndexed[
				Function[
					Print["===Ring "<>ToString[#2+1]<>"===="];
					f[#]//Print;
					],
				openbabel.OBMolRingIter[pybelMol.OBMol]
				];,
			ops
			]
		]


End[];



