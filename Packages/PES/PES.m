(* ::Package:: *)

(* Autogenerated Package *)

(* ::Text:: *)
(*
	Little potential energy surface object for convenient use in the future
*)



PESObject::usage="Represents a PES that we can operate on";


Begin["`Private`"];


validPES[a_Association]:=
  MatchQ[a["Surface"], _StructuredArray]&&
    MatchQ[a["Interpolation"], _InterpolatingFunction];



(* ::Subsubsection::Closed:: *)
(*Constructor*)



po:PESObject[a_Association?validPES]?(System`Private`HoldEntryQ):=
  System`Private`HoldSetNoEntry[po];
PESObject[pa_List?(MatchQ[Dimensions[#], {_?(#>1&), _}]&)]:=
  PESObject@
    QuantityArray[pa,
      Append[ConstantArray["Angstroms", Length@Dimensions[pa]-1], "Wavenumbers"]
      ];
PESObject[qa_StructuredArray]:=
  <|
    "Surface"->qa,
    "Interpolation"->Interpolation@QuantityMagnitude[qa],
    "Strides"->
    |>


(* ::Subsubsection::Closed:: *)
(*Attributes*)



(* ::Subsubsubsection::Closed:: *)
(*Surface*)



pesSurf[PESObject[a_]]:=
  a["Surface"]


(* ::Subsubsubsection::Closed:: *)
(*Interpolation*)



pesInterp[PESObject[a_]]:=
  a["Interpolation"]


(* ::Subsubsubsection::Closed:: *)
(*Length*)



pesLen[PESObject[pa_]]:=
  Length@pa[["Surface"]]


(* ::Subsubsubsection::Closed:: *)
(*Dimension*)



pesDim[PESObject[pa_]]:=
  Length@pa[["Surface", 1]]-1


(* ::Subsubsubsection::Closed:: *)
(*Slice*)



(* ::Text:: *)
(*Takes 1D cuts of the potential*)



(*pesSlice[PESObject[pa_], coord_, slice_]:=
	Module[
		{
			rawGrid=pa[["Surface", All, {If[coord<1, ], -1}]]
			},
		
		]*)


(* ::Subsubsubsection::Closed:: *)
(*Derivative*)



(* ::Text:: *)
(*
	Does a 1D derivative in whatever specified coordinate. Need to get slicing working well before this will.
	Lots of work and kinda un-rewarding.
*)



(*pesDerivative[pa_PESObject, 
	n:{__?IntegerQ}|_?IntegerQ,
	pt:_?IntegerQ|{__Real}|{__?IntegerQ}|All|_Span, 
	order_:Automatic
	]:=
	Module[
		{
			pdim=pesDim[pa],
			plen=pesLen[pa],
			dim=Length@n,
			do=Total@n,
			gps,
			vals,
			ord
			},
		If[!((IntegerQ@n&&pdim\[Equal]1)||dim\[Equal]pdim),
			PackageRaiseException[Automatic,
				"Derivative specification `` and surface dimension `` don't align",
				dim, pdim
				];
			];
		Which[IntegerQ@pt,
			If[pt>plen, 
				PackageRaiseException[Automatic,
					"Gridpoint `` lies outside of the grid of size `` in pdim",
					dim, pdim
					]
				];
			ord=
				Replace[order, 
					Except[_Integer?IntegerQ]\[RuleDelayed]
						Min@{pt, plen-pt, 5}
					];
			NDSolve`FiniteDifferenceDerivative[2,
				pa[[All, ]],
				
				]
			]
		]*)


(* ::Subsubsubsection::Closed:: *)
(*Frequency*)



End[];



