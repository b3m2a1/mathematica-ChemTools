(* ::Package:: *)


(* ::Title:: *)
(*DataFramework Package*)

(* ::Text::GrayLevel[.5]:: *)
(*Autogenerated ChemTools package*)

ChemSpectrum::usage="Inert head for wrapping up spectral data";


ChemSpectrumImport::usage="Imports a spectrum";
ChemSpectrumImportString::usage="Imports a string as a spectrum";


ChemSpectrumPlot::usage="Plots a spectrum";
ChemSpectrumPlotDiscrete::usage="Plots discrete frequencies";
ChemSpectrumViewer::usage=
	"An interactive viewer to focus on pieces of a spectrum";


ChemSpectrumSelect::usage="Picks data matching a criterion";


ChemSpectrumZoom::usage="Zooms in on a piece of the spectrum";


ChemSpectrumSelectAbove::usage="Picks data above a threshold";
ChemSpectrumSelectBelow::usage="Picks data below a threshold";


ChemSpectrumLineStore::usage=
	"Represents a cache of lines. 
Has HoldFirst and can be used as an operator to add to the cache."; 


ChemSpectrumLineSelector::usage=
	"An interactive spectrum viewer and selector.
Has stacking, zooming, a cursor, and can apply an arbitrary function.
To be used with the operator form of ChemSpectrumLineStore";


ChemSpectrumSimulate::usage=
	"Simulates a spectrum for the given set of atoms 
(note that this is entirely aspirational at the moment)";


Begin["`Private`"];


$specIcon=Image[Image[CompressedData["
1:eJzs3WdfGtvfMPrrc+7z4Dw8b+F+F/fT++F1n+v/39nVmAKWJDt7Zyd7p1li
Bey9xd57R4EB6UgTpRdBUey9xFhijFLOWjMMRdGYWIjXJz8TGIZx/PJjrTVr
zQzM/4z4+6dH/9d//Md/vPx/wM1P4dH/+8WL8Nif/1/w4NdnL//4/dnDB//5
7NXD3x+++F8R/wPM/L/Bf5H7v+vKwvT66tZ9HfHdH9z47g9ufPcHN4w33D8W
FWzBxWL0hudf8CzYgotFy6NgCy4W9Q+CLbhYND4MtuBi0fDdH9T47g9ufPcH
N266v+6G+9tuuP+mb3/jI4MtuFjciQi24GJxJ/Iw2IQLRcQNLz/EG15+COHS
YBMuFISwP4NNuFAQwojBJlwoCOExwSZcKAjh0cEmXCgI4a+CTbhQfPcHN777
gxs33h/2PNiECwWB+HewCRcKAuGvYBMuFN/9wY3v/uDGd39w47s/uPHdH9z4
7g9ufPcHNwiEG77/kPB7sAkXCgLhcbAJFwoC4Y9gEy4U/639Tsf1Qb4yzvQ7
7NcH+cq4+e3nGe3Pjch/+OlPDpVeH+Qrg0AgnP5k62/XB/nKIBDCTn9y4Ns/
ufjs8lN0fZCvjDPLjyTz+iBfGWf6B9PxKfu32hKd6RdnXB/kK+Ncfse32484
Z/43V64D8xVxTn/dt1qSzuVfnMx4cj2cL45z+Vl1HW+vh/PFcYbfcYT7O3OR
5usCfWGcK//0it6q6+F8cZzPX9lTeT2cL44z/NuLuJ9WfhPzPxB7s/0dIeIM
bATfX3YT/ZLEm+x32pU5ePkZqL95fpdLniLOcBzBqb63N9JPEWeYaXAq/8nN
8++vwPx3oR9PzYi4WX4nGG3p8+UpgxllofBxW9bN8sMY/BP6G5/CaXbDzfMP
J0A/Fx3B37T+z7bO6VClQL+kCJQm501r/20lLtdIMvQLsuHjb7v/cHJwborF
/Xw//zc4jg+Yf2O0fd+d/xyX69PHbzv/J2caozaVXv+07tv2vzsx0xgzWY37
nU55F/Q7nS7X1PS1+z4XwK8+MdMYrUvw5N/Jeov72zuDIDw7gF9yYqYxWh3l
LT+MQrz8VNZcu+9zAfzDJ2Yao7XxuN9hZ6L5P/zkcrW0BUGIxdEpHxMM4Hcc
+vqXLZh/cMDhCKL/tAB+xYmZwB+H+zW9zBLor8l3uZpbYS241vjcIejP+vkl
mL+1AvrtwdqCaYYCzw/g35D7+gdyMX9v08R4c+uVO4+H4yN2n/w08PPAf/yV
aR74+jn5mL+rrrMlCP45xIUW2fRTDiUCv+zYLHWIr59biPtrK5pbVbor9h6P
kVjsvu+UHbDAf/wDqOPRfvkvwP3tTc2t5Q1XqvULtKop3HmntQReKED5sZ7h
L6u/QnCgUJOw+65TNp3ALzg2a+xFYH9bY3NrU/eVak+GKungPbzvrgv8PPD3
HJs19hL6h5Pc/kKk2OtvuL4ekGMX3qoSZ0Tw/gy/D8kBCx3mV6fgfm6l11/f
Accw17IV+4i266pEaRa8P8NP9z5ywsYK8ytJePkZKPX1Q/u1+DfRoZ8qUZAI
78/wM/1mOB2Yn/WnPBXzVz339V8t2icW0RNLQP7RXSBn+BmeB86Pjm08/z1E
3J9L9PXv7YMR5dHV812L9+Et8KM7kc/l3+lcK8b9wpd4+WlN9vVXtLtcEsM1
lKCl32FhViVK0j/j95b/tb+nQo+2ML8Gr78FvCpf/98pTmcVI/DKLtf/ADYm
0A+TdYaf5nmw8mAmYpPurr9kT/0t8/UXNdrtpf3X43fh+Xc4cP/xNx74uZ4H
0+Fzf81SjrX/BUgR9HfWYv42kPsK+v7BtfqdznO1P2OE2ceTzzC///aX6sl/
LdgCl9PG5q+SfoT5P05i/t21M8uP5ySro6nw2cdTTwP7aW3QX9de08WQltN6
5Vfpd2H+9VbMPyn9uIv7HSfLj/cDDMsPZh9bA/rh+AvrP9R2RxeX04rorisO
+9KDmTeYX1qNlHbX2e1H4H2ZO7a3CvgpXv/D2ceq8MB+yvO2xpbW9r7a7oz6
cloBzXVl4XRNopgHk49dTuhnZ5Y+wfPPMZ/w47sGj+aWQP5HwgL7k59Cf2FV
bXcjUk4r899oX2ocuV7Crv/yw8knziPo5+Z0Z2N+p7NEdMKPn2T7Pg34/xh/
Etjf9BaWn79ia7tr+sr63yJX53e5/j+73bEwE277Gys//AJ2bXfdqFmuB+NI
9gk/fpLn+h3on/4nsB+rv9GU2u7K3jrWW8TpPF6VLi/u250f28cJtqeYn5dH
B+W/tDwqz+XK5Z3wZ7knN4jQH7j9RMdfaPtT211FraDD/F8Vv+VjuN2182o6
3PZ0sgnz09521xWVxBe/283jn/DjI/uNsNP9PRWdtdDfRq3uqqI+Lym5wh7E
L+8J9u2tu8sPbE/Fv3nz39bR0K+aCJB//Bvszso/tQbbftW11/dUUYnpZcwj
+8cr+uayn7YJB1nv7iw/tD1VRbr9Zd11re0N/Y3CAH73N/g6ff2aN9AvSsf9
SBPub6VXUlOaariWxQHj1fgj9wj7/9oChcH2dDze629urerO7w/gxz9A4uvX
o/v/pdm4vyEL7z/k1VZS6wdS2/tUeZyrGYkRdgn7t7cI0G+O8paf5tbqniJ6
AL/7Axh++TckQr8sB/eTH+D+x4mV1EpGWE4pJxc0ZUeXuj/U7sT9kZh/9JW/
v5QZwI9/g52vX/x0JFlG6XuJ+3Of4/6ozEpqaf/T0nxmIfeyW1BsddBPcPtf
+/tLkAB+7ACeY8nXzyDA/NcSPO1Ppaf/2VVJLaeVMIoH8jmXq/eQvtBPRCf2
3/r6B/8aSVZm9r7A/YxG3N9Kg/5qTgkb+lu1lynf+vQ1fuwDGO9/86u/oPyL
k6Q5Z+d/71PEpe7PSjW7/R++xI99AOb9r8fbn84H3van1+vvRv0I9Hfroi+1
H/STHNaBz/j96xxe/p3bEcfb/45Ib/vvHf/Wof63qJ88UHTy4OUF4inooB05
ffymAH7/RgP3H20T/Le/yuTBBN/+D9gANjS1+PszuTmiwJKvCYcz3oKSfP1q
P//bQO0n1v4c94P6m+Hv72nv7Pb3FwgzhZfnd7lem9z+vVP8xbRz+4eT5ZST
+8/9/bn8rEv1vzIdORt2PP6Zv0H5SfD1Z7Tm8jTLdp8ShPntBw1ev+UF5peR
/f0p8cnkk/7L24btH8H8/7zk8VufgPwn+fqTa3J5VRrfX3Lnf+dnr3/8VeD8
Rz978eqq8g+Py/IWooD/V69fHWZ6raNI0nj59NLOGtyf4Xe8y+3f8/FPRPn7
WSV01F9WWPLW35/Du8zyk6ePMs18erTq8WuAX/JqKAv6+5pB/7OHXJfLS5fM
7vr7j1wbHyO3CZtuv/6vwP7ezu7uBo+/CPgLRdnCrf3LKkDJI69NecvhKx7/
BCg//UR5Nhf4+6G/m1Sby0uTFBv8/Tuu3n2C1y8mGqK8fnY+4i4/Hc1gCOz1
s6A/RySwXUYfenLZ5Uoafm16PO3jnwX1d+Bx/wsOKP/FpKaWJjr0Z0he++w8
g/59R+w+YYew5PYrHpjfeP3CUtzfWt/c7M1/BT+P/bozW1Q+cnE96EdJsPz/
5eufQrdfDQSY/7hHsPxDf7okWenv3zsiwPzPEtzt5wv/8oN42s+WY9svQnmW
MEN8cf3RURHoh5Bw/56PX0umvRgsBfknd/e+zMH8ZJW/33oUuk/YICy5/ROv
Bh/ifmFO7V9ISX/pSf/TqjLR684sYeqgbevirwDuz4D5fwL9Oz5+ZYI8G8kA
5b+lpvYhKXD+RUdh+4Q1wiYBb/+5RK+/JAwpYVSe9IcVZjKKBrOEmeJ+68X9
JYjD6fFv+pUfeVbFA9D+NEXFZteTanO4aeJk5aFn2Af9rCMi7HBvesqP8m/c
z8vuJSEl8PMLuL/W7ad0PSwvFGUJ08V5iiPH4YXGkaZxv/z7+8VplQ9h+x/9
poVBqi0UZsmP558Gy/8OLEFuvyUO94sKRGVISVOqr78C9VcJHlbA9j9dTL5w
DXhJKQlUfvD+JzMDbn9r6mqp0J99wt+N1V9P/+eFKcbr5xYhJelhfv5e6H/L
zkTg9jdDnHrhPvTfiSXI+gePf++Yf/At9Hf3VIL2/1X78/5kJWvK10/1+uf/
hH5v+9/xErb/Jf/4+hsQrP0vFWH+dJlwjjl5EX9DVwkinvb4d4/5uZ7+D6mW
UEpoSFbe9+zFhf5etz9A+1lO4BQiJfD8+eP5x/s/6eI06TPe/a88HmBH9+G1
95cgVaDDfoqfk0sr6a5raoH+qI6XtGQlcdDXX4X7lx+Mhvv6xRldr2H7z6rz
9f+dV4H689iYP1XylPeAbb/AVriuowRJF5zq5+Yh5Xj+i0Sw/Cd5jmJAf4bX
ryf4+iUZg4XQD8//9/ojKBV++c+QZSgyTp7Ee+44/FT/OT/c/4/5C4RZsqSR
eBPe4EF/krf8TD6a/Ns3/yIwyGIU+W5/a7szG8tppW5/piBdnD2cOpSqPNt4
WizonI4Jc31nMZIz6Od/7+dvpuB+2P5TNDF63/y/9OT/4fwTXz9s/zkF7Ap/
fyPT688Tp4tjBsjyZMXc3tcUoK4/HPb+1vquYkaW6Ax/JhHzY/1niibW0wOF
/khv+fHWX0US9PPh8fdyf391n7f+Qj+xiSInDVdZvtzvtLeBwUdjaX1XFeeY
fx31W2Iwf+k/vv6nnFgDc8Xrv3/o9k+He/3qFNxfF+X1w+Mv4AGC+190pYuf
9FCGSMPxI9go6stCnOlwdDeA8nM8/8uo3/gK8zPK8PID/YTuWMM9lddP+OT2
jxMC5T+H4J9/3/EjoSodtP/Qn/RVNUCWL2tndNZ3/lWaJUoaeWV8MoX6d935
Fz/A/APVvv5/eLGGu1of/yHhI+qfCUeP36F++u+4v+GN19/eD/2ZjcUMzP+6
N20wSwHLT5Jy8wi0JV/0DnxYEaUX3AflpzM8N0tEUkWN/jWD+ndA+YfHj/hE
zA+Pf3n9KaD8x1j9/B885X/8CebvDcP97Eqvv6we+pPLyliYP1+SKU2VQH+y
cmB2Ze/Lsi9PFGek/pz0rLYjtSNLlKqNsTyddef/PWHloe2p+u/j21/gl5LV
sYbX4z7+T+AFo/7I2T+UYZhfHI1+/shTfztroP95PPSTK6q5mD9XnDsEViiD
/r85iV/SE3K6nKxfxBkV/5Cet/RWc7NEr0RPlY/GPe3/bIS3/vr7k0ZiDc/H
HF7/AfgVtP0HfpXbr0nF/Vj7T21uB/5XSTVdldTUalIL3v7HIOnStGHov0f/
haHdPPf+IIfLORI9mEEraK1o7i1lZomIPQQ+Qe3xw+O/o1Hu+uvrlyQD/4sx
98EadACMb7+A3+ouP0oSXn6w8SO1qQP4q5pruqqoKVXEbHz7S6xPk6YpkhVJ
yujhV8o/hs7Zj0CX0qcOZnCraG2kPNj+/Ml8JI0wRqy693/awnzan2P+GP2L
MZ/y43LXX+if/nv8hfv8JR9/T2VBMsx/e18LDfqfV+D7f/7qAv03Rqo6cYRs
SLOEiN3nLX827O9cTnXCYAazpKvucWwJAuqvMmr0yZTHvxQZqP+JjR9jDS/H
jgLnf/LpOH7+sF/+435va2wG7Wd1ZyXwlzHx/GdI0qSEVpj/ePUbTZzxHEf0
0O9Cele+N6pOEKUjxZ21acUlSKYwRR1jcbc/sPwsu/f/D6Z5/dj2K1mZYH49
UT7v8Yv8/LD86OP9/czmt6ltjY1Nde2vMqC/igP9JeIsMBxKk75g/U5PAZu8
hxzyWOXoeUqPwzh/Z7lenSDJgvlvpZYgOeKkYU/7v+fOP/TLM076X6mfmX4y
evylJ/zqWH9/a0FfS1tja1t9xx9J0I8dP0phZgnTBtOk6SNhPbHyeHUY86X6
B+Tj59+Bw73YBcJkrCpengf9zT0lSIEMHb9MhXv2H0ZOovsfRjKhv6uusbWy
m+wuP+GcMClx3In7C/38lufG6MHn0C9K57v3v6X+3tvU1tjVXd+RXwf9WP8/
sjpHlAHGL6mKmMHw/nj1S0U49ydk+L3d6Tz97A6nS253bf2w9OfYU10yIwb6
a9tLkFgauv9qKmzB459+ZnqtJVHJ0N9Z29nS0E9G9x8mKyN5EfJXcy5//6bb
b31ljOY8g35pDj+H/xb6M5501LQ2FBTVd6DnD1TB8WOJ4FEt5ifL0tQP6PHq
JGMk/09p2QwODRgO1+MPru27i4/Gn2uT64hMMLSq7yxBiNXJI1Gmp1MEm8c/
BfyaZEoUD/W3t9T3oX5xsjJa+4/56bQn/yS0/cH94y+N0VyQfxlZks3P4ZVA
fyd4A1sbnr+s76jrwf1F/Ew2Nn6kyMkj8Yp4dbw+SvdaH2XG9H5+uJMUbhpg
q/GvHcZ2xNLv4y95f3U+Bfmvhf6/26H/rynitNu/GGl4YHrN++v1C24u3H9F
6YkrJNfm8HKGkkYSRl9PPBj1+J+iXY4lt1/1yBDFeT6SpEjv/Zub0/oSKe4r
ZzR11Xa3k1Ma2qu7MH8l/2VzySA2fqSA/n+KNl71RptgjjW/MA9s7KN14Mjp
dJ744jW7i7hzZ5sA899HEMP6Ww/9eaIT5X+EYHrdR0h6DctPR9W95shk0H7y
U0H+Y0H7T9BMHrr998EWGN3/ifolBFM077kS5L+WKMgpJCDo/vPuutb61rZG
tP8J/YVMQkkuD88/7L8lqOO0sYYo42vTPxb97uqJc7wdWPeO9SFs54dtwlTY
5CvR35IcpKi/rbajiAH9r/RPbOF7IJU7wL8aOfrI+Er4d0qM8C29NO3F7eTU
BlJtifhxZ6oO+C2PLPkbbv9dsAWD+z8XH9j+GH+q+nPszeBzFYX5pPXNUG5J
DKOCXd5b3dmcmdDe3tBd01Xek1JZQn9SEduRw87kp4tzhlOGkhWJSpL+DRjY
RRkfSv8cK5qrWHp/5Ck54G0AD3YOXK7FjzHrhO2IbYKRYHqqI0nSB0qbSpq6
SlnZYvJI1Bjo/1tB9j8S3hHmImf+Ho3SkmOeIyn00sTIsOj6VlJtCiOsOVb6
Rvdi7NnMvXkn5icSpglr4FeWI5b/nH02/VL9sv+5Ir7qbk1ab2p2KSe3s7y3
orfi6V8tbQ0tDb01/SnVpezwwhJBrigHjL8S+WCoM5KkjBqK170xRhuJwhem
Py0PxsU7SweHdvTTK4eHC3N2F8vicsXpIxcJa8R3BH7kIFGVJM8YqCA/be2q
GMgbShmKmgDlpwJADkH/XxEx+Qw05Mlh4ZUR/SW1CYSKghfJ1RHl8dyw7hjN
c8vTqbC5QwcBi3jwC+uEReK7P5efzf3RGZn5jP1nIuHVH/+8fFzE+4dS3JRD
jQ+Lbuuuzm2k1jNSa8r5qd2FnBxZgSxNFN5MlqQokxRhfYmGeEOU7pkqbPCJ
6Y9x0kL8uGW9DdveioddO2/V+r2fxBHvQQE/JBQ+1EeOxjHSuynRr3I7UjoT
Wl/rn/X/ZQt7QjARFglHhPaI+aejzzRxj8KK/+RUMckEatbdlKY/6guGfufG
Wl9Zn0z/vu4uPwTCfxEchFXC8n32I87jgXDK3ae/V4U9DSfc/vnB7Td1YX/E
p0QVPLr/Ojuf8iKjMaMhraygplJcJMqvi+3OUvxOT9NEDVJMj4T/SJ7rYyaj
5x7oXi38NXlv9JapYf75kR2W/MquT7Js+XPlU3bEMnivtwkRkbZ/DK/zkwrC
44sfVUbkhD8PU4Y//0tBJBBaCHTQoKeHjz+VECWv4/8syWZW9D4h1Oc8TmnI
4mRJkkBH49XoH1OEKY//Lih0RvDziPiSGEd4RHhAjAn7nRB+/x7hfvg/YZHh
4WERBEJYREQ4MSItIjE5LfFJMbdQkPWAkJQpS5GnKsN6SLo4HZERJogefzXx
YuL5NEF5T/l46pmWOGdz2Gm0l4kd6a8Kf8x+mh3eQGgktBJ+C2v4s/zxs6fP
b/+dHBob+iz07p2S+6EP80BjEk1IJHQQ/iJWPsy9W/74xe9vUjLj3hIJca8f
PU/KYL5Qvap8UvmHMHI8ooq25PZHENoJJeDnh/uEe38S7hHD7z8gRhDCiWH3
iaH3iGGhd+78dp94N+S323dD/gp59OzZn6FFddF5L39+/uBlfWbZ89I7TX+X
vaj6XXU368+qqKq/Gn+vfdDyu+5P092ie4yyIVdo6P17offu3yXevX+XcAf8
hII6d+f+nfsgiPfvEe8R76NJJIL/sDm8Bxa4Dxa7S3gClrj3+O69aALhHljm
3rOS+7z78DfLCexHd0L7CXiEgl+CK3hMeA4ehRH8ArwWIrwjEgnE+2AK/NXM
+Ht37xPTCPdfxtwBKy6GK32hJty9f+cVZN35680Twf0u4l1iyt2UT7/cunP7
x5C7v4b9di+E8DPhJ/BDJPx87xewCvCaQomhYDkC8Vew8t/Q13Cb8CPg/HL/
t/B7YJHQsJDQR4Sw0Lthd+8+fHY36c4vxF+IL4jJD375OTY8ggjSHBEZ8Qvx
t4jfiA/CHoU/ArOIkeAtcNvDwiIiwyIjwsLAckT4j3gPvLznD+/cuRvx6v79
yMehYaERL++F3Lv9R07k3bDbT26Hh4bf/uPR49SIuMg7D/4M/b3ibmRYeGQ4
ugL4PwKsnkiA92H3w8D6ifAHrhpNFMgQXCiMEEYMvwPnh90LDwOvMIwYGnYv
5A7xt7CIuxF3f737w53w+z/fuQ3fp5CQkPv3w0PDCKB83LkXcp9I/O1eKNGd
/Hv3bt8m/BZ69+5d4h0i8Q54V4m37xF/vg/WeefnsHuhoaEh90J/AW/Kndv/
Cgm9feeXO/D2t9u//Svk1m+hv/0aGvKftyIjIx9ERkZEwoDZAtPYg3vumVgQ
IyPDIyPvgqnwiEgCITLytwhsRkRI5J3IsF8iQ26FRdyPjAyJDP3pzn+FRvzy
0+2fiBEhYT/e+jGEEP4LMeznOz/dJv4IfvHfd36JdBeiu/d+/jnih1/vhoaC
tUT+9ivI7q27kf8mRt4Ku30rMvTX0Fs//PbrT4TQ+z/d/tePP/x4618//PuH
H3+49fOt//z3//n3D//+1w+3/k/eTz/dAvHrj/CW8NOPv9y69csvcPrW4x/B
vB/R+SDugWVu3XoCpkJ/+iks/NatmB/hjN9/+ukVmHsn6VZU5k/wF6NuPU94
mvvXr6Q3L9Pv/RJ9Oys3I5YYmky8nfI09cXtLOKPtwqfJP94JywMFvs/fqdQ
bhXG/fHP3z+9BmuMD3n+W96ft3JCbuXdfp566/mbp/mFbxKSiP+AjUZaRmF2
XlFBYWFWYSYps7iwpLCwsLgwM/3d7dvgLQ65A29CiLdDQkNCQgnog4IQ+Exo
CBavQkIiQ0LKwdS923fCnoeEsNAZeXfvdYeUhTwbDqHNhoSDhWkhrcLaxapI
LbNr6hUReTK/Ps2J/0v55o/RakvHHwtxt0M+VKhC7gM/eAXFeUZTyJ6opKXp
Tn9IyID4cduDzbchSw9DNp+0jYa0cqve7/Nl8vjmtNk64/T+0rv93f39+f0Z
1Ry4R2Na72pq7QGR3w1v7zZ1vO3pKe+F0z36jvaenm5qDxbCnh6kp8cMpuKa
qP+V0dOzis7Q9fXPg7m8Dz1Lrh4GWHipZ/qd1TWGHKzOuYS0FXgi5LqUsy9h
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
PxtsHZb/HF//Yg5sPxESzH95urf8VJn9/ft2Esz/yintp+zU9pPU26xu1F5c
b7d3ynz8+z5+a424UNsj7emqEQgLWzB/tc8ZV9A/Z084ALV3w1N/NWm4X91C
z5F1wfM/cT/D7c/t61UX85rV9ZqF3Yu/gm63Pxv693z85gpjs6wBln8aPa06
cP41dvIB6Z2n/M8UjpC9/i6KrEvad9JPaW+UdWqa1U3awbnTXeeNLpnT6fFv
+5UfQxM1DbY/JaXNjGp6y0i9tsp85Bn2Qb/cjnY4vH5zHu5XNouqZV3w8wvH
y08tP40K258GbavJ7ji60DjSNtvlm39/v7a+Lx22/yVlA9JqOviThuP5l0D/
B5/t73QZ7te0w/rLqjvp71elU2H736CtuXANKKrtClR+FnKw/o+8EW5/aQy6
CPg1J/0CrP56/ba3uF/bPtIh62og+/qpQujvUjTJ4Pa3UVt34T50XmWXbOuj
x79/zK/phn6+ELb/RdwCcZV5aNHXL/L6V7Ogf6IY9/OKYPvfle/rZ0qx9r9X
jfkbDOoV+fxF/Ai/S6Zd9vg/HPN7+z/VdFIPCakyJ3v24kK/8Hj+ve1nL2kY
5F9C9cu/X/+nQVuvz1Umf+XxAAc64uWIu2R9YMB9in+4VdItoDMHoL+EVyip
MpM8ww7o78f9G2lTFF+/rpFfDNv/IbqvP7+NivrbFJi/TperTFXYL7AVpnO7
ZA3qU/0jbTIqnn/Q5BmrzFVTvv5Gr3+C5O/XdkC/b/tPF6TUUf3y32BoHG0Y
O8t3dhwdMXhdsnp11TF/mtc/TMf9HeomQ+Voue3I6fVXesvPfPpCnm/50YBB
lrTTf/vbxPSWnyZVg7Z5tN5Ud/Ik5HPFmtXpnJ+G/matn3/Xzz9Qi/th+18z
9taz2wb6Cz35B/XX369sHm5XUP39LJnX36Zt0L5V1BirTCv7ZzlPC36WwzHI
Rvid0ibN8fz7lJ8mMuavYcDtb81Y6YSvP83rd9df2H5W4f0fRa+/v3/Q41dB
P5lVa6we7Zv+8grgtHPA4IPZjfD7ho/5t1D/9FvM35Pv688dLp2Qb3r9pCO3
f4ni9Y/V4X56idcPj79QhX0y3F/Ib9BmC6G/HPRDv7wO65qcDj7C4J3I/4Z/
/e11+9H+D0lQOpE05uM/dPtnSd720+TJfwvp9PE7qQ/WX+j33SiePwxteq6U
x+Dl9DRpKkeLJt3+fXf+tWmYX0Hz9ecrgX/8lPy7j9+VSTNwP7PM64fHf/tE
jSxs/2GrslhYr2kyYf5tO2hLvugd+LipaWhPZnYzeJTWJk21pWQqexn1f8D2
v+UoyZgftv9ef+146UTpnJ//o6f8z2LHT8uEZE/59zn/rZcB/VXUXjnmb9c1
6up0mH9oZfPjF2a/UttYF1OZS+fW8Zo0teNvZ3JW3PnfAY35Qs5Ynv/2F/Xr
a0H9LZ718R+CX8H8K5kW7Ph1mbbEc/5br/f8k4Jy6K/pow1j/lZti7FBX2OA
/vzhyi/pCTldTnmstpGaX5M/IOwfadIUqXPN6bOe9mc5ZSFnpjSQv2q0dKJg
xun1fwIvGGv/gZ+C+cfw8w/d7b9oAPqLqmjAX0+rZuPt/1tZg75hFPqTJLEy
6/a5R8PAbyrRNkra2VSWsEfepCELSSOkMY9/lrSQc3z/LVZ+qoG/cMZ9sAbz
e/s/7vM3yszHxo8iFpfJZvez4PHTun5yC779JSP1+nrU/9ZUZM4ynnN/FrqU
FX5CsU/CqW7rAu1PljxdlzKZgu8/WSAv5Eye4fcpPy4f/2L+LNb+VPr6hX3t
VdDPHWRLoL+Aiu//yeHX6/OkdWOVo7UT9dPx2vOeXenccTktFdpGeRefkVna
JQP11wzq72LKuzP6nzXu8SP02735P/Drf2J+7/YLy395hvf4RV1/jxzPf6Ou
Xk9iV5mqzBWW0rHyyXNsA9DTk7apH6csFZoGWSePXt/ZJWtU1469nc7x9h82
UrHyo/H1MzB/xVTxfO+qx6850X+eKPf3ywa66zhM1gCDU9QI/f1o/e3SNoPh
XL2+cChDUjdeYUkbrpnpmzobj4XDtpK4gVgqdM0w/2xRl6xFW2kqsmUvevs/
br+h8aS/yJJni5n0+LtP+C2l/n52+yCovxwuws2qgn6s/a+Tw/0P9foGM0VQ
aqiwkGVFlteyT58fCx/tl66S5kvN5cZW6GcJu2Tthio4flmk+Jcfc4UZ9fPp
CLtPgJcfioKiJ886cX+Hn38aHr8rgH54/AXb/1aXIWRymHD/fxsD+rH+f2p/
i6ZRC+vvW23KYIWl0EgZjpGZdh1nNUJOl9Hh2n29njWTM14tLYV+2P8vlWB+
8pp3/1WurXi8WlQD/Tw6l42IcX/qSIqhaMXl78f3P8wVTZYM50I/PP6l7Ib+
xmwejYN0dGLnD0B/x1C3KoOO+WsM9eNpkgpL1WSqMlvfs3x20XFlHrj2ktbS
Z/Ot1XSyvEvAgP1nEq1qtMSWs0haOOavLVFCP40zwED99cBfMl4wlbvk8VeD
FtTrh/vPh/NRfzP8/BH087v5dDZSUIRwGUK3X96lbFJg48daY425wlRhKbeW
jBdPlExhafZ7D+A7AptWWL1f7Uv3UtYyZguVOfxckH869OdxMT950e1fS51I
sxWP5BQXjrRKe8RgCFDWUQP6/y3GylFQf+dSbR5/Lth+fSCtu/2WjIkSBfCb
GkR5Iy2cQlmnuFfGFNAE3Jo6vP3plvUpiwZg/YXjx1rQ/68bL7eUjVdMlU4V
Tg+9x3ZK24H6RGWwu8j7iXskkP+CQZKuCZYf6G/VeMo/vv9hlGQrHiRVFcPy
w+1LZqVUo/nXYu0naWzhyO1PRvOP7//UkSZLRvLB9quGTlK3dJLQ9rNPAPLP
4cDzD/H8k7rw8TvW/6kYKwMdq5LJYlve9MT+uxPneDuw7t3QR8r+6z3SEnmh
SJ2nb5F1DnJo3E5pG/RPZC9QPqL9tx3Su9SpjMkidX5dqbpH2lNfGF9Vx6yh
d2kzeXXWMuBPn2577/YngS3YFuhyr6UuZM7kWrJnSjUFllpZNqfM1NpVKqUq
YP+H1VTB5SECOp8qrOvrkmRTy3gtiiZlg7ZltM4I2/+aiVIwsCuZTNNnzXSs
Ujd27Z6S43TCL/L48MnlWv/09j1pL2WPZCPZcserdQ1DPaxuJr9nqElbM1oy
A/rPcyD/h8C/krqcN1VirXlbIKuT9lSkkt8yODX0OhlloFQP/blLSatOzE8m
LaH7PzdSNjKX8xaLLIXiAlN5fxK9QVTf3DvcyusVUYW9udlsDsJiCmniOlqP
IqWzW9WqaQXjr0plHSj/oFIZyq1lkyU2srrQljWTOqv9sP7pyIHu3D06Wltx
uOTTLlf5RMo6aYu8TVKmasnmKkPjELU2l8OnKlqNtcaSOVB+qABiB+k0pszn
2t6OVVMofSniblo5idpeWE1LoZYPUwRvxwqncxfJy0cOEhbl4Bfek9bI21kb
eavZ/NSmPEVWZXJRZn5hZpcyv6aD1SwqI5dwBbQWpgiRAr+yTtAx3GpoN9Sr
U1g1+jpLpZEyWDlZPlFszbNQNNm2zNnqtfLZmS0OWnBculHXh66xiY8x2pRd
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
GaZRwStEH/XRe+is/j44g8ak9lJpCLOPyeyjU8EjsEQvvY/FxP19fazefgCF
q+vvB9mlMli9TBaVSaOy6P303t7+fip4bVRaD1gRtae3txfc91G7e7vBZE8v
tVvZR4XRj94ifXCiD5vFpvoGA12GC6bofVQmk0odRGewqX0CKodKl1JFw319
YIaIypfwRrj9MrFAwegT0YaVikEmTYb0y3lgQz2MUKkqroyKvnkIwmHL5VSV
mMPnU4VgjRIav1/JoY7QqEqaYIjKF/OUarFEivDBRmNIoR5WqlVq9bBaIRtW
qzVqGArFRxoadPQWQSfA2wxDRfMNAY3GotG0YAoWFD6NZkNnKGkMC01D4y3S
JrZB4aTRJmijs/odHWvZZtkSMia5O/tb0xLu8uDAun7DwtkR02iHumUaA/Or
VGtrtMNZlclEt9JoU3Ps0YF9NW13gLbPNa/TRqd1B0cz8wvi0aFtw9rW0e7H
o09HRztHW0vb4B6NrVXXqNkKQjUGb+mjFq0VbNDhtHVtzGK1YpMgZq1Wm9W6
AabEJmuPwmr9gM5YtU5sW9etM4fWPZd1Ejy7Z33/cdO1aTv6sO2am9ibBhvI
/YXpo3mbY9O5PeWat1pdm0djgp4eRh9CW1tzOKyuj2tbW9ZdsMaDqfc217rV
ZbP+/+2dX4jcxh3HZ1dareyWewitqVNKi8E9KIaWNmDwU0gxLhgOCqY96D3U
T30oBNqHhvZwweCAwSXFJA+hARODk/TB3ENJi2viBJwXg7nSEpe2Ka6hdhNM
6tw1lztpb3f16/zmjzTSjLSj/SOdzH5HOxqN5s/nZkc/zWglHdzbHL6/ufOI
TmbD3v3ND+Fj9Y5o5VrWINplozl+w/G7u9EmQPwAkPku6n/24FqJ33S0US5G
3Ll2jdqBtw0JIrnwLWVnxMX2RXJDpuS3ejxkzCMmmZ8CPNiakP9/D/59/Y54
vE3jhxx+MPHTIHv8Zsj8CAM8bFQkEgEPxnHsZ2axxepgPm5hDSwNVseKxhpp
7Nv//f2nGDtkiXmKoawf2AZrXx6bmvaqfxSZnWCGZVehOX+9mvPXq4bztxvO
3204f9P7T9P5zzWcH+b8tSpoOH/UcP6m9585f72a89erOX+9mvPXqzl/vQLw
60aYSM1v/7oJJhPA6boRJhJAv26EiQQN70AAu3UjTCSAQd0IE6n5/WfOX6fm
/PVqzl+v5vz1as5fr+b89WrOX6/m/PVqzl+v5vz1as5fr+b89WrOX68ea37H
qQ5kTBXydzrVgYypx7r/eG51IGOqkP+tS9WBjKlC/k/2ft8q5D/RcH4SVMYx
ror5G97+ycMBnlcFzBh6rNtf8vt79x4by/Y/fLgClnFkyX/7dgUs48iK/+TJ
PTtKsuJ/9KiJ/NRmgkwUhlUBlZRV++M//quEprys+Pv9JvJ/azHpP03k/3C9
2fx/AgJ8Bt9M/s9TftcViZrH75Fes/uPQ9t//36RqIH8LuV/4w2RqFn8Lfr5
Gu09Ym/j+Lv08+cG87M96IJAJGoof0Pb/5fCevK9XuP4gTS7/VP8fsy/B+fx
Zv6QHFHa/0jj2j8i7yn87zWOH6Sje91T7B1KOJI7dapyvlEaze/w12jhSHpr
q3K+Ucrj70l+OonvQWyHKqYbrdHtv8DferawgPPgyvmk8kyfid9P8a9x/rU1
36+Dv128e2T7fx2kMHF7RHHTV7d490j+v6b4uyOKm5mWl83xJv5llR/Ef7cL
guXlGo/f7W1zvIl/O8Ufa3u7Dv5zfJVXNbOQ2TiVv5f6G86dmyWrEZCv8kyH
qf375vbv9+sYRwBhlnOQ85igiWhg5h8MquXnpi6QnOZElOibWhy6tsbPj+KZ
4Wripi6SnOZElOnvWhy6rpE/muWrMM2A5AecM2d3qku4xCWZ4zcrHIe6Fd6X
AkRcQsjZneJvs05XyI9n4GrOwuc5ICkcOqKFTMd0OflrOfwzRU6jCb/POXMS
pZCeoE60fz+H/wmaAj+zl+QfcM6cRCn+N6kT/D/M4X+TpsDP7BXEnZnY8mPi
p4r7Px4B1YxDI2ZBS/O/P4q/261mHCr7DzV5rmvHH1AnyP0cfjyDVXMWi/nb
bfzKcxJp7Q+j2n/28+CugLlAtP6T/eJVfm45e6P4L1zAz2z/AhKTU/9zVFNs
f/ktzFZ+wo//wgDA901z+D3I3yZHBQxa0BiC7zx6NJ//qB1/EMx2HOqRu4I/
Il6W/+7dfP67dvz8he2z40dyl5xO+k8QYJOdptLtqMqv0Rf3n9kNQoG0xCSQ
JBD4nxxarSnyt2ZE/wLZjWFeSEMQspt5XY7Kv1uGnxriGZ2DseIDKgzXLtWB
A1Ns/wOzwWcVX9cn4QOq69ct+X3hF/FfnxF/oIAEeiPm8bfLtf+xY3BsNjOx
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
/g8+YyBc
"], "Byte", ColorSpace -> "RGB", ImageResolution -> 1000, Interleaving -> False],ImageSize->{32,32}];


Format[ChemSpectrum[data_List]]:=
	RawBoxes@BoxForm`ArrangeSummaryBox[
		"ChemSpectrum",
		ChemSpectrum[data],
		$specIcon,
		{
			BoxForm`MakeSummaryItem[{"Points: ",Length@data},StandardForm]
			},
		{
			BoxForm`MakeSummaryItem[
				{"Scanning Range: ",Round[MinMax@data[[All,1]],.001]},
				StandardForm],
			BoxForm`MakeSummaryItem[
				{"Intensity Range: ",Round[MinMax@data[[All,2]],.001]},
				StandardForm]
			},
		StandardForm
		];


(*specPlot=
waterSpec//
ChemSpectrumPlotDiscrete[#,
Axes\[Rule]{True,False},
Ticks\[Rule]None,
ImageSize\[Rule]{500,Automatic},
PlotStyle\[Rule]AbsoluteThickness[4],
ColorRules\[Rule]{
{2,___}\[Rule]Hue[.35],
{3,___}\[Rule]Purple,
{4,___}\[Rule]Red
},
PlotRangePadding\[Rule]None,
ImageMargins\[Rule]None
]&*)


(*Image[
specPlot//
ImageResize[
ColorReplace[
Rasterize[#,"Image",ImageResolution\[Rule]1000],
White\[Rule]RGBColor[1,1,1,0]
],
{100,100}
]&,
ImageSize\[Rule]{32,32}
]*)


$discSpecIcon=Image[Image[CompressedData["
1:eJzt3QdcE2neB/AJ2G773Xvvnev63u7efd5bV9e266q379obFkSRoiJiAQQL
CEgRUJrSQQQBpZMeIECkShGlSVFBrKDbQBHLrlQVkszzPs9MEiYBAkKyd3uX
+UgSJjPz5T/zZPJM/PHw6R5bfUstDMMcJsEb/d3Oy+ztdx/d8gH8xtDGwXqf
jYX5WpsjFvss7Bfu0YYzx8Evc8kXGPUkBvwfAD769TWGxtAYbzrhclv8rdYh
BsURQKReQwSSzYFQ3QbHRv0G+6DG0BgaQ2OoyhAJ1W2IQf1luHk1G7UF6jeu
FmoMjaExNIbG0Bj/Kob4VzCA+g1x/iu0LbUaogMv1G84t6vfcPw1jBe42o0j
3eqqQ7a60PX2dwAXD2fIHopHgQk9L6DuJ676OoTNskceFy8BvLFTmYGDlrPE
bBx0sEYowEUT+43iEgCO3AMsZUaTk8R4cmjERqfsxyEN9yblxoNjEuOpy8gN
przhNpzhLjWc3sAQ42o3GNQ6xLg6jA7u3XZyE9C4CICrGox2gdt1cmNCj6Ky
7zuPq8PIPNEgNQrqd5cEDtN2R2d43+g3LC8TBt5LNdKVGsOeAhQNC2RkfVoJ
+igGq2loQwRi64Y5cw1q5PwxrUEkM3AQ36jMOFk+GkMwNeYYoBgJSo3AytEY
BR/F+o3cCBiVcWpK7El1G8smx6nd0JEaIvUZa0ijQLrIUAY+duPiqx/RttVZ
R21ZGxs9MbTxY9/YjSdpSg0Xh8cAFwG/y2MxnqYqN1zaCOPSWIzWYQznMRir
/4yMmivxjDcw8CGhQY0Nn8QQRgR9bHVIOgpUQ0QajWDL59G+yIii4yM1cNBa
M3wdYvD6mMTQn0YakSPfV2JQ5jVg03f6BtSRa1heZ3E5qElqVMaExgHlBuqB
S4yqIAVDBPZzJItKjJeNIFWvos6i1O+WzIj1d1dmODs/RluSGFcCBhimhsRn
6hJDBBrWgNRNFXXmZScug81SI8AHHTkF4xhxqsTB80OHOzN+wJUZOwlDjEuM
mxsIw7IgowdskRnexNJDGAdtX3lfAxIDrxjE2AENtPALibF+CON1m9Qgv5oo
xsugG1IDXPcf3ADgQVtPhnf9ACMSvT4qYpBx6ziIo9bRelxq2Nj1BNSTBo63
JZ0a3CjsKr7dl44McQPF0J8RcAzg1dUJ/tC450kYYlCaS7wOzrkgA16cdhgZ
iPyh4QsNEbhoHEMFcInRBxb/UH2vN927DheC2+sUDHAr0SnMCwcXnEFsI3od
pMURBay3k/wHTM/alcAPGoGEUbbrnDwBF965Q9wLjO5W3elN97oNwLVyPTnD
DVw8E7XzjCcOmIeRIRYDAZ0wjO2R0dULutfrIAN3KkVG6U6qAbrRwd66A95Y
1FdD42R+16tjaYaARzFcAcstYU8ENLh2yAC9IDOZMAztUWc4uBZ0rl8D/OpA
34Yqog6KgYOfQtG1wJq9Dc/AnhvQSAszKTp14oI+OL8p7+o+mZHimbAbGRxo
3AXMeMAnDSPC8K2SGZugIQT5O/oNMah0xmvoYJW1/y1oVCFjZ5Gfy6HtwgPG
569aFmV0kwbP4yxpHMahYe2EDHQgthCGX7XM0KtCuz/TJFYKwH+1ruLiILDS
8vQdfHfD9dt9qad2FgXZLTR7/X8mguqDmZm9yDgKjVO7kMF2BDF3gYMlSE8i
jqWNI2yFFKMXGsJnQLDjdH8d4hp3UBIGVthEc4FlJbupd7+p1YVA++WmwpWm
F8r0UhIDcf3p8ETF9QjbFQ4Nwbfn2bfAYSucz+yB79/4MUdcKMJ9r+DR89aL
/epwXK8Sf+4IBDuPkjUUd8Nyq5zqL4Xi61Y6prRsK/H5/qW+kVV2sP1Ss/Zl
m1nhi7NizOH7R8hhPM0jzOwsfH3kf3KafxscsQKZ6fdMfwEPtvmganyrgfe8
rcD/OmjTqwbP7EGmqSt5uA8/s3t5+9zuXVXhYOuHay4VraoJaOvevH0fP9Rp
2f68r5f7G3wuiD4s1pu7Z01f5PEI8xMbikHW9DO8m8DSWhjDe/j5hd7bZtub
ertf+pe+PvmtWZfrGaH9xgq8xwHk7T0ObFdbOPvqOsw6sG+h7tx1KzwWfLbc
5PC39sYn9eZ/PfeYvdHMf+jMnrtq4WcLDXTWT50552uz+cvWLpk3be2epXPm
G23cvWn2hln2O2asXGO48vM1ut946C9cuWDh8kVfL9yw4KvlunsXbddfvMg+
0tYvIizYzz80MTA0yN/fPzA4IigsIiQq4mRIsH88MyogKCA4ODAoOCA02A8+
CvYLCgoMCQ0J8g8IDgwP9D8XGBAcBZ/19wsOCfT3pYcGBMCnA4KC/OBMP7+Q
k35BvmfAqCcR2D5c72bMk8bQGBpDY2gMjaExNMY/3cB/BQMoGEN/sjPqqfeV
gqHySQiSvcmLS4mBgxfV5O5TWT1CEH1EzhCDah0VlyMEMS4KxjUD8qOm2wUq
soTgnLOCcVUfbVsEEvZQI5LqMdi26jdYhzSGxtAYGuM/2sBVZlDfeX7tOnbk
OPeoyMDr+gY3TAXru1RkiGO7hzDOG6rMYPYMZWwZu0H+EpyYrk5DUge9q79l
qdgQg4uh6KN0cTLlN+FUa4jgWrvRWkL+pXwgCzENb7xJfk0EUg6gtfryAmyB
tPkOaYhHUcerChHgWRNGbrgbED3qVWbg4El1Cvo1Fxy8LB2hgINHi/uNsKMA
JLcRO2FIoyUvlTTa40dstK6TNzhPlBsPCyVGB3OYbVMMHXmDPZxRIDUYw2yb
agh/BQOo3Xi0/idhqpqNh5sYHZlW6jZ4neo3uAMNHKcaO9VggKtXQS/FMGAb
dg5liEHRD8OcuQY3yi8091GMjQwjJQb/3qiMGn6qmGLoMZUZgsZRGdXpgpEb
maM1Mv+dDLxX7YYkDyozahUNfMzGWff2UjL7IDEatqi8jmi/el3UXZEYInBe
V8F4Khqz4XtzG8XoA9u/BSJk8A6QBiu5HX1elnF7mI+alBq3jOUMs0UKBmss
RhVp3JA3dioazLEY1/nQiApI0kezR2jgQx4UibFPRDX6OALCOLf5DYxBN04x
Mg5Q6mgDXe65GciIkTPEyo1fHiitoyNnCwrrv86RGN3eOVKj1YI0OsATB5Ml
Qxs4uJMyYOM/dlOMgqWGcFNXY6JcoPEYdHsRhn/88tqWZVLjkfH2gQbebzQJ
Bvz46c8kmS1k5K/cCzdVERUNDc4zmZGwuOChjtRoNZUaHEodQGY0Zg6oo0pM
qaN4xS64qcpoZEQVgy6pseTiwzVwe6SxQ2IUsvYTRmdC0svqJ7gSo4I8bwtF
6JhbL9ktMxx3gA6ZUQwNMJQRn9iX+h2QGPi9oQw4IWPtYophKmfo9P0sb7RQ
jF7BD1IDfJ8xqIEDFiu3Fe6rjUsUjOx0aPjFLylu2djMBhtJYwdhPCuS7avk
3kxopN9Gebj2kuzBDdxAD6s3YnfoyhvtPqk8AM6cYi6GxiMuaTwx+GolOrXk
57FJoyc0WJwBDf5tlDK7GVok36hkdViavlVnxG7XXWI20GB/s0W3oHlTPR3o
IuOp/t9XI8PnPGHAC7CTXgAZmYRx90whhRBL6oBN+/6aXROh0bNx2aHXYjmD
A+57/ekzwwvN+qXxUuNzwgjKQsYrIXjl64MMnHEXGXciqAZ4/JqsAwfM6fsm
1Blxf1y11uNnOEvOuG7719kG0ChPQEa3+Kn+NMIIRAYQfAdekobIr4mog2KI
QeknzfC2QvygE6TOtpxQZyCIm7/r8CsAaqNDnXBcatxw+GSW1KDvzKns3kQa
AYTBvy8zAppQ5q4uvN8QghCs84fLeCmgN4t5syyQkbDQ3LoCvI6NC3IE4IjE
qLf/H9KIx3XpZqFp3XrTVuPQOJWNjHR5A3YtTxfJDoUQRGt13RWACpzbAriz
D46vN8yEhjkddLkmBro+f3rURGr8eSZhJIMNdLMz9M5N03TQsTZO41pTDSE0
RB2gNjynvw48HOu8l9eZDXzN7vD/95t3aoyjGAssLLmgxzMx+GhB7SlX0OmT
wsXr7ScjY3Ot203DJLMIZuem6Yt6YHNfyCWMJvyCsz+O2lVAI+iig9oI8vfF
xA2v8T7A/aDpbgXbudt6qU7kXyd+UGt1mvH1NlMe+MUj6qR95o0zJ+G5PT0J
NCCjsGVTndXl7cm7IuhdG+Z8yuoCT6cJ0sg6+IeJttsO6+hMggabbLKJPQA8
YSzFb9awjpeuN/zCefof3q90CE9esHV7KqhyCjpikXTj1Alxu/9p74eldh/O
No3K3XrNptQo3iQipXPHvBne14SPpkcHHRICwZ2+TLtjr1l5oiT/e/jrJFAX
xQPR1YyDoU6x1a4mB81ivINtPAK3m35pqTNrsdP+o+7L9UzC4r2OuFof8POy
OnwyzeOI/d5je7ea7nexM/e191povWtvuI/behM3r5OBes6WhwL2OHl6ux8+
5OXi6u/q7BUU7HAm2OM4PaWMHxnNYvEjw3kcDovNTuUw2HGx7OgkHpebknCW
zmOy0SMeh81h8bk8bgqXm8rm8Dg8OPscOyWJw+LSefBZFpeXwuOeYXDZXC6H
w+Wy4B07iclicVkDT4ojnn6rY1NpDI3x2zX+XcaHK48Hah8fLtWB+kG0eoxM
d/UbGa4aQ2NojP9QQ4V5OKmh3vHhkDFgfDiV5uGkhsL4cCrNw0kNhTEHVJqH
G9JQYR5uWEMFebhhDRXkMjSGxtAYGuO3bOAqM8T/xDoybtu9VJGB1/cNbmTe
WNmtIkMc1z2E0bBRZQarZyhjw9gNSR6OoU5DUgejG1eXIcvD0XvVVQcuzcOJ
uPcfwN02YmM0eThhekk+QOFTpcZo8nDCZmnGS8gvvwjwRy+VGdQ8XNkIBTQ+
XL9RVgwA4xFIV2b05+ESRmx0suQNbqtyoz8PN/Jx7jqZ8gZnOKPgzTN3nUzh
r2AAioHjajE4zZI8HDSKAGCrwehIY0rycEJ+6aXmrhS1GCmdUqPkmn15zkN1
GDyK4VRBGn1UQ6BawxEZeTrfwe/7jZSrukMaYlA8fB5uECN/6bWfqOPDMWuV
GenD5+EGq2P1ZS51zDOWUuP88JmiQYyLq0rTR26MIHM3iBG9spSvViP7IdBb
rn7DSGqI1GcYkoZsfDiJoZiHY+JjN2Tjw0kMxTycCuroHx+OMAbm4ZhkHm5s
hnR8OMKQ5eEKZZki+khzZEoM6fhwEkOSh+s32GMxVpDGY3ljp6Ix4szdIIbB
EmTUVOSx38BQlocjDCIPJzNMDUsII5M1tjpwqkHm4STGI2B1qCgdGQI5Q6zc
UJaHgwaRhxOD3jSJsc9aZrRZkEZXfx5uUAMHdwfm4R7hFKNgqQF8fP10xVVi
X+3bTxrZUeWPlkkNWR6OalDycPcV83BiEJlHHinCyF9h/voBqAyphEZOm8zI
CT/fqiM1ZHm4Qg6lDtCfuVPMkYmA5z6i800axcutG7eDylBoVDMLgKXUiMht
XYM66oQhy6oxB83DDWJ4HyYuOURidMz3L97fuJMwjtT7bAXmMiOnFeXhhjDk
83ADMnci4IX+DhXaW53QWLdof6Op1NgmZ+j0vZA3WigGNQ/3g2L0gzRwQL9y
7Rc+r2OjolGIXh/l2RE5jzY281CfARlku3paxJTPw2WQebhLink4iVH57dnP
G7I4Hbryxt4D52GfoboqPxwaj1JJ44nBPDIPl8+S5uFCiDxcBpmHO6WYhyOM
PrBtLmcWNNp1F1k1DTBuJoTFZD/cdINFGk/1PyMyXiezpHk4X28iDycg83CR
hfIEOuY2eB9wmM2aCY2ejUucb5jJGRxwJyXsaGLWQ/2yJKkxnTCCs6V5OL8T
RB6OSebh5DJ35Phwx2zgkTpBGLwfV60JqNgNKigGG1Seiz6WAI2KZGT0iGWZ
OyJHdv478JI0RP5Nirk+6fhwNg4tHcALGQJB/AIz1/pdoDa0uLbfqImPcpca
NUZ5ld2bqAbKkUmMQDIPJ5e5q3QRPbiMH3TK+UnsNZuJjMR/7HVIsMBjIwqu
2suM6rgI0kjCmTXGYXxk4DIjQ96ArTC8Pw8HuxduwlsCYOtY8BB4zuF9cVOQ
mbhwr42btdgtsuCK9w2vrVIjxI0wmKiOaEbn5s+JPJyiIQwk83ARuf114FUe
4FZel5lHDrvGZ5r/3IbTp1kLzA97WeFeUZdKPOtDjwKLAwIOXh0X6haf9XBz
7bFrqVVGUczOzTOIPFxgFgsZTXiBSwCRh4NGFwPUnmET71Pim6/hHr1jxGkq
z/ybbeIpY/e/Wc+/ERjC+nrbPi+rV56h2Sz7m5EnwL4DOUmgFhpJ2Y821R3I
z6g2jmahPBwbvkyOFPLIOtLtiLbbHngfdCZDg0MWkdzp9rLt4jKD76sypu/x
jHOw/ezw3Kshp+gLjM19bBucTyT77LkZ5oPvsT3r3VoQF3b8bFj+1ut2BfwK
/cikDtN5M3yuCVtckgMOCcH5O32Z9sdRHi454B7eSwd10Skg+YiTX6zL6V3h
Dh6GOwKDbbc4ODpaWOg56rgfdTm+Qm+P8yE/R5djzlY+VrbBq+yOOli4ubq5
ODo7WPg5uru77tq239dtww53b99QJ5d9NoF7nb18jtkd8j7qFuDm4h0Y6R4R
4ulBF/hHMWLZdA4rLoXD43CY3BQWh8flcZlEHu4cPYXL4aHvuWwuKymFx0vh
crnolgeX4nJSknhsMg/H5vFSedxIJpeD8nA8uDicyeSy4GqZ2KgnbYyzBNMa
/foaQ2NojDedaDT1G/KTOgwtbLkNpq1eQxvbGU/8aWi1Glsj1G9si9QYGkNj
/AsYtF/BkH0vMWiqg6TGxN8pGCqcSGMcZuZJViMxaNgH88ndpzV2UGpYBcsZ
WtjCfJWVIzUsAxSMeWnIoGEz147ZkhmBCsbX6Wjb2tieBGqTUI+x7bT6DZMI
jaExNIbG+I82aCoztP+JdbDWB74F71RhaO9+C3UKBhpMvZx3VGSMr/rvIYyN
qSoz8v44lMEfu0Fe9I8vUKchqaPgT1rqMrSwFQ6o3Y4vfFdddWjDtYiL/okZ
61bDjua4YQya1HiTjpw2ZnQGrTWJ5R2KjYczlBpao6hj0iJtzDiKMNhHvTHt
eR9g24c2tLDp7vqoW0/D/st9hAINm1I+Tma4ncCwwi8xE2XGfKYeafylYsTG
h3nyRuYc5cZXsZtIY2ruyI0L8sb5YYx58VLjwhsYE2hqNwowbKvM0KKpw5iS
vej9LdES4ySGZanBmMrNm7X2HGm4e376XsZcNRi81OnrJMZx++gljK/UYfBn
yAyH04uQEUWbQDUYSg35T2pHYIQjQ+eFATaJYmRuS313KEMb81+Gab+5sQq4
LBpPMS6YDG2Mg+/EozHW4qf4GMXIV2okrB+NsRQEJ43cSNwwGsMWhNDVa3yJ
FYMQhrqNbIlBm6A+I5c0gshFZMZ8RUNrzMa+kx8sJvsQEmMOX+V1WLnOyUJr
ywy9LHkjf8bEMRtuMzkUYzzGLsO0qUZu8ccYbRxGNxyL8QVPzkguVTBy/0IY
RmMx5sobdEUjb8zGfueIbDR7hAZtSEhixGgPYjgl57yBMcikRaMY64n384ks
iZEDQunIiM+hjdOSGhPGKzNo2F/XKK3ji1XpO7W0sbe5CkZCDvZhArzcJIzJ
4exLQxva2BbegE3/423iw1rSWFoCz+WYxQN7R6rhfPaG+5RLUuOjFKmh12+g
HrjE2BCrYGhjF83JI0UYy4vj3pqJOTyygwaz34hqYky+IDWmMKWGQRRp5OV9
jF6DEkM3YaCRio2TGYtLor4owuxaoLEw1wYec4lxL2ZyAfxJSYMlMeJMognj
w7KS3x/6gqbEKKEjQ2ucNjJOl0bOyMXskbGgMB3Lkxlxkwvh0grGdolRfvlt
zgpMYtD0BjGYcEG0t5CRWRY5I09qpEEjRGbkv/0J+X4uNRb0G6XvxC2WGtjK
xEENGmZqsm4KL21mRqmCcZoJDZfoe3FT+N9mYIXk8WASxmexEmPK5YvvJiwh
DZrWx95RgxnjaSuL+GAuI31mZmnUFxQjHySnY7SDdmGNcVPSF6SRxvt3fj6P
fqwwxtaz8J6G/aGldVwiNBhG6HJva7M/FdCSGBOwgqroV18y0mcLyk5Py1cw
MOMr39ckfsQ1yyONt1sBHx3C7lSjs0Rzea+7D0uCRrwxMvTvBsgTqF0xtSZi
+T9E9X7JyPh7elH6oiw5Q4AZpv8ESpOmMl1LkPEe9k4zno62/TAFGb+fhL3f
/pIGDa2CLcjY0kg1sCmToFHORDddEX1fMlM2lubf2paGHaEY5zH7+pt4WdJU
luNFaKT8bvw7LYAwHiMDi12N/aHjFS1pKTahfR1RB8XQwpY2/wXe3olf9hFW
9gIanJgbvU+/W5WBWTf7uIQvlBoHq28BZDhBwyzG3532mGow1smMZ7APNx7b
db/fGIc5ggmrj9OaItnfaJW3RyLj6qvnz1NZk2obA1zCvpIah2oekEYJrdDs
7K0M7DHI0JIZSWtlxvP1aPdbP/CVNidoHMAnGMdjjediF2AVL4KEczhxV189
6elKeBfcCjwaszE/FRlZmE11G2E4F2JFZueulGKtIAVdvZNGssyYCI0JUzGr
+xGwPZN9+HFatgAzjHj7Rz8Of2bJ66tdX7Xev9TX1tWa9Dthg6fnrYOC27Rc
QM+g2VY/BuVJUzlWv5jz98RUl8B9VToVdhraUreepdHoG2hB4hfaSUtp2HNd
2oeFNKt72cT/KGqbvAcb7B5gqO+7CgjqygtuA/B8/suHl/Au0eOEycKWcznP
zNKbsSwQdxnbX/UYXEyYwtkFQpi7o69cwp6AvooPsVmimE3R8IW3FmOBn7HE
ZdjHz9dhUy5i1o3nyX11eXLIxPlRorSNHitEYsBu6BH2PVnc/mOZqFvUEmYh
fHWpT7w39/74AtG9nk+Cax6Krjc7nbMUBqVYJ14vnvRY1ArM3/5GdCMs4q1J
CQbvJIt+/iDr1ISSnzdrv1+M7W7gY5UNd38qxCufNaI4aU9nGyUUSU7SP0kF
QLtcRFY6wP5LYuFXj4l53WLpaElwYfyXJvDdY4AXneOnpmawU1mpbAaDxeXy
GAwGm8lkMJgcBrxjMlgcDnyCmMmDsxksJpxNp7PYHPiQDZ/norkcuCIdrc9m
c2QLc3hprFQeix39/3b4M1Q=
"], "Byte", ColorSpace -> "RGB", ImageSize -> {32, 32}, Interleaving -> False],ImageSize->{32,32}];


Format[ChemSpectrum[data_Association]]:=
	RawBoxes@BoxForm`ArrangeSummaryBox[
		"ChemSpectrum",
		ChemSpectrum[data],
		$discSpecIcon,
		{
			BoxForm`MakeSummaryItem[{"Transitions: ",
				Length@Lookup[data,"Frequencies",{}]},StandardForm]
			},
		{
			BoxForm`MakeSummaryItem[
				{"Scanning Range: ",Round[MinMax@Lookup[data,"Frequencies",{-1}],.001]},
				StandardForm],
			BoxForm`MakeSummaryItem[
				{"Intensity Range: ",Round[MinMax@Lookup[data,"Weights",{-1}],.001]},
				StandardForm]
			},
		StandardForm
		];


chemImportOVR[file_]:=
	Replace[
		Cases[
			Import[file,"XML"],
			XMLElement["ExperimentalPlot",h_,{d_}]:>
				{h,ChemSpectrum@Partition[Join@@ImportString[d,"Table"],2]},
			\[Infinity]],
		{d_}:>d
		];


ChemSpectrumImport[
	file:_String?FileExistsQ|_InputStream,
	dType_
	]:=
	Switch[ToLowerCase@dType,
		"ovr",
			chemImportOVR@file,
		"lin",
			$SPCAT;
			ChemSpectrum@spimportLIN@file,
		"par"|"var",
			$SPCAT;
			spimportPAR@file,
		"int",
			$SPCAT;
			spimportINT@file,
		"cat",
			$SPCAT;
			ChemSpectrum@spimportCAT@file,
		"egy",
			$SPCAT;
			spimportEGY@file,
		_,
			Import[file,"Text"]
		];


ChemSpectrumImport[file_String?FileExistsQ]:=
	ChemSpectrumImport[file,FileExtension@file];
ChemSpectrumImport[file_?(!StringMatchQ[#,"/*"|"~/*"]&&Length@URLParse[#]["Path"]>0&)]:=
	With[{tempf=
		First@URLDownload[file,
			FileNameJoin@{
				$TemporaryDirectory,
				FileNameTake[file]
				}
			]},
		With[{d=ChemSpectrumImport@tempf},DeleteFile@tempf;d]
		];


ChemSpectrumImportString[string_String,type_]:=
	If[StringLength@string==0,
		$Failed,
		With[{s=StringToStream@string},
			With[{c=ChemSpectrumImport[s,type]},
				Close@s;
				c
				]
			]
		];


Options[ChemSpectrumPlot]=Options[ListPlot];
ChemSpectrumPlot[
	spectalData_List|ChemSpectrum[spectalData_List],
	ops:OptionsPattern[]]:=
	ListPlot[spectalData,
		FilterRules[
			{ops,
				Joined->True,
				PlotRange->Full,
				AxesOrigin->{Automatic,0},
				ImageSize->{Large,Automatic},
				AspectRatio->Full
				},
			Options@ListPlot]
		];


ChemSpectrumPlot[
	a_Association?(KeyMemberQ["Transitions"])|
		ChemSpectrum[a_Association],
	ops___
	]:=
	ChemSpectrumPlotDiscrete[a,ops];


Options[ChemSpectrumPlotDiscrete]=
	Append[Options@ListLinePlot,ColorRules->{_->Hue[.5,.5,.5]}];
ChemSpectrumPlotDiscrete[
	lines:{__?NumericQ},
	weights:{__?NumericQ}|None:None,
	transitions:{{__Integer}..}|None:None,
	ops:OptionsPattern[]
	]:=
	With[{
		data=
			Table[
				{
					{lines[[i]],0},
					{lines[[i]],
						If[weights===None,
							1,
							weights[[ Mod[i,Length@weights,1] ]]
							]}
					},
				{i,Length@lines}
				],
		coloring=
			If[transitions===None,
				Hue[.5,.5,.5],
				PadRight[
					Flatten@{
						transitions/.Flatten@{OptionValue@ColorRules,{_Integer,___}->Hue[.5,.5,.5]}
						},
					Length@lines,
					Hue[.5,.5,.5]
					]
				]
		},
		ListLinePlot[
			data,
			PlotStyle->
				Replace[OptionValue@PlotStyle,{
					_?(Not@*FreeQ[Automatic])->
						Directive@@@Thread@{Thin,coloring},
					d_?(FreeQ[#,_?ColorQ,\[Infinity]]&):>
						Map[
							Directive@@
							Append[
								Replace[Flatten@{d},Directive[a__]:>a,1],
								#]&,
							coloring
							]
					}],
			FilterRules[{ops,
				Joined->True,
				AxesOrigin->{Automatic,0},
				PlotRange->Full,
				ImageSize->{Large,Automatic},
				AspectRatio->1/3},
				Options@ListLinePlot]
			]
		];
ChemSpectrumPlotDiscrete[
	a_Association|ChemSpectrum[a_Association],
	ops___
	]:=
	ChemSpectrumPlotDiscrete[
		a["Frequencies"],
		Lookup[a,"Weights",None],
		Lookup[a,"Transitions",None],
		ops
		];


Options[ChemSpectrumViewer]=
	DeleteDuplicatesBy[Join[Options@ChemSpectrumPlot,Options@ChemSpectrumPlotDiscrete],First];
ChemSpectrumViewer[
	spectrum_ChemSpectrum,
rangeStart:{
		{_Scaled|_?NumericQ,_Scaled|_?NumericQ},
		{_Scaled|_?NumericQ,_Scaled|_?NumericQ}
		}:{
			{Scaled[.25],Scaled[.75]},
			{0.035,Scaled[1]}
			},
	plotFuntion:ChemSpectrumPlot|ChemSpectrumPlotDiscrete|Automatic:Automatic,
	ops:OptionsPattern[]]:=
	With[{plotF=
		Replace[plotFuntion,
			Automatic:>Switch[First@spectrum,_List,ChemSpectrumPlot,_,ChemSpectrumPlotDiscrete]
			]},
			With[{
				d=Replace[OptionValue@ImageSize,{
					Large|Automatic->{600,600/3},
					Small->{250,250/3},
					e:{_,_}:>e,
					_->{150,150/3}
					}],
				R=Range@spectrum,
				M=MinMax@spectrum},
					With[{
						rMinS=
							Max@{
									Replace[rangeStart[[1,1]],Scaled[s_]:>(First@R+s*((Last@R-First@R)))],
									First@R
									},
						rMaxS=
							Min@{
									Replace[rangeStart[[1,2]],Scaled[s_]:>(First@R+s*((Last@R-First@R)))],
									Last@R
									},
						hMinS=
							Max@{
									Replace[rangeStart[[2,1]],Scaled[s_]:>(First@M+s*((Last@M-First@M)))],
									First@M
									},
						hMaxS=
							Max@{
									Replace[rangeStart[[2,2]],Scaled[s_]:>(First@M+s*((Last@M-First@M)))],
									Last@M
									}
						},
						DynamicModule[
							{rRange,hRange,applyUpdates},
							Panel@
								Grid[{
									{
										Panel[
											Column[
												{
													EventHandler[
														Dynamic[
															applyUpdates;
															plotF[spectrum[rRange,hRange],
																ImageSize->d,
																PlotRange->{rRange,hRange},
																PlotRangePadding->0,
																ops
																],
															SynchronousUpdating->False,
															TrackedSymbols:>{applyUpdates}
															],
														"MouseClicked":>(applyUpdates=RandomReal[])
														],
												EventHandler[
													Grid[{
														{"Scanning Range: ",
															InputField[
																Dynamic[
																	Round[rRange[[1]],.001],
																		rRange[[1]]=Max@{First@R,#};&],
																	Number,
																	Appearance->"Frameless"],
															InputField[
																Dynamic[
																	Round[rRange[[2]],.001],
																		rRange[[2]]=Min@{Last@R,#};&],
																	Number,
																	Appearance->"Frameless"]
																},
														{"Intensity Range: ",
															InputField[
																Dynamic[
																	Round[hRange[[1]],.001],
																		hRange[[1]]=Max@{First@M,#};&],
																	Number,
																	Appearance->"Frameless"],
															InputField[
																Dynamic[
																	Round[hRange[[2]],.001],
																		hRange[[2]]=Min@{Last@M,#};&],
																	Number,
																	Appearance->"Frameless"]}
															},
														Alignment->Left
														],
													"ReturnKeyDown":>(applyUpdates=RandomReal[])
													]
												},
											Dividers->Center
											],
										Background->White
										],
										Control@{
												{hRange,{hMinS,hMaxS},""},First@M,Last@M,
													ImageSize->{25,Last@d},
													ControlType->IntervalSlider,
													ContinuousAction->False,
													Appearance->"Vertical"
												}~EventHandler~{
													"MouseUp":>(applyUpdates=RandomReal[]),
													PassEventsDown->True
													}
													
										},
									{
										Control@{
												{rRange,{rMinS,rMaxS},""},First@R,Last@R,
													ImageSize->{First@d,25},
													ControlType->IntervalSlider,
													ContinuousAction->False
												}~EventHandler~{
													"MouseUp":>(applyUpdates=RandomReal[]),
													PassEventsDown->True
													}
										}
									},
									Alignment->{Left,Top}
									],
							SynchronousInitialization->False,
							SaveDefinitions->False
							]//Deploy
						]
				]
		];


ChemSpectrumLineStore[sym_,pos_,scaling_,spectra_,
	selectFrom:_InterpolatingFunction|_Composition|_Integer:1
	]:=(
		If[MatchQ[sym,_Symbol],sym={}];
		AppendTo[sym,
			Replace[selectFrom,{
				f:(First@*First@*_NearestFunction):>
					f@pos,
				e_:>
					ChemSpectrumNearestPeak[
						Replace[selectFrom,
							i_Integer:>spectra[[i]]
							],
						pos]
				}]
			]
		);
ChemSpectrumLineStore[sym_,
	selectFrom:_Composition|_InterpolatingFunction|_Integer:1][a___]:=
	ChemSpectrumLineStore[sym,a,selectFrom];
ChemSpectrumLineStore~SetAttributes~HoldFirst;


ChemSpectrumLineStore/:
	HoldPattern[Normal@ChemSpectrumLineStore[s_,___]]:=
		s;
ChemSpectrumLineStore/:
	HoldPattern[ChemSpectrum@ChemSpectrumLineStore[s_,___]]:=
		ChemSpectrum@s;
ChemSpectrumLineStore/:
	HoldPattern[ChemSpectrumPlot[ChemSpectrumLineStore[s_,___],ops___]]:=
		ChemSpectrumPlotDiscrete[
			AssociationThread[
				{"Frequencies","Weights","Transitions"},
				Append[Thread[s,List],ConstantArray[{1,0,0,0,0,0},Length@s]]
				],ops];
	


ChemSpectrumLineSelector[
	spectrumA_ChemSpectrum,others___ChemSpectrum,
	selectFunction:
		Except[_ChemSpectrum|_Rule|_RuleDelayed|_String]:
		(Print[#1]&),
	ops:(_Rule|_RuleDelayed)...]:=
With[{spectra=
	With[{pr=Last@First@FilterRules[{ops,PlotRange->All},PlotRange]},
	MapThread[
		Switch[#2,
			{_?NumericQ|-\[Infinity]|_Scaled,_?NumericQ|\[Infinity]|_Scaled},
				#[All,#2],
			_?NumericQ|_Scaled,
				#[All,{#2,\[Infinity]}],
			_,
				#
			]&,
			{
				{spectrumA,others},
				Switch[pr,
						{_?NumericQ|-\[Infinity]|_Scaled,_?NumericQ|\[Infinity]|_Scaled}|Except[_List],
							ConstantArray[pr,Length@{spectrumA,others}],
						_,
							PadRight[
								Take[pr,UpTo[Length@{spectrumA,others}]],
								Length@{spectrumA,others},
								All]
						]
				}]
		]},	
With[{
	plots=
		With[{
			ps=Last@First@FilterRules[{ops,PlotStyle->Automatic},PlotStyle]
			},
			MapThread[
				ChemSpectrumPlot[
					#,
					Sequence@@Join[
						#2,
						FilterRules[{ops},
							DeleteCases[
								Keys@Merge[{
									Options@ChemSpectrumPlot,
									Options@ChemSpectrumPlotDiscrete
									},
									First
									],
								PlotStyle|PlotRange
								]
							]
						]
					]&,
				{
					spectra,
					With[{directives=(_Symbol|_Directive|_Opacity|_Thickness|_RGBColor|_Hue)},
						If[
							TrueQ[
								MatchQ[ps,{(directives|{directives..})..}]&&
								Length@ps==Length@spectra
								],
							Replace[Flatten@{#},
								d:directives|{directives..}:>
									(PlotStyle->d),
								1]&/@ps,
							ConstantArray[{PlotStyle->Flatten@{ps}},
								Length@spectra
								]
							]
						]
					}]
			],
	selF=
		Replace[selectFunction,{
			ChemSpectrumLineStore[s_]:>
				ChemSpectrumLineStore[s,Interpolation@Last@spectra]
			}],
	R=Range@spectrumA,
	S=Subtract@@Reverse@Range@spectrumA,
	M=MinMax/@spectra,
	makeDialog=TrueQ@Last@First@FilterRules[{ops,CreateDialog->True},CreateDialog],
	cachedPoints=
		Last@First@FilterRules[{ops,
			"CachedPoints"->
				Replace[selectFunction,{
					c:ChemSpectrumLineStore[s_,___]:>c,
					_->{}
					}]
				},"CachedPoints"],
	singlePlot=(
		Length@spectra==1||
		TrueQ@Last@First@FilterRules[{ops,Overlay->False},Overlay]
		),
	WH=
		Replace[
			First@FilterRules[{ops,ImageSize->{500,250}},ImageSize],{
			(ImageSize->{w_,h_}):>
				{Replace[w,Except[_Integer]:>500],Replace[h,Except[_Integer]:>250]},
			(ImageSize->w_):>
				{
					Replace[w,Except[_Integer]:>500],
					.5*Replace[w,Except[_Integer]:>500]
					}
			}]},
	(*------------------Display Window--------------------*)
	DynamicModule[{
		raster,update,
		windowWidth=First@WH,
		windowHeight=(Last@WH)*If[singlePlot,1,Length@plots],
		r,m,rOld=0,v,vOld=0,doFast=False,failSize=0.01},
		Panel@
			Grid@{
				{
				DynamicWrapper[
					Dynamic[
						update;
						Overlay[{
							(*------------------Main Graphic--------------------*)
							Graphics[
								Inset[
									raster
									(*ReplaceAll[raster,
										g_Graphics\[RuleDelayed]
											Show[g,
												PlotRange\[Rule]
													ReplacePart[PlotRange@g,
														1->Rescale[{m-r/2,m+r/2},{0,1},R]
														]
												]
										]*),
									Scaled@{.5,0},Scaled@{m,0}],
								PlotRange->
									{
										{0,windowWidth},
										{0,windowHeight}
										},
								ImagePadding->None,
								ImageSize->{windowWidth,windowHeight-25},
								AspectRatio->Full,
								PlotRangePadding->None,
								Background->White
								],
							(*------------------Cursor + Labels--------------------*)
							Graphics[{Thin,Opacity[.5],
								Line@{{.5,(20/windowHeight)},{.5,1}},
								GrayLevel[.3],
								Inset[
									Rescale[m,{0,1},R],
										{.5,0},{Center,Bottom}],
								Inset[
									Rescale[m-r/2,{0,1},R],
									{0,0},{Left,Bottom}],
								Inset[
									Rescale[m+r/2,{0,1},R],
									{1,0},{Right,Bottom}],
								Green,
								Replace[
									Map[
										If[Between[#,Rescale[{m-r/2,m+r/2},{0,1},R]],
											{#,(25/windowHeight)},
											Nothing
											]&,
										Replace[Normal@cachedPoints,{f_,_}:>f,1]
										],{
										l:{__}:>Point@l,
										_:>Nothing
										}
									]
								},
								PlotRange->{{0,1},{0,1}},
								ImageSize->{windowWidth,windowHeight},
								AspectRatio->Full,
								ImagePadding->None,
								ImageMargins->None,
								PlotRangePadding->None
								]
							},
							ImageSize->{windowWidth,windowHeight},
							Alignment->{Center,Top}
							]//Framed[#,
								Background->White,
								FrameStyle->GrayLevel[.75],
								BaseStyle->"Panel"]&,
							TrackedSymbols:>{m,raster}
						],
					(*-----------------Generate Graphic------------------------*)
					raster=
						With[{
							dims={
								windowWidth/r,
								(windowHeight/If[singlePlot,1,Length@plots])-10
								}
							},
							With[{
								baseOps={
									ImageSize->{First@dims,Last@dims},
									AspectRatio->Full,
									ImagePadding->All,
									Ticks->None,
									Background->White,
									Axes->{True,False},
									ImageMargins->None
									}
								},
							With[{graphic=
								If[singlePlot,
									Show[plots,
										Sequence@@baseOps,
										PlotRange->{R,{Min@Append[M[[All,1]],0],Max@M[[All,2]]*v}}
										],
								Column@
									Reverse@MapThread[
										Show[#,
											Sequence@@baseOps,
											PlotRange->{R,{Min@Append[First@#2,0],Last@#2*v}}
											]&,
										{plots,M}
										]
									]
									},
								If[makeDialog,
									SetOptions[EvaluationNotebook[],
										WindowStatusArea->
											TemplateApply["Horizontal Scaling: ``%| Vertical Scaling: ``%",
												100*{r,v}
												]
											]
										];
								(*-----------------Try to rasterize------------------------*)
								If[r<failSize||TrueQ@doFast,
									graphic,
									Quiet[
										With[{g=
											Check[
												Image[
													Rasterize[graphic,"Image"],
													ImageSize->{windowWidth/r,windowHeight}
													],
												graphic
												]},
											If[Length@$MessageList>0,
												failSize=r
												];
											g
											]
										]
									]
								]
								]
							],
							TrackedSymbols:>{r,v,doFast}
						]//
				(*-----------------Plot EventHandler------------------------*)
				EventHandler[#,
					"MouseClicked":>
						If[SelectionMove[EvaluationBox[],All,Expression];
							CurrentValue@"ShiftKey",
							doFast=True;
							If[CurrentValue@"MouseClickCount">1,
								CreateDialog[
									raster/.g_Graphics:>
										With[{pr=PlotRange@g},
											Show[g,
												ImageSize->
													{windowWidth,windowHeight/If[singlePlot,1,Length@plots]},
												PlotRange->{
													Rescale[{m-r/2,m+r/2},{0,1},First@pr],
													Last@pr
													}]
											],
									WindowMargins->
										{{#,Automatic},{Automatic,#2}}&@@CurrentValue["MousePosition"],
									Selectable->True,
									WindowClickSelect->True,
									ShowSelection->True,
									Editable->False,
									Deployed->False,
									ShowCellBracket->True
									]
								];
							]
					]&,
			EventHandler[
				Control@{
					{v,1},1,.0001,.01,
						ControlType->VerticalSlider,(*
						ImageSize\[Rule]windowHeight,*)
						ContinuousAction->True
						},
				{
					"MouseDown":>(doFast=True),
					"MouseUp":>(doFast=False),
					PassEventsDown->True
					}
				]
				},
		{
			EventHandler[
				Control@{
					{r,1},1,.0001,.01,
					ControlType->Slider,
					ContinuousAction->True,
					ImageSize->windowWidth
					},
				{
					"MouseDown":>(doFast=True),
					"MouseUp":>(doFast=False),
					PassEventsDown->True
					}
				]},
		{
			Control@{
				{m,Replace[m,Except[_?NumericQ]:>.5]},
				0,1,
				ControlType->Slider,
				ContinuousAction->True,
				ImageSize->windowWidth
				}
			}
		}//
		EventHandler[Deploy@#,
			With[{scalingFactor=
				(Which[
					CurrentValue@"CommandKey",
						10,
					CurrentValue@"OptionKey",
						1000,
					True,
						100])&},
			{
				"RightArrowKeyDown":>
					If[TrueQ@CurrentValue["ShiftKey"],
						doFast=True;
						(r=Max@{.001,r-1/scalingFactor[]}),
						(doFast=False);
						(m=Min@{1,m+r/scalingFactor[]})
						],
				"LeftArrowKeyDown":>
					If[TrueQ@CurrentValue["ShiftKey"],
						doFast=True;
						(r=Min@{1,r+1/scalingFactor[]}),
						(doFast=False);
						(m=Max@{0,
							m-(r/scalingFactor[])})
						],
				"UpArrowKeyDown":>
					If[TrueQ@CurrentValue["ShiftKey"],
						doFast=True;
						v=Max@{0.0001,v-(1/scalingFactor[])},
						(doFast=False);
						],
				"DownArrowKeyDown":>
					If[TrueQ@CurrentValue["ShiftKey"],
						doFast=True;
						(v=Min@{1,v+(1/scalingFactor[])}),
						(doFast=False);
						],
				"ReturnKeyDown":>(
					selF[Rescale[m,{0,1},R],m,{spectrumA,others}];
					update=RandomReal[]
					),
				{"MenuCommand","HandleShiftReturn"}:>
					(doFast=True;)
				}
				]
				]&
		]//If[makeDialog,
			CreateDialog[#,
				Sequence@@FilterRules[{ops},Options@CreateDialog],
				Selectable->True,
				Editable->False,
				Deployed->False,
				ShowSelection->False,
				WindowElements->{"StatusArea"},
				NotebookEventActions->{
					"UpArrowKeyDown":>Null,
					"DownArrowKeyDown":>Null,
					PassEventsUp->False
					}
				],
			#
			]&
	]
	]


ChemSpectrumSelect[data_List|ChemSpectrum[data_List],
	pat:{rangePat_,intensityPat_}]:=
	ChemSpectrum@Cases[data,pat];
ChemSpectrumSelect[
	data_Association?(KeyMemberQ["Frequencies"])|
	ChemSpectrum[data_Association?(KeyMemberQ["Frequencies"])],
	pat:{rangePat_,intensityPat_}]:=
	With[{frps=Replace[Position[data["Frequencies"],rangePat],{p__}:>Join[p]]},
		With[{sel=
			If[KeyMemberQ[data,"Weights"],
				Intersection[frps,
					Replace[
						Position[data["Weights"],intensityPat],
						{p__}:>Join[p]
						]
					],
				frps]},
			ChemSpectrum@ReplacePart[data,{
				"Frequencies"->data["Frequencies"][[sel]],
				"Weights"->
					If[KeyMemberQ[data,"Weights"],
						data["Weights"][[sel]],
						None],
				"Transitions"->
					If[KeyMemberQ[data,"Transitions"],
						data["Transitions"][[sel]],
						None]
				}]
			]
		];
ChemSpectrumSelect[pat_][data_]:=
	ChemSpectrumSelect[data,pat];


ChemSpectrumZoom[
	data_,
	{
		{rMin:_?NumericQ|_Scaled|-\[Infinity]|\[Infinity],rMax:_?NumericQ|_Scaled|-\[Infinity]|\[Infinity]},
		{iMin:_?NumericQ|_Scaled|-\[Infinity]|\[Infinity],iMax:_?NumericQ|_Scaled|-\[Infinity]|\[Infinity]}
		}
	]:=
	With[{
		rminR=
			Replace[rMin,
				Scaled[f_]:>
					Rescale[f,
						{0,1},
						Switch[data,
							_ChemSpectrum,
								Range@data,
							_List,
								MinMax@data[[All,1]],
							_Association,
								MinMax@data["Frequencies"]
							]
						]
					],
		rmaxR=
			Replace[rMax,
				Scaled[f_]:>
					Rescale[f,
						{0,1},
						Switch[data,
							_ChemSpectrum,
								Range@data,
							_List,
								MinMax@data[[All,1]],
							_Association,
								MinMax@data["Frequencies"]
							]
						]
					],
		iminR=
			Replace[iMin,
				Scaled[f_]:>
					Rescale[f,
						{0,1},
						Switch[data,
							_ChemSpectrum,
								MinMax@data,
							_List,
								MinMax@data[[All,2]],
							_Association,
								MinMax@data["Weights"]
							]
						]
					],
		imaxR=
			Replace[iMax,
				Scaled[f_]:>
					Rescale[f,
						{0,1},
						Switch[data,
							_ChemSpectrum,
								MinMax@data,
							_List,
								MinMax@data[[All,2]],
							_Association,
								MinMax@data["Weights"]
							]
						]
					]
		},
	ChemSpectrumSelect[data,
		{
			_?(Between[{rminR,rmaxR}]),
			_?(Between[{iminR,imaxR}])}
		]
	];
ChemSpectrumZoom[data_,{All,{iMin_,iMax_}}]:=
	ChemSpectrumZoom[data,{{-\[Infinity],\[Infinity]},{iMin,iMax}}];
ChemSpectrumZoom[data_,{{rMin_,rMax_},All}]:=
	ChemSpectrumZoom[data,{{rMin,rMax},{-\[Infinity],\[Infinity]}}];
ChemSpectrumZoom[data_,{rMin:_?NumericQ|_Scaled|-\[Infinity],rMax:_?NumericQ|_Scaled|\[Infinity]}]:=
	ChemSpectrumZoom[data,{{rMin,rMax},{-\[Infinity],\[Infinity]}}];
ChemSpectrumZoom[data_,{All,i:_?NumericQ|_Scaled}]:=
	data[All,{i,\[Infinity]}];


ChemSpectrumZoom[range_][data_]:=
	ChemSpectrumZoom[data,range];


ChemSpectrumSelectAbove[data_,threshold_?NumericQ]:=
	ChemSpectrumSelect[data,{_,_?(NumericQ@#&&#>threshold&)}];
ChemSpectrumSelectAbove[threshold_][data_]:=
	ChemSpectrumSelectAbove[data,threshold];
ChemSpectrumSelectBelow[data_,threshold_?NumericQ]:=
	ChemSpectrumSelect[data,{_,_?(NumericQ@#&&#<threshold&)}];
ChemSpectrumSelectBelow[threshold_][data_]:=
	ChemSpectrumSelectBelow[data,threshold];


Options@ChemSpectrumFindPeaks=Options@FindPeaks;
ChemSpectrumFindPeaks[data_List,params___]:=
	FindPeaks[data,params];
ChemSpectrumFindPeaks[d:ChemSpectrum[_List|_Association],params___]:=
	FindPeaks[Normal@d,params];
ChemSpectrumFindPeaks[d_Association,params___]:=
	FindPeaks[Normal@ChemSpectrum@d,params];


Options@ChemSpectrumNearestPeak=Options@FindMaximum;
ChemSpectrumNearestPeak[
	interp_InterpolatingFunction,wavelength_?NumericQ,
	ops:OptionsPattern[]
	]:=
	Quiet@Block[{peakFindingVar},
		{peakFindingVar/.Last@#,First@#}&@
			FindMaximum[
				{interp[peakFindingVar],Between[peakFindingVar,First@First@interp]},
				{peakFindingVar,wavelength},
				ops]
		];
ChemSpectrumNearestPeak[
	interp_InterpolatingFunction,
	wavelengths_List,
	ops:OptionsPattern[]]:=
	Quiet@Block[{peakFindingVar},
		With[{r=First@First@interp},
			{peakFindingVar/.Last@#,First@#}&@
			FindMaximum[
				{interp[peakFindingVar],Between[peakFindingVar,r]},
				{peakFindingVar,#},
				ops]&/@wavelengths
			]
		];
ChemSpectrumNearestPeak[
	spec:_List|_Association|ChemSpectrum[_List|_Association],
	w_,
	ops:OptionsPattern[]
	]:=
	ChemSpectrumNearestPeak[
		Interpolation@Replace[spec,Except[_ChemSpectrum]:>ChemSpectrum@spec],
		w,
		ops];


ChemSpectrumSmooth[
	data:_List|_Association|ChemSpectrum[_List|_Association],
	averagePoints_:10]:=
	If[MatchQ[data,_ChemSpectrum],ChemSpectrum,Identity]@
		MovingAverage[
			Normal@Replace[data,Except[_ChemSpectrum]:>ChemSpectrum[data]],
			averagePoints];


ChemSpectrum/:HoldPattern[Normal@ChemSpectrum[d_List]]:=
	d;
ChemSpectrum/:HoldPattern[Normal@ChemSpectrum[d_Association]]:=
	Thread@Lookup[d,{"Frequencies","Weights"}];


ChemSpectrum/:HoldPattern[ChemSpectrum[d_][range1_,range2_]]:=
	ChemSpectrumZoom[ChemSpectrum[d],{range1,range2}];


ChemSpectrum/:HoldPattern[Part[ChemSpectrum[d_List],i_Integer]]:=
	Part[d,i];
ChemSpectrum/:HoldPattern[Part[ChemSpectrum[d_List],s:_Span|_List]]:=
	ChemSpectrum[Part[d,s]];
ChemSpectrum/:HoldPattern[Part[ChemSpectrum[d_Association],spec_]]:=
	ChemSpectrum@(Part[#,spec]&/@d);


ChemSpectrum/:HoldPattern[Partition[ChemSpectrum[d_List],s___]]:=
	ChemSpectrum/@Partition[d,s];
ChemSpectrum/:HoldPattern[Partition[ChemSpectrum[d_Association],spec___]]:=
	With[{v=Values@d,k=Keys@d},
		MapThread[
			ChemSpectrum@Association@Thread[k->{##}]&,
			Partition[#,spec]&/@v
			]
		];


ChemSpectrum/:HoldPattern[Length@ChemSpectrum[d_List]]:=
	Length@d;
ChemSpectrum/:HoldPattern[Length@ChemSpectrum[d_Association]]:=
	Length@d["Frequencies"];


ChemSpectrum/:HoldPattern[Range@ChemSpectrum[d_List]]:=
	MinMax@d[[All,1]];
ChemSpectrum/:HoldPattern[Range@ChemSpectrum[d_Association]]:=
	MinMax@d["Frequencies"];


ChemSpectrum/:HoldPattern[MinMax@ChemSpectrum[d_List]]:=
	MinMax@d[[All,2]];
ChemSpectrum/:HoldPattern[MinMax@ChemSpectrum[d_Association]]:=
	MinMax@d["Weights"];


ChemSpectrum/:HoldPattern[Max@ChemSpectrum[d_List]]:=
	First@MaximalBy[d,Last];
ChemSpectrum/:HoldPattern[Max@ChemSpectrum[d_Association]]:=
	First@MaximalBy[Thread[{d["Frequencies"],d["Weights"]}],Last];


ChemSpectrum/:HoldPattern[Min@ChemSpectrum[d_List]]:=
	First@MinimalBy[d,Last];
ChemSpectrum/:HoldPattern[Min@ChemSpectrum[d_Association]]:=
	First@MinimalBy[Thread[{d["Frequencies"],d["Weights"]}],Last];


ChemSpectrum/:
	HoldPattern[Lookup[ChemSpectrum[d_Association],k_]]:=
		Lookup[d,k];
ChemSpectrum/:
	HoldPattern[Lookup[ChemSpectrum[d_Association],k_,def_]]:=
		Lookup[d,k,def];
ChemSpectrum/:
	HoldPattern[ChemSpectrum[d_Association][k__]]:=
		Fold[Switch[#2,_String,#[#2],_List,Lookup[#,#2]]&,d,{k}];


ChemSpectrum/:
	HoldPattern[Association@ChemSpectrum[d_List]]:=
		Thread[{"Frequencies","Weights"}->Thread[d,List]];
ChemSpectrum/:
	HoldPattern[Association@ChemSpectrum[d_Association]]:=
		d;


ChemSpectrum/:
	HoldPattern[Lookup[ChemSpectrum[d_List],k_]]:=
		Lookup[Association@ChemSpectrum[d],k];
ChemSpectrum/:
	HoldPattern[Lookup[ChemSpectrum[d_List],k_,def_]]:=
		Lookup[Association@ChemSpectrum[d],k,def];
ChemSpectrum/:
	HoldPattern[ChemSpectrum[d_List][k__]]:=
		ChemSpectrum[Association[ChemSpectrum[d]]][k]


ChemSpectrum/:
	HoldPattern[Interpolation@ChemSpectrum[d_List]]:=
		Interpolation@d;
ChemSpectrum/:
	HoldPattern[Interpolation@ChemSpectrum[d_Association]]:=
		First@*First@*
			Nearest[Normal@GroupBy[Normal@ChemSpectrum[d],First]];


End[];



