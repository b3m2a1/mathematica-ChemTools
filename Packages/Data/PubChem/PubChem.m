(* ::Package:: *)

(* Autogenerated Package *)

PubChemCompound::usage=
	"Symbolic head for an entry in the PubChem compound db";
PubChemSubstance::usage=
	"Symbolic head for an entry in the PubChem substance db";


$PubChem::usage="Service connection to PubChem";
PubChemID::usage="Gets a compound ID";
PubChemComponentIDs::usage=
	"Gets the component IDs for a PubChem structure";
PubChemParentIDs::usage=
	"Gets the parent IDs for a given ID";
PubChemSubstanceIDs::usage=
	"Gets the substance IDs for a given ID";
PubChemRelatedIDs::usage=
	"Gets CIDs relating to a compound";
PubChemHasQ::usage="Checks whether PubChem has a structure or not";
PubChemStructure::usage=
	"Gets structure for a given ID or compound";
PubChemSDF::usage=
	"Gets the (proper) 3D SDF for a given ID";
PubChemParentSDF::usage=
	"Gets the SDF for the parent IDs";
PubChemComponentSDF::usage=
	"Gets the SDF for the component IDs";
PubChemInfo::usage=
	"Pulls the CompoundProperties for the specs";


Begin["`Private`"];


PubChemCompound~SetAttributes~Listable;
PubChemSubstance~SetAttributes~Listable;


$pubChemConnection=
	None;
$PubChem:=
Replace[$pubChemConnection,
		None->($pubChemConnection=ServiceConnect["PubChem"])
		];


(* ::Subsubsection::Closed:: *)
(*PubChemID*)



(* ::Subsubsubsection::Closed:: *)
(*pubChemSearchKeys*)



pubChemSearchKeys=
	Alternatives@@{
		"CompoundID",
		"SMILES",
		"Name",
		"InChI",
		"InChIKey",
		"Formula"
		};


(* ::Subsubsubsection::Closed:: *)
(*pubChemCIDPull*)



pubChemCIDPull[id_, key_, ops___]:=
	Replace[
		Replace[
			Normal@$PubChem["CompoundCID", key->id, ops],{
				l_List:>Map[ToExpression@#CompoundID&,l],
				a_Association:>ToExpression@a["CompoundID"],
				_:>Missing["NotAvailable", {"CompoundID", id, key}]
			}],{
		{i_}:>i,
		{}:>Missing["NotAvailable", {"CompoundID", id, key}]
	}];


(* ::Subsubsubsection::Closed:: *)
(*pubChemNamePattern*)



pubChemNamePattern=
	_String?(Not@*StringMatchQ[DigitCharacter..])|
		{__String?(Not@*StringMatchQ[DigitCharacter..])};


(* ::Subsubsubsection::Closed:: *)
(*pubChemPullThreadMissingIDs*)



pubChemPullThreadMissingIDs[pull1_]:=
	ReplacePart[pull1, 
		Thread[
			Keys@#->
				pubChemCIDPull[
					Replace[Values@#, 
						Missing["UnknownEntity", {"Chemical", name_}]:>name,
						1
						], 
					"Name"
					]
			]&@Cases[pull1, _Rule]
		]


(* ::Subsubsubsection::Closed:: *)
(*PubChemID*)



PubChemID//Clear


(* ::Subsubsubsubsection::Closed:: *)
(*Entity*)



PubChemID[
	compound:Entity["Chemical", _]|{Entity["Chemical", _]..},
	Optional["Name", "Name"]
	]:=
	Replace[
		EntityValue[
			Thread@Entity["Chemical", compound], 
			{"CIDNumber", "Label"}
			],
		{
			{s_String, _}:>
				Floor@Internal`StringToDouble@StringTrim[s, "CID"],
			{_Missing, s_String}:>
				pubChemCIDPull[s, "Name"],
			{
				_Missing, 
				Missing["UnknownEntity", {"Chemical", Entity["Chemical", name_]}]
				}:>
				pubChemCIDPull[name, "Name"],
			l:{__List}:>
				pubChemPullThreadMissingIDs@
					MapIndexed[
						If[StringQ@First@#,
							Floor@Internal`StringToDouble@StringTrim[#, "CID"],
							#2[[1]]->Last@#
							]&,
						l
						]
			}
		];


(* ::Subsubsubsubsection::Closed:: *)
(*Name*)



PubChemID[
	compound:pubChemNamePattern,
	Optional["Name", "Name"]
	]:=
	PubChemID[Thread[Entity["Chemical", compound]], "Name"]


(* ::Subsubsubsubsection::Closed:: *)
(*ID String*)



PubChemID[
	id_String?(StringMatchQ[DigitCharacter..]),
	Optional["Name","Name"]
	]:=
	PubChemID@ToExpression@id;


(* ::Subsubsubsubsection::Closed:: *)
(*Integer*)



PubChemID[id_Integer?Positive,	
	Optional["Name","Name"]]:=
	id;


PubChemID[_Integer,Optional["Name","Name"]]:=
	Missing["NotAvailable"];


(* ::Subsubsubsubsection::Closed:: *)
(*Formula*)



PubChemID[keys_,"Formula",ops___]:=
	pubChemCIDPull[keys,"Formula",Method->"FormulaSearch",ops];


(* ::Subsubsection::Closed:: *)
(*PubChemRelatedIDs*)



(* ::Subsubsubsection::Closed:: *)
(*pubChemCIDrelated*)



pubChemCIDrelated[id_, args__]:=
	Replace[PubChemID@id,{
		Except[_Integer|{__Integer}]:>
			$Failed,
		i_:>
			Replace[
				"CompoundID"/.Normal@
					Check[
						$PubChem["CompoundCID",
							"CompoundID"->i,
							args
							],
						<|"CompoundID"->$Failed|>
						],{
				{s_}:>s,
				{}:>Missing["NotFound"]
				}]
		}];


(* ::Subsubsubsection::Closed:: *)
(*cidTypes*)



cidTypes=
	Alternatives@@{
		"Original",
		"Parent",
		"Component",
		"Similar2D",
		"Similar3D",
		"SameStereo",
		"SameIsotopes",
		"SameConnectivity",
		"SameTautomer",
		"SameParent",
		"SameParentStereo",
		"SameParentIsotopes",
		"SameParentConnectivity",
		"SameParentTautomer"
		};


(* ::Subsubsubsection::Closed:: *)
(*PubChemRelatedIDs*)



PubChemRelatedIDs[id_,cidType:cidTypes]:=
	pubChemCIDrelated[id,
		"CIDType"->cidType
		];


(* ::Subsubsection::Closed:: *)
(*PubChemParentIDs*)



PubChemParentIDs[id_]:=
	PubChemRelatedIDs[id,"Parent"];


(* ::Subsubsection::Closed:: *)
(*PubChemComponentIDs*)



PubChemComponentIDs[id_]:=
	PubChemRelatedIDs[id,"Component"];


(* ::Subsubsection::Closed:: *)
(*PubChemInfo*)



(* ::Subsubsubsection::Closed:: *)
(*pubChemInfoOps*)



pubChemInfoOps=
	Alternatives@@{
		"CompoundID", 
		"SMILES", 
		"Name",
		"InChI",
		"InChIKey",
		"Formula",
		"RecordType"
		};


(* ::Subsubsubsection::Closed:: *)
(*pubChemInfoPull*)



pubChemInfoPull[ids_,mode:pubChemInfoOps,ops___]:=
	Replace[
		Normal@$PubChem["CompoundProperties",mode->ids,ops],{
		{i_}:>i,
		{}:>Missing["NotAvailable"]
		}];


(* ::Subsubsubsection::Closed:: *)
(*PubChemInfo*)



PubChemInfo[
	compounds:pubChemNamePattern,
	Optional["Name","Name"],
	ops___]:=
	pubChemInfoPull[compounds,"Name"];
PubChemInfo[
	compounds:pubChemNamePattern,
	"Formula",
	ops___]:=
	pubChemInfoPull[compounds,
		"Formula",
		Method->"FormulaSearch"
		];
PubChemInfo[
	ids:_Integer|{__Integer},
	ops___]:=
	pubChemInfoPull[ids,"CompoundID",ops];
PubChemInfo[ids_,key:pubChemInfoOps,ops___]:=
	pubChemInfoPull[ids,key,ops];


(* ::Subsubsection::Closed:: *)
(*PubChemSubstanceIDs*)



(* ::Subsubsubsection::Closed:: *)
(*sidTypes*)



sidTypes=
	Alternatives@@{
		All,
		"Standardized",
		"Component"
		};


(* ::Subsubsubsection::Closed:: *)
(*pubChemSID*)



pubChemSID[id_,args__]:=
	Replace[PubChemID@id,{
		Except[_Integer|{__Integer}]:>
			$Failed,
		i_:>
			Replace[
				"SubstanceID"/.Normal@
					$PubChem["CompoundSID",
						"CompoundID"->i,
						args
						],{
				{s_}:>s,
				{}:>Missing["NotFound"]
				}]
		}];


(* ::Subsubsubsection::Closed:: *)
(*PubChemSubstanceIDs*)



PubChemSubstanceIDs[id_,sid:sidTypes:All]:=
	pubChemSID[id,"SIDType"->sid];


(* ::Subsubsection::Closed:: *)
(*PubChemStructure*)



PubChemStructure[compound_String]:=
	Replace[
		"MOL"/.
			Quiet@
				Check[Normal@$PubChem["CompoundSDF",{"Name"-> compound}],
					{"MOL"->{$Failed}}],{
			{s_}:>s,
			{}:>Missing["NotAvailable"]
		}];
PubChemStructure[id_Integer]:=
	Replace[
		"MOL"/.
			Quiet@
				Check[Normal@$PubChem["CompoundSDF",{"CompoundID"-> id}],
					{"MOL"->{$Failed}}],{
			{s_}:>s,
			{}:>Missing["NotAvailable"]
		}];


(* ::Subsubsection::Closed:: *)
(*PubChemSDF*)



(* ::Subsubsubsection::Closed:: *)
(*pubChemStructureLoc*)



pubChemStructureLoc[cid_]:=
	URLBuild@
		<|
			"Scheme"->"https",
			"Domain"->"pubchem.ncbi.nlm.nih.gov",
			"Path"->{"rest","pug","compound","cid",
					ToString@cid,"record","SDF"},
			"Query"->{
				"record_type"->"3d"
				}
			|>;	


(* ::Subsubsubsection::Closed:: *)
(*pubChemSDFPull*)



pubChemSDFPull[idList_,take_]:=
	Replace[idList,{
		{}->
			Missing["NotFound"],
		i_Integer:>PubChemSDF@i,
		i:{__}:>
			Map[PubChemSDF,
				Take[i,Replace[take,_Integer->UpTo[take]]]
				]
		}];


(* ::Subsubsubsection::Closed:: *)
(*PubChemSDF*)



PubChemSDF[
	cid:_Integer|
		(_String?(StringMatchQ[DigitCharacter..]))
		]:=
	Replace[Quiet@Import[pubChemStructureLoc[cid],"Text"],
		$Failed:>
			Missing["NotAvailable"]
		];


PubChemSDF[
	compound:
		Entity["Chemical",_]|
		_String?(Not@*(StringMatchQ[DigitCharacter..])),
	take_:All]:=
	pubChemSDFPull[PubChemID@compound,take];


(* ::Subsubsection::Closed:: *)
(*PubChemParentSDF*)



PubChemParentSDF[compound_,take_:All]:=
	pubChemSDFPull[PubChemParentIDs@compound,take];


(* ::Subsubsection::Closed:: *)
(*PubChemComponentSDF*)



PubChemComponentSDF[compound_,take_:All]:=
	pubChemSDFPull[PubChemComponentIDs@compound,take];


(* ::Subsubsection::Closed:: *)
(*PubChemSubstanceSDF*)



PubChemSubstanceSDF[compound_,take_:5]:=
	pubChemSDFPull[PubChemSubstanceIDs@compound,take];


(* ::Subsubsection::Closed:: *)
(*PubChemHasQ*)



PubChemHasQ[compound:Entity["Chemical",_]|_String]:=
	!MatchQ[Quiet@PubChemID@compound,_Missing|$Failed];


End[];



