(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



PubChemCompound::usage=
	"Symbolic head for an entry in the PubChem compound db";
PubChemSubstance::usage=
	"Symbolic head for an entry in the PubChem substance db";


$PubChem::usage="Service connection to PubChem";
PubChemID::usage="Gets a compound ID";
PubChemComponentIDs::usage=
	"Gets the component IDs for a PubChem structure";
PubChemParentIDs::usage=
	"Gets the parent IDs for a given ID";
PubChemSubstanceIDs::usage=
	"Gets the substance IDs for a given ID";
PubChemRelatedIDs::usage=
	"Gets CIDs relating to a compound";
PubChemHasQ::usage="Checks whether PubChem has a structure or not";
PubChemStructure::usage=
	"Gets structure for a given ID or compound";
PubChemSDF::usage=
	"Gets the (proper) 3D SDF for a given ID";
PubChemParentSDF::usage=
	"Gets the SDF for the parent IDs";
PubChemComponentSDF::usage=
	"Gets the SDF for the component IDs";
PubChemInfo::usage=
	"Pulls the CompoundProperties for the specs";


Begin["`Private`"];


PubChemCompound~SetAttributes~Listable;
PubChemSubstance~SetAttributes~Listable;


$pubChemConnection=
	None;
$PubChem:=
Replace[$pubChemConnection,
		None->($pubChemConnection=ServiceConnect["PubChem"])
		];


pubChemSearchKeys=
	Alternatives@@{
		"CompoundID",
		"SMILES",
		"Name",
		"InChI",
		"InChIKey",
		"Formula"
		};
pubChemCIDPull[id_,key_,ops___]:=
	Replace[
		Replace[
			Normal@$PubChem["CompoundCID",key->id,ops],{
				l_List:>Map[ToExpression@#CompoundID&,l],
				a_Association:>ToExpression@a["CompoundID"],
				_:>Missing["NotAvailable"]
			}],{
		{i_}:>i,
		{}:>Missing["NotAvailable"]
	}];


pubChemNamePattern=
	_String?(Not@*StringMatchQ[DigitCharacter..])|
		{__String?(Not@*StringMatchQ[DigitCharacter..])};


PubChemID[
	compound:pubChemNamePattern,
	Optional["Name","Name"]
	]:=
	pubChemCIDPull[compound,"Name"];
PubChemID[
	compound:Entity["Chemical",_],
	Optional["Name","Name"]
	]:=
	PubChemID[CommonName@compound,"Name"];
PubChemID[
	id_String?(StringMatchQ[DigitCharacter..]),
	Optional["Name","Name"]
	]:=
	PubChemID@ToExpression@id;
PubChemID[id_Integer?Positive,	
	Optional["Name","Name"]]:=
	id;
PubChemID[_Integer,Optional["Name","Name"]]:=
	Missing["NotAvailable"];


PubChemID[keys_,"Formula",ops___]:=
	pubChemCIDPull[keys,"Formula",Method->"FormulaSearch",ops];


pubChemCIDrelated[id_,args__]:=
	Replace[PubChemID@id,{
		Except[_Integer|{__Integer}]:>
			$Failed,
		i_:>
			Replace[
				"CompoundID"/.Normal@
					Check[
						$PubChem["CompoundCID",
							"CompoundID"->i,
							args
							],
						<|"CompoundID"->$Failed|>
						],{
				{s_}:>s,
				{}:>Missing["NotFound"]
				}]
		}];
cidTypes=
	Alternatives@@{
		"Original",
		"Parent",
		"Component",
		"Similar2D",
		"Similar3D",
		"SameStereo",
		"SameIsotopes",
		"SameConnectivity",
		"SameTautomer",
		"SameParent",
		"SameParentStereo",
		"SameParentIsotopes",
		"SameParentConnectivity",
		"SameParentTautomer"
		};
PubChemRelatedIDs[id_,cidType:cidTypes]:=
	pubChemCIDrelated[id,
		"CIDType"->cidType
		];
PubChemParentIDs[id_]:=
	PubChemRelatedIDs[id,"Parent"];
PubChemComponentIDs[id_]:=
	PubChemRelatedIDs[id,"Component"];


pubChemInfoOps=
	Alternatives@@{
		"CompoundID", 
		"SMILES", 
		"Name",
		"InChI",
		"InChIKey",
		"Formula",
		"RecordType"
		};
pubChemInfoPull[ids_,mode:pubChemInfoOps,ops___]:=
	Replace[
		Normal@$PubChem["CompoundProperties",mode->ids,ops],{
		{i_}:>i,
		{}:>Missing["NotAvailable"]
		}];
PubChemInfo[
	compounds:pubChemNamePattern,
	Optional["Name","Name"],
	ops___]:=
	pubChemInfoPull[compounds,"Name"];
PubChemInfo[
	compounds:pubChemNamePattern,
	"Formula",
	ops___]:=
	pubChemInfoPull[compounds,
		"Formula",
		Method->"FormulaSearch"
		];
PubChemInfo[
	ids:_Integer|{__Integer},
	ops___]:=
	pubChemInfoPull[ids,"CompoundID",ops];
PubChemInfo[ids_,key:pubChemInfoOps,ops___]:=
	pubChemInfoPull[ids,key,ops];


sidTypes=
	Alternatives@@{
		All,
		"Standardized",
		"Component"
		};
pubChemSID[id_,args__]:=
	Replace[PubChemID@id,{
		Except[_Integer|{__Integer}]:>
			$Failed,
		i_:>
			Replace[
				"SubstanceID"/.Normal@
					$PubChem["CompoundSID",
						"CompoundID"->i,
						args
						],{
				{s_}:>s,
				{}:>Missing["NotFound"]
				}]
		}];
PubChemSubstanceIDs[id_,sid:sidTypes:All]:=
	pubChemSID[id,"SIDType"->sid];


PubChemStructure[compound_String]:=
	Replace[
		"MOL"/.
			Quiet@
				Check[Normal@$PubChem["CompoundSDF",{"Name"-> compound}],
					{"MOL"->{$Failed}}],{
			{s_}:>s,
			{}:>Missing["NotAvailable"]
		}];
PubChemStructure[id_Integer]:=
	Replace[
		"MOL"/.
			Quiet@
				Check[Normal@$PubChem["CompoundSDF",{"CompoundID"-> id}],
					{"MOL"->{$Failed}}],{
			{s_}:>s,
			{}:>Missing["NotAvailable"]
		}];


pubChemStructureLoc[cid_]:=
	URLBuild@
		<|
			"Scheme"->"https",
			"Domain"->"pubchem.ncbi.nlm.nih.gov",
			"Path"->{"rest","pug","compound","cid",
					ToString@cid,"record","SDF"},
			"Query"->{
				"record_type"->"3d"
				}
			|>;	


PubChemSDF[
	cid:_Integer|
		(_String?(StringMatchQ[DigitCharacter..]))
		]:=
	Replace[Quiet@Import[pubChemStructureLoc[cid],"Text"],
		$Failed:>
			Missing["NotAvailable"]
		];


pubChemSDFPull[idList_,take_]:=
	Replace[idList,{
		{}->
			Missing["NotFound"],
		i_Integer:>PubChemSDF@i,
		i:{__}:>
			Map[PubChemSDF,
				Take[i,Replace[take,_Integer->UpTo[take]]]
				]
		}];


PubChemSDF[
	compound:
		Entity["Chemical",_]|
		_String?(Not@*(StringMatchQ[DigitCharacter..])),
	take_:All]:=
	pubChemSDFPull[PubChemID@compound,take];


PubChemParentSDF[compound_,take_:All]:=
	pubChemSDFPull[PubChemParentIDs@compound,take];
PubChemComponentSDF[compound_,take_:All]:=
	pubChemSDFPull[PubChemComponentIDs@compound,take];
PubChemSubstanceSDF[compound_,take_:5]:=
	pubChemSDFPull[PubChemSubstanceIDs@compound,take];



PubChemHasQ[compound:Entity["Chemical",_]|_String]:=
	!MatchQ[Quiet@PubChemID@compound,_Missing|$Failed];


End[];



