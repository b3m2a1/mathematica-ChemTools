(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



$ChemSpider::usage="Service connection to ChemSpider";
ChemSpiderHasQ::usage="Checks whether ChemSpider has a structure or not";
ChemSpiderID::usage="Gets the ID or IDs for a compound";
ChemSpiderInfo::usage="Gets structure info for a given ID";


$ChemSpiderToken::usage="Token for manual API connection";
ChemSpiderRequest::usage="Formats an HTTPRequest for the ChemSpider API";
ChemSpiderParse::usage="Parses the output from a ChemSpider call";
ChemSpiderImport::usage="Imports a ChemSpider HTTPRequest and caches it";


ChemSpiderScrape::usage="Scrapes data from a ChemSpider page";


Begin["`Private`"];


$chemSpiderSecurityToken=
	Quiet@Check[
		Import@
			Do[
				With[{f=PackageFilePath["Private",c]},
					If[FileExistsQ@f,
						Return@f
						]
					],
				{
					c,
					{
						"ChemSpiderKey.wl",
						"ChemSpiderKey.m"
						}
				}],
			""];


$chemSpiderConnection=None;
$ChemSpider:=
Replace[$chemSpiderConnection,
		Except[_ServiceObject]:>
			With[{num=ToString[$ModuleNumber+20]},
				With[{
					preempt="OAuthDialogDump`Private`var$"<>num},
					OAuthDialogDump`Private`$TermsAndConditionsAccepted=True;
					OAuthDialogDump`Private`$OAuthDialogSaveQ=True;
					With[{
						listener=
						RunScheduledTask[
							Replace[Evaluate[Symbol@preempt]["token"],{
								Except[_String?(StringLength@StringTrim[#]>0&)]:>
									(
										Evaluate[Symbol@preempt]["token"]=
											$chemSpiderSecurityToken
										),
								e_:>
									($chemSpiderSecurityToken=e)
								}],
							.05
							]},
						Replace[ServiceConnect["ChemSpider"],
							so_ServiceObject:>($chemSpiderConnection=so)
							];
						RemoveScheduledTask@listener;
						$chemSpiderConnection
						]
					]
				]
		];


ChemSpiderID[compound_String]:=
	Replace[
		Normal@$ChemSpider["Search","Query"->compound],{
			l:{__}:>Map[ToExpression@#ID&,l],
			a_Association:>ToExpression@a["ID"],
			_->Missing["NotAvailable"]
		}];


ChemSpiderInfo[id_Integer]:=
	$ChemSpider["ExtendedCompoundInformation","ID"->id];


ChemSpiderInfo[id_Integer,extended_:False]:=
	$ChemSpider[
		If[TrueQ@extended,
			"ExtendedCompoundInformation",
			"CompoundInformation"
			],
		"ID"->id];


ChemSpiderHasQ[compound_String]:=
	!MatchQ[Quiet@ChemSpiderID@compound,_Missing];	


$ChemSpiderToken:=
	Replace[$chemSpiderSecurityToken,
		Except[_String?(StringContainsQ["-"])]->""
		];
$ChemSpiderToken/:
	HoldPattern[Set[$ChemSpiderToken,val_]]:=
		(
			Export[
				PackageFilePath["Private","ChemSpiderKey.wl"],
				val];
			$chemSpiderSecurityToken=val
			);
$ChemSpiderToken/:
	HoldPattern[Clear[$ChemSpiderToken]]:=
		Quiet@DeleteFile@
			PackageFilePath["Private","ChemSpiderKey.wl"]


$chemSpiderAPIRoot="www.chemspider.com/";


If[MatchQ[$chemSpiderCallCache,_Symbol],
$chemSpiderCallCache=<||>
	];


$chemSpiderReplacements=<|
	"CompoundID"->"CSID",
	"SearchByFormula"->"SearchByFormula2",
	"SearchByMass"->"SearchByMass2"
	|>;


$ChemSpiderAPIs=<|
	"Search"->"Search",
	"MassSpecAPI"->"MassSpecAPI",
	"MassSpec"->"MassSpecAPI",
	"Spectra"->"Spectra",
	"SpectrumAPI"->"Spectra",
	"InChI"->"InChI",
	"InChIAPI"->"InChI"
	|>;


pullCalls[api_]:=
	Thread[
		StringTrim/@StringCases[
			Import@TemplateApply["http://www.chemspider.com/``.asmx",api],
				"\n"~~Whitespace~~WordCharacter..~~Whitespace~~"\n"
			]->api
		];


$ChemSpiderCalls=<|
	"AsyncSimpleSearch"->"Search",
	"AsyncSimpleSearchOrdered"->"Search",
	"CSID2ExtRefs"->"Search",
	"ElementsSearch"->"Search",
	"ElementsSearchOrdered"->"Search",
	"GetAsyncSearchResult"->"Search",
	"GetAsyncSearchResultPart"->"Search",
	"GetAsyncSearchStatus"->"Search",
	"GetAsyncSearchStatusAndCount"->"Search",
	"GetCompoundInfo"->"Search",
	"GetCompoundThumbnail"->"Search",
	"GetDataSliceCompounds"->"Search",
	"GetRecordDetails"->"Search",
	"GetRecordImage"->"Search",
	"IntrinsicPropertiesSearch"->"Search",
	"IntrinsicPropertiesSearchOrdered"->"Search",
	"LassoSearch"->"Search","Mol2CSID"->"Search",
	"MolAndDS2CSID"->"Search",
	"PredictedPropertiesSearch"->"Search",
	"PredictedPropertiesSearchOrdered"->"Search",
	"SimilaritySearch"->"Search",
	"SimpleSearch"->"Search",
	"SimpleSearch2IdList"->"Search",
	"StructureSearch"->"Search",
	"SubstructureSearch"->"Search",
	
	"GetRecordMol"->"MassSpecAPI",
	"GetRecordsSdf"->"MassSpecAPI",
	"GetDatabases"->"MassSpecAPI",
	"GetExtendedCompoundInfo"->"MassSpecAPI",
	"GetExtendedCompoundInfoArray"->"MassSpecAPI",
	"GetCompressedRecordsSdf"->"MassSpecAPI",
	"GetExtendedMolCompoundInfoArray"->"MassSpecAPI",
	"GetFormulaArrayAsyncSearchResult"->"MassSpecAPI",
	"GetMassArrayAsyncSearchResult"->"MassSpecAPI",
	"SearchByFormula2"->"MassSpecAPI",
	"SearchByFormulaArrayAsyncOrdered"->"MassSpecAPI",
	"SearchByFormulaAsync"->"MassSpecAPI",
	"SearchByFormulaAsyncOrdered"->"MassSpecAPI",
	"SearchByMass2"->"MassSpecAPI",
	"SearchByMassArrayAsyncOrdered"->"MassSpecAPI",
	"SearchByMassAsync"->"MassSpecAPI",
	"SearchByMassAsyncOrdered"->"MassSpecAPI",
	
	"GetAllSpectraInfo"->"Spectra",
	"GetCompoundSpectraInfo"->"Spectra",
	"GetSpectraInfoArray"->"Spectra",
	"GetSpectrumInfo"->"Spectra",
	
	"CSIDToMol"->"InChI",
	"GenerateInChI"->"InChI",
	"GenerateInChIInfo"->"InChI",
	"GenerateInChIKey"->"InChI",
	"InChIKeyToCSID"->"InChI",
	"InChIKeyToInChI"->"InChI",
	"InChIKeyToMol"->"InChI",
	"InChIToCSID"->"InChI",
	"InChIToInChIKey"->"InChI",
	"InChIToMol"->"InChI",
	"InChIToSMILES"->"InChI",
	"IsValidInChIKey"->"InChI",
	"MolToInChI"->"InChI",
	"MolToInChIKey"->"InChI",
	"ResolveInChIKey"->"InChI",
	"SMILESToInChI"->"InChI"
	|>;


Options[ChemSpiderRequest]={
		"Token"->Automatic,
		"API"->Automatic,
		"Function"->"GetCompoundID",
		"Query"->{}
		};
ChemSpiderRequest[OptionsPattern[],headers:_Association:<||>]:=
	HTTPRequest[
		URLBuild@
			<|
				"Scheme"->"https",
				"Domain"->$chemSpiderAPIRoot,
				"Path"->{
					ToLowerCase@
						Replace[OptionValue@"API",
							Append[
								$ChemSpiderAPIs,
								Automatic:>
									Lookup[$ChemSpiderCalls,
										OptionValue@"Function",
										"Search"]
								]
							]<>".asmx",
					Replace[$chemSpiderReplacements]@
						OptionValue@"Function"
					},
				"Query"->
					ReplaceAll[$chemSpiderReplacements]@
					Map[
						ToString@*
							Replace[{
								l_List:>StringJoin@Riffle[ToString/@l,","]
								}],
						Append[
							Replace[OptionValue@"Query",Except[_List]->{}],
								Replace[
									Replace[OptionValue@"Token",Automatic:>$ChemSpiderToken],{
									s_String?(StringContainsQ["-"]):>("token"->s),
									_->Nothing
									}
									]
								],
						{2}]
				|>,
		headers
		];
ChemSpiderRequest[
	token:_String?(StringContainsQ["-"])|Automatic:Automatic,
	api:_String?(KeyMemberQ[$ChemSpiderAPIs,#]&|Automatic):Automatic,
	function_String,
	query:(_Rule|_RuleDelayed)...,
	headers:_Association:<||>
	]:=
	ChemSpiderRequest[
		"Token"->token,
		"API"->api,
		"Function"->function,
		"Query"->{query},
		headers
		];


parseImport[XMLElement["string",_,{s_}]]:=
	s;
parseImport[XMLElement["int",_,{i_}]]:=
	ToExpression@i;


parseImport[XMLElement["ArrayOfInt",_,ints:{___}]]:=
	ToExpression@
		Replace[ints,
			XMLElement["int",{},{int_}]:>int,
			1];
parseImport[
	XMLElement["ExtendedCompoundInfo"|"CompoundInfo",_,info:{__}]
	]:=
	Replace[info,{
		XMLElement["CSID",{},{id_}]:>
			"CompoundID"->ToExpression@id,
		XMLElement["InChI",{},{str_}]:>
			"InChI"->str,
		XMLElement["InChIKey",{},{k_}]:>
			"InChIKey"->k,
		XMLElement["SMILES",{},{s_}]:>
			"SMILES"->s,
		XMLElement["AverageMass",{},{s_}]:>
			"AverageMass"->ToExpression@s,
		XMLElement["MolecularWeight",{},{s_}]:>
			"MolecularWeight"->ToExpression@s,
		XMLElement["MonoisotopicMass",{},{s_}]:>
			"MonoisotopicMass"->ToExpression@s,
		XMLElement["NominalMass",{},{s_}]:>
			"NominalMass"->ToExpression@s,
		XMLElement["ALogP",{},{s_}]:>
			"ALogP"->ToExpression@s,
		XMLElement["XLogP",{},{s_}]:>
			"XLogP"->ToExpression@s,
		XMLElement["CommonName",{},{s_}]:>
			"CommonName"->s
		},
		1];
parseImport[
	XMLElement["ArrayOfString",_,info:{__}]
	]:=
	Replace[info,{
		XMLElement["string",_,{s_}]:>s
		},
		1];


ChemSpiderParse[XMLObject[_][_,data_,_]]:=
	Replace[parseImport@data,_parseImport->data];
ChemSpiderParse[xml_String]:=
	ChemSpiderParse@ImportString[xml,"XML"];


ChemSpiderImport[req_HTTPRequest]:=
	With[{call=
		Replace[URLParse@First@req,
			a_:>
				ReplacePart[a,
					"Query"->FilterRules[a["Query"],Except["token"]]
					]
				]
			},
		Replace[
			Lookup[
				$chemSpiderCallCache,
				call,
				Replace[
					With[{imp=Import[req,"Text"]},
						Quiet[
							Check[ImportString[imp,"XML"],
								imp
								(*$Failed*)
								],
							XML`Parser`XMLGetString::prserr
							]
						],
					x:XMLObject[_][___]:>
						($chemSpiderCallCache[call]=x)
					]
				],
			x:XMLObject[_][___]:>ChemSpiderParse@x
			]
		]


If[MatchQ[$chemSpiderScrapeCache,_Symbol],
$chemSpiderScrapeCache=<||>
	];


pullSpectra[xml_]:=
	Cases[xml,
		XMLElement["div",{___,"class"->"spectra-block",___},d_]:>
			Prepend[
				Cases[d,
					XMLElement["span",
						{___,"class"->"prop-value",___},
						{___,
							XMLElement["a",{___,"href"->l_,___},_],
							___}
						]:>
							XMLElement["tr",{},
								{XMLElement["td",{},{l}],___}
								]
					],
				FirstCase[d,
					XMLElement["span",
						{___,"class"->"user_data_category_name",___},_],
					XMLElement["span",
						{___,"class"->"user_data_category_name",___},
						{"Type Not Found"}],
					\[Infinity]
					]	
				],
		\[Infinity]
		];
		


ChemSpiderScrape[xml:XMLObject[_][__]]:=
Block[{
		cache={},
		header=None,
		headerCache={},
		prop=None,
		data={},
		propsCacheResults=(
			AppendTo[headerCache,
			prop->Replace[data,{_Rule,___}:>Association@data]];
			data={};prop=None;
			&
			),
		cacheResults=(
			propsCacheResults[];
			AppendTo[cache,header->Association@headerCache];
			headerCache={};header=None;
			&
			)
		},
		Replace[
			Flatten@{
				FirstCase[xml,
					XMLElement["ul",
						{___,"class"->"user_data_categories_list",___},data_]:>
						Cases[data,
							XMLElement["span"|"tr",___],
							\[Infinity]
							],
					{},
					\[Infinity]
					](*,
				pullSpectra@xml*)
				},{
			XMLElement["span",
				{___,"class"->"user_data_category_name",___},{p_}]:>
				(
					If[header=!=None,
						cacheResults[]
						];
					header=StringTrim[p,":"]
					),
			XMLElement["span",
				{___,"class"->"user_data_property_name",___},{p_}]:>
				(
					If[prop=!=None,
						propsCacheResults[]
						];
					prop=StringTrim[p,":"]
					),
			XMLElement["tr",_,d:{XMLElement["td",_,{val_,___}],___}]:>
				AppendTo[data,
					Replace[FirstCase[d,XMLElement["strong",_,{s_}]:>s,None,\[Infinity]],{
						None->val,
						s_:>(s->val)
						}]
					]
			},
		1];
		Association@cache
	];


ChemSpiderScrape[s_String?(StringContainsQ["/"])]:=
	Lookup[$chemSpiderScrapeCache,
		s,
		Replace[Import[s,{"HTML","XMLObject"}],
			imp:XMLObject[_][__]:>(
				$chemSpiderScrapeCache[s]=
					ChemSpiderScrape@imp
					)
			]
		];
ChemSpiderScrape[id_Integer]:=
	ChemSpiderScrape@
		TemplateApply[
			"http://www.chemspider.com/Chemical-Structure.``.html",
			id];
ChemSpiderScrape[s_String]:=
	Replace[ChemSpiderID@s,
		i_Integer:>ChemSpiderScrape@i
		]


End[];



