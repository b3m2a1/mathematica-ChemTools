(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



$ChemDataSources::usage=
	"";


ChemDataSource::usage=
	"Converts a string into a datasource from which to pull relevant properties";


Begin["`Private`"];


(* ::Subsection:: *)
(*Core Sources*)



$ChemDataSourcesDontCacheFlag=False;


If[!AssociationQ@$ChemDataSources,
	$ChemDataSources=<||>
	];


$ChemDataSources/:
	HoldPattern[
		Set[
			$ChemDataSources[key_],
			val:Except[_ChemData]]
			]:=(
				Message[ChemData::badsrc];
				$Failed
				);


chemDataSourceAdd[key_,val_]:=
	If[!KeyMemberQ[$ChemDataSources,key],
		$ChemDataSources[key]=val
		];
chemDataSourceAdd[key_->val_]:=
	chemDataSourceAdd[key,val]


(* ::Subsubsection::Closed:: *)
(*CustomAtoms*)



chemDataSourceAdd[
	"CustomAtoms"->
		ChemData[
			CDSourceMass,
			$Failed&,
			<|
				"X"->
					<|
						"AtomicMass":>
							ChemDataLookup["X", "Mass"]
						|>,
				"Invisible"->
					<|
						"AtomicMass":>
							ChemDataLookup["Invisible", "Mass"]
						|>,
				"Black"->
					<|
						"AtomicMass":>
							ChemDataLookup["Black", "Mass"]
						|>,
				"White"->
					<|
						"AtomicMass":>
							ChemDataLookup["White", "Mass"]
						|>
				|>
			]
	]


(* ::Subsubsection::Closed:: *)
(*AtomColors*)



chemDataSourceAdd[
	"AtomColors"->
			ChemData[$ChemAtomColors,
			(ElementData[#,"IconColor"]&)
			]
	];


(* ::Subsubsection::Closed:: *)
(*BondDistances*)



CDSBondDistance[query_,___]:=
	With[{q=If[AtomQ@query,query,List@@query]},
		$ChemDataSourcesDontCacheFlag=True;
		$ChemBondDistances@
		Append[
			Sort@#[[;;2]],
			#[[3]]
			]&@
		Replace[q,{
			s_String:>
				Append[
					If[StringLength[query]>2&&
						LowerCaseQ@StringTake[s,{2}],
						StringJoin/@
							Partition[
								Prepend[
									StringSplit[
										StringTake[First@query,{2,-1}],
										c_?(Not@*LowerCaseQ):>c,3],
									StringTake[First@query,{1}]
									],
									2],
						{StringTake[s,{1}],StringTake[s,{2,-1}]}
						],
					1],
			{a_,b_}:>
				{a,b,1}
			}]
		];


chemDataSourceAdd[
	"BondDistances"->
		ChemData[CDSBondDistance,-1.&]
	]


(* ::Subsubsection::Closed:: *)
(*UnitConversions*)



chemDataSourceAdd[
	"UnitConversions"->
		ChemData[<|
			"InertialConstant"->
				UnitConvert[
					Quantity[1/(8\[Pi]^2),
						"PlanckConstant"/
						("AtomicMassUnit"*"Angstroms"^2)],
					"Megahertz"]
				|>,
			$Failed&]
	];


(* ::Subsubsection::Closed:: *)
(*SpaceGroups*)



CDSSpaceGroup[query_,___]:=(
	$ChemDataSourcesDontCacheFlag=True;
	With[{r=
		Replace[{
			i_Integer:>$ChemSpaceGroups[[i]],
			s_String:>$ChemSpaceGroups[s],
			Keys:>Keys@$ChemSpaceGroups,
			Values:>Values@$ChemSpaceGroups,
			Dataset:>Dataset@$ChemSpaceGroups
			}]
		},
		Replace[r@query,
			_Missing:>
		Replace[r@StringReplace[query," "->""],
			_Missing:>
		Replace[
			r@StringReplace[query,
				{" "~~d:DigitCharacter:>"-"<>d," "->""}],
			_Missing:>
				Missing["NoSpaceGroup"]
			]]]
		]
	);


chemDataSourceAdd[
	"SpaceGroups"->
		ChemData[
			CDSSpaceGroup,
			Missing["NoSpaceGroup",#]&
			]
	];


(* ::Subsubsection::Closed:: *)
(*ElementValences*)



CSDElementValences[query_,___]:=
(
	$ChemDataSourcesDontCacheFlag=True;
	Lookup[$ChemElementValences,
		query,
		Lookup[$ChemElementValences,
			ElementData[query,"Symbol"]
			]
		]
	)


chemDataSourceAdd[
	"ElementValences"->
		ChemData[CSDElementValences,
			Missing["NotAvailable",#]&]
	]


(* ::Subsubsection::Closed:: *)
(*PubChemIDs*)



CDSPubChemID[query_,___]:=
	Replace[query,{
			PubChemCompound[id_]:>
				PubChemID[id],
			PubChemSubstance[id_]:>
				PubChemSubstanceIDs[id],
			ChemDataQuery[e___]:>
				PubChemID[e],
			e_:>
				PubChemID[e]
			}]


chemDataSourceAdd[
	"PubChemIDs"->
		ChemData[CDSPubChemID,$Failed&]
	];


(* ::Subsubsection::Closed:: *)
(*PubChemNames*)



CDSPubChemNames[query_,___]:=
	With[{inf=
		Replace[query,{
			ChemDataQuery[ids_,pars___]:>
				PubChemInfo[ids,pars],
			ids_:>
				PubChemInfo[ids]
			}]
		},
		With[{names=Lookup[inf,"IUPACName"]},
			Replace[query,{
				ChemDataQuery[k_]:>
					(ChemData[k,"PubChemNames"]=names;names),
				_->names
				}]
			]
		]


chemDataSourceAdd[
	"PubChemNames"->
		ChemData[CDSPubChemNames,$Failed&]
		]


(* ::Subsubsection::Closed:: *)
(*ComponentIDs*)



chemDataSourceAdd[
	"ComponentIDs"->
		ChemData[PubChemComponentIDs@#&,$Failed&]
	]


(* ::Subsubsection::Closed:: *)
(*ParentIDs*)



chemDataSourceAdd[
	"ParentIDs"->
		ChemData[PubChemParentIDs@#&,$Failed&]
	]


(* ::Subsubsection::Closed:: *)
(*SimilarIDs*)



CDSSimilarIDs[query_,___]:=
	With[{keyParameters=
		Replace[query,{
			ChemDataQuery[k_]:>
				{k,"Similar3D"},
			ChemDataQuery[k_,p_]:>
				{k,p},
			k_:>
				{k,"Similar3D"}
			}]},
		PubChemRelatedIDs[
			ChemDataLookup[First@keyParameters,"PubChemIDs"],
			Last@keyParameters
			]
		];


chemDataSourceAdd[
	"SimilarIDs"->
		ChemData[CDSSimilarIDs,$Failed&]
	]


(* ::Subsubsection::Closed:: *)
(*2DStructures*)



chemDataSourceAdd[
	"2DStructures"->
			ChemData[PubChemStructure@#&,$Failed&]
	]


(* ::Subsubsection::Closed:: *)
(*SDFFiles*)



chemDataSourceAdd[
	"SDFFiles"->
		ChemData[
			Replace[PubChemSDF@#,
				_Missing|$Failed:>
					Replace[PubChemParentSDF@#,
						_Missing|$Failed:>PubChemComponentSDF@#
						]
				]&,
			$Failed&]
	]


(* ::Subsubsection::Closed:: *)
(*PrimaryIsotope*)



chemDataSourceAdd[
	"PrimaryIsotope"->
		ChemData[
			If[ChemDataIsotopeQ@#,
				Last@First@
					IsotopeData[IsotopeData[#,"AtomicNumber"]],
				Last@First@IsotopeData[#]
				]&,
			$Failed&
			]
		];


(* ::Subsubsection::Closed:: *)
(*StandardName*)



chemDataSourceAdd[
	"StandardName"->
		ChemData[
			With[{s=Replace[#,{"D"->"H2","T"->"H3"}]},
				If[ChemDataIsotopeQ@s,
					IsotopeData[s,"StandardName"],
					ElementData[s,"StandardName"]
					]
				]&,
			$Failed&,
			<|
				"X"->"X",
				"Invisible"->
					"Invisible",
				"Black"->
					"Black",
				"White"->
					"White"
				|>
			]
	]


(* ::Subsubsection::Closed:: *)
(*Symbol*)



chemDataSourceAdd[
	"Symbol"->
		ChemData[
			If[ChemDataIsotopeQ@#,
				ElementData[
					ChemDataLookup[#,"AtomicNumber",IsotopeData],
					"Symbol"
					],
				ElementData[#,"Symbol"]
				]&,
			$Failed&,
			<|
				"X"->"X",
				"Invisible"->
					"Invisible",
				"Black"->
					"Black",
				"White"->
					"White"
				|>
			]
	]


(* ::Subsubsection::Closed:: *)
(*Radius*)



CDSourceRadius[query_,___]:=
	With[{n=
		If[ChemDataIsotopeQ@query,
			ChemDataLookup[query,
				"AtomicNumber",IsotopeData],
			query]},
		Replace[
			ElementData[n,"VanDerWaalsRadius"],
			Except[_?NumericQ|_Quantity]:>
					Replace[ElementData[n,"AtomicRadius"],
						Except[_?NumericQ|_Quantity]:>$Failed
						]
			]
		];


chemDataSourceAdd[
	"Radius"->
		ChemData[
			CDSourceRadius,
			Quantity[25.,"Picometers"]&,
			<|
				"X"->
					Quantity[50.,"Picometers"],
				"Invisible"->
					Quantity[50.,"Picometers"],
				"Black"->
					Quantity[50.,"Picometers"],
				"White"->
					Quantity[50.,"Picometers"]
				|>
			]
	];


(* ::Subsubsection::Closed:: *)
(*Mass*)



CDSourceMass[query_,___]:=
	If[ChemDataIsotopeQ@query,
		Quantity[
			ChemDataLookup[query,"AtomicNumber",IsotopeData]+
				ChemDataLookup[query,"NeutronNumber",IsotopeData],
			"AtomicMassUnit"
			],
		ElementData[query,"AtomicMass"]
		]


chemDataSourceAdd[
	"Mass"->
		ChemData[
			CDSourceMass,
			$Failed&,
			<|
				"X"->
					Quantity[0.,"AtomicMassUnit"],
				"Invisible"->
					Quantity[0.,"AtomicMassUnit"],
				"Black"->
					Quantity[0.,"AtomicMassUnit"],
				"White"->
					Quantity[0.,"AtomicMassUnit"]
				|>
			]
	]


(* ::Subsubsection::Closed:: *)
(*NISTMass*)



CDSourceMass[query_,___]:=
	If[ChemDataIsotopeQ@query,
		With[{n=ChemDataLookup[query, "AtomicNumber", IsotopeData]},
			Quantity[
				$ChemIsotopicMasses[n, 
					ChemDataLookup[query, "MassNumber", IsotopeData],
					"Mass"
					],
				"AtomicMassUnit"
				]
			],
		With[
			{
				n = 
					ChemDataLookup[query, "AtomicNumber", ElementData],
				m =
					MaximalBy[
						Thread[
							{
								ChemDataLookup[query, "MassNumber", IsotopeData],
								ChemDataLookup[query, "IsotopeAbundance", IsotopeData]
								}
							],
						Last
						][[1, 1]]
				},
			Quantity[
				$ChemIsotopicMasses[n, m, "Mass"],
				"AtomicMassUnit"
				]
			]
		]


chemDataSourceAdd[
	"NISTMass"->
		ChemData[
			CDSourceMass,
			$Failed&,
			<|
				"X"->
					Quantity[0.,"AtomicMassUnit"],
				"Invisible"->
					Quantity[0.,"AtomicMassUnit"],
				"Black"->
					Quantity[0.,"AtomicMassUnit"],
				"White"->
					Quantity[0.,"AtomicMassUnit"]
				|>
			]
	]


(* ::Subsubsection::Closed:: *)
(*AtomicNumber*)



chemDataSourceAdd[
	"AtomicNumber"->
		ChemData[
			ChemDataLookup[#,"AtomicNumber",IsotopeData]&,
			$Failed&,
			<|
				"X"->
					-1,
				"Invisible"->
					-2,
				"Black"->
					-3,
				"White"->
					-4
				|>
			]
	]


(* ::Subsubsection::Closed:: *)
(*Electronegativity*)



CDElectronegativity[query_,___]:=
	If[ChemDataIsotopeQ@query,
		ChemDataLookup[
			ChemDataLookup[query,"AtomicNumber",IsotopeData],
			"Electronegativity"
			],
		ElementData[query,"AtomicMass"]
		]


chemDataSourceAdd[
	"Electronegativity"->
		ChemData[
			CDSourceMass,
			$Failed&,
			<|
				"X"->
					0,
				"Invisible"->
					0,
				"Black"->
					0,
				"White"->
					0
				|>
			]
	]


(* ::Subsubsection::Closed:: *)
(*ChemDataSource*)



ChemDataSource[s_String]:=
	Which[
		s==="ElementData",
			ElementData,
		s==="ChemicalData",
			ChemicalData,
		s==="IsotopeData",
			IsotopeData,
		KeyMemberQ[$ChemCustomAtoms, s],
			"CustomAtoms",
		KeyMemberQ[$ChemDataSources,s],
			$ChemDataSources[s],
		KeyMemberQ[$ChemElements,s]||
			KeyMemberQ[$ChemElements,ToLowerCase@s],
			ElementData,
		KeyMemberQ[$ChemSpaceGroups,s],
			"SpaceGroups",
		StringMatchQ[ToLowerCase@s,"d"|"t"|"deuterium"|"tritium"]||
		With[{t=StringTrim[s,NumberString]},
			KeyMemberQ[$ChemElements,t]||
				KeyMemberQ[$ChemElements,ToLowerCase@t]
			],
			IsotopeData,
		True,
			ChemicalData
		]


End[];



