(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



ChemDataLookup::usage="Looks up relevant chemical data";


ChemData::usage=
	"A wrapper for various chemical data stuff to act like an extensible ChemicalData";


ChemDataQuery::usage=
	"A descriptive head used in to pass multiple parameters to sources";
ChemDataProperties::usage="Finds properties matching a pattern";
ChemDataCacheClear::usage="Clears cached data matching a pattern";


Begin["`Private`"];


(* ::Subsection:: *)
(*ChemData and Caching*)



ChemData::badsrc=
	"$ChemDataSources can only take ChemData object";


If[Not@AssociationQ@$chemDataCache,
	$chemDataCache=<||>
	];


(* ::Subsubsubsection::Closed:: *)
(*ChemData Access*)



ChemData[data:Except[_String],fallback_,cache_:<||>][
	key:Except["Properties"],
	attr_:None]:=
	Replace[
		Lookup[cache,key,data[key]],{
		e:Except[_Missing]:>
			Replace[e,
				_Association|{__Rule}:>
					Lookup[e,attr,fallback[key,attr]]
				],
		_:>
			fallback[key,attr]
		}];


extractProps[data_]:=
	Switch[data,
			_Association,
				If[AllTrue[Values@data,MatchQ[_Association]],
					Join@@Keys/@Values@data,
					Keys@data
					],
			ElementData|IsotopeData|ChemicalData,
				data["Properties"],
			_,
				{}
			]


ChemData[data:Except[_String],
	fallback_,
	cache_:<||>]["Properties"]:=
	Join[
		extractProps@cache,
		extractProps@data,
		extractProps@fallback
		];


(* ::Subsubsubsection::Closed:: *)
(*ChemData Manipulation*)



chemDataPrep[props_]:=
	Replace[props,{
		c:ChemData[_,__]:>
			c,
		a_Association?(KeyMemberQ[#,"Main"]&):>
			ChemData@@
				Lookup[
					Join[<|
						"FallBack"->($Failed&)
						|>,
						a
						],
					{"Main","FallBack","Cache"},
					Nothing
					],
		e_:>
			chemDataPrep[<|"Main"->e|>]
		}]


ChemData/:
	Set[ChemData[name_String],props_]:=
		($ChemDataSources[name]=
			chemDataPrep[props]);
ChemData/:
	SetDelayed[ChemData[name_String],props_]:=
		($ChemDataSources[name]:=
			props);
ChemData/:
	Unset[ChemData[name_String],props_]:=
		($ChemDataSources[name]=.);


ChemData::nosrc="No data source \"``\"";
ChemData::newsrc="No data source \"``\". Creating new one.";
chemDataSet[name_,key_,value_]:=
	(
		$chemDataCache[ChemDataQuery[key,name]]=.;
		If[KeyMemberQ[$ChemDataSources,name],
			Replace[$ChemDataSources[name],{
				ChemData[a_,b_]:>
					($ChemDataSources[name]=
						ChemData[a,b,<|key->value|>];),
				ChemData[a_,b_,c_]:>
					($ChemDataSources[name]=
						ChemData[a,b,Append[c,key->value]];)
				}],
			Message[ChemData::newsrc,name];
			$ChemDataSources[name]=
				ChemData[
					(Missing["KeyAbsent",#]&),
					$Failed&,
					<|key->value|>
					]
			];
		);


chemDataSetDelayed[name_,key_,value_]:=
	(
		$chemDataCache[ChemDataQuery[key,name]]=.;
		If[KeyMemberQ[$ChemDataSources,name],
			Replace[$ChemDataSources[name],{
				ChemData[a_,b_]:>
					($ChemDataSources[name]=
						ChemData[a,b,<|key:>value|>];),
				ChemData[a_,b_,c_]:>
					($ChemDataSources[name]=
						ChemData[a,b,Append[c,key:>value]];)
				}],
			Message[ChemData::newsrc,name];
			$ChemDataSources[name]=
				ChemData[
					(Missing["KeyAbsent",#]&),
					$Failed&,
					<|key:>value|>
					]
			];
		);
chemDataSetDelayed~SetAttributes~HoldRest;


chemDataUnset[name_,key_]:=
	(
		$chemDataCache[ChemDataQuery[key,name]]=.;
		If[KeyMemberQ[$ChemDataSources,name],
			Replace[$ChemDataSources[name],{
				ChemData[a_,b_,c_]:>
					($ChemDataSources[name]=
						ChemData[a,b,KeyDrop[c,key]];)
				}],
			Message[ChemData::nosrc,name];
			];
		);


ChemData/:
	HoldPattern[Set[ChemData[name_String][key_],val_]]:=
	chemDataSet[name,key,val];
ChemData/:
	HoldPattern[SetDelayed[ChemData[name_String][key_],val_]]:=
	chemDataSetDelayed[name,key,val];
ChemData/:
	HoldPattern[Unset[ChemData[name_String][key_]]]:=
	chemDataUnset[name,key];


`Package`PackageAddAutocompletions[
	"ChemData",
	{Keys@$ChemDataSources}
	]


(* ::Subsubsubsection::Closed:: *)
(*Formatting*)



Format[
	d:ChemData[data:Except[_String],
		fallback_]
	]:=
	RawBoxes@BoxForm`ArrangeSummaryBox[
		"ChemData",
		d,
		None,
		{
			BoxForm`MakeSummaryItem[{
				"Properties: ",
				Replace[
					d["Properties"],
					Except[{__}]->"Unknown"
					]
				},
				StandardForm
				]
			},
		{
			If[AssociationQ@data,
				BoxForm`MakeSummaryItem[{
					"Data: ",
					Short[data,1]
					},
					StandardForm
					],
				BoxForm`MakeSummaryItem[{
					"Function: ",
					Short[data,1]
					},
					StandardForm
					]
				],
			If[fallback=!=($Failed&),
				BoxForm`MakeSummaryItem[{
					"FallBack: ",
					Short[fallback,1]
					},
					StandardForm
					],
				Nothing
				]
			},
		StandardForm
		]


Format[
	d:ChemData[data:Except[_String],
		fallback_,
		cache_:<||>]
	]:=
	RawBoxes@BoxForm`ArrangeSummaryBox[
		"ChemData",
		d,
		None,
		{
			BoxForm`MakeSummaryItem[{
				"Properties: ",
				d["Properties"]
				},
				StandardForm
				]
			},
		{
			BoxForm`MakeSummaryItem[{
				"Data: ",
				Short[data,1]
				},
				StandardForm
				],
			BoxForm`MakeSummaryItem[{
				"FallBack: ",
				Short[fallback,1]
				},
				StandardForm
				],
			BoxForm`MakeSummaryItem[{
				"Cache Length: ",
				Length@cache
				},
				StandardForm
				]
			},
		StandardForm
		]


(* ::Subsection:: *)
(*ChemDataProperties*)



ChemDataProperties[pat_:"*",
	datasource:IsotopeData|ElementData|ChemicalData|_ChemData]:=
	With[{props=datasource["Properties"]},
		Cases[Replace[props,Entity[_,p_]:>p],
			_String?(StringMatchQ[pat])]
		];
ChemDataProperties[pat_:"*",
	s_String?(KeyMemberQ[$ChemDataSources,#]&)]:=
	ChemDataProperties[pat,$ChemDataSources[s]];
ChemDataProperties[thing_,pat_:"*"]:=
	ChemDataProperties[pat,ChemDataSource@thing];


(* ::Subsection:: *)
(*ChemDataLookup*)



ChemDataCacheClear[string_:_,attr_:_]:=
	With[{old=
		KeySelect[$chemDataCache,
			MatchQ[ChemDataQuery[string,attr]]
			]},
		$chemDataCache=
			KeySelect[$chemDataCache,
				Not@*MatchQ[ChemDataQuery[string,attr]]];
		old
		];


HoldPattern[
	ChemDataLookup[
		string:Except[_Key|_List|_Pattern|_Optional],
		attr_,
		o__,"Overwrite"->True]
	]:=(
	$chemDataCache[ChemDataQuery[string,attr]]=.;
	ChemDataLookup[string,attr,o]
	);


HoldPattern[
	ChemDataLookup[
		string:Except[_Key|_List|_Pattern|_Optional],
		attr_,
		dataSource:
			IsotopeData|ElementData|
			ChemicalData|_ChemData]
	]:=
	If[TrueQ@attr===None,
		dataSource[Replace[string,{"D"->"H2","T"->"H3"}],attr],
		Lookup[$chemDataCache,ChemDataQuery[string,attr],
			With[{d=
				dataSource[
					Replace[string,{"D"->"H2","T"->"H3"}],
					attr]},
				If[TrueQ@$ChemDataSourcesDontCacheFlag,
					$ChemDataSourcesDontCacheFlag=False;
					d,
					$chemDataCache[ChemDataQuery[string,attr]]=d
					]
				]
			]
		];
HoldPattern[
	ChemDataLookup[
		string:Except[_Key|_List|_Pattern|_Optional],
		attr_,
		dataSource:
			IsotopeData|ElementData|
			ChemicalData|_ChemData,
		default_]
	]:=
	If[attr===None,
		Replace[
			dataSource[Replace[string,{"D"->"H2","T"->"H3"}],
				attr],
			_Missing->default],
		Lookup[$chemDataCache,ChemDataQuery[string,attr],
			With[{d=
				Replace[
					dataSource[Replace[string,{"D"->"H2","T"->"H3"}],
						attr],
					_Missing->default]},
				If[TrueQ@$ChemDataSourcesDontCacheFlag,
					$ChemDataSourcesDontCacheFlag=False;
					d,
					$chemDataCache[ChemDataQuery[string,attr]]=d
					]
				]
			]
		];


chemDataCacheThreadSet[keys:{__},vals:{__}]:=
	AssociateTo[$chemDataCache,
		Thread[keys->vals]
		];
chemDataCacheThreadSet[ChemDataQuery[l:{__},k_],v:{__}]:=
	chemDataCacheThreadSet[
		Map[ChemDataQuery[#,k]&,l],
		v
		];
		
chemDataCacheThreadSetDelayed[keys:{__},vals:{__}]:=
	AssociateTo[$chemDataCache,
		Thread[keys:>vals]
		];
chemDataCacheThreadSetDelayed[ChemDataQuery[l:{__},k_],v:{__}]:=
	chemDataCacheThreadSetDelayed[
		Map[ChemDataQuery[#,k]&,l],
		v
		];
chemDataCacheThreadSetDelayed~SetAttributes~HoldRest;


chemDataCacheThreadUnset[keys:{__}]:=
	KeyDropFrom[$chemDataCache,keys];
chemDataCacheThreadUnset[ChemDataQuery[l:{__},k_]]:=
	chemDataCacheThreadUnset[Map[ChemDataQuery[#,k]&,l]];


ChemDataLookup/:HoldPattern[
		Set[ChemDataLookup[name:Except[_List],attr_],val_]]:=
	($chemDataCache[ChemDataQuery[name,attr]]=val);
ChemDataLookup/:HoldPattern[
		SetDelayed[
			ChemDataLookup[name:Except[_List],attr_],val_]]:=
	($chemDataCache[ChemDataQuery[name,attr]]:=val);
ChemDataLookup/:HoldPattern[
		Unset[ChemDataLookup[name:Except[_List],attr_]]]:=
	($chemDataCache[ChemDataQuery[name,attr]]=.);


ChemDataLookup/:
	HoldPattern[
		Set[ChemDataLookup[name:_List,attr_],val_]]:=
	chemDataCacheThreadSet[ChemDataQuery[name,attr],val];
ChemDataLookup/:
	HoldPattern[
		SetDelayed[ChemDataLookup[name:_List,attr_],val_]]:=
	chemDataCacheThreadSetDelayed[ChemDataQuery[name,attr],val];
ChemDataLookup/:
	HoldPattern[
		Unset[ChemDataLookup[name:_List,attr_]]
		]:=
	chemDataCacheThreadUnset[ChemDataQuery[name,attr]];


HoldPattern[
	ChemDataLookup[
		string:Except[_Key|_List|_Pattern|_Optional],
		attr_,
		source_String?(KeyMemberQ[$ChemDataSources,#]&)]
	]:=
	ChemDataLookup[string,attr,$ChemDataSources[source]];
HoldPattern[
	ChemDataLookup[
		string:Except[_Key|_List|_Pattern|_Optional],
		attr_,
		source_String?(KeyMemberQ[$ChemDataSources,#]&),default_]
	]:=
	ChemDataLookup[string,attr,
		$ChemDataSources[source],default];


HoldPattern[
	ChemDataLookup[
		string:Except[_Key|_List|_Pattern|_Optional],
		source:
			ChemicalData|ElementData|IsotopeData|
			_String?(KeyMemberQ[$ChemDataSources,#]&)
		]
	]:=
	ChemDataLookup[string,source,source];


HoldPattern[
	ChemDataLookup[
		string:Except[_Key|_List|_Pattern|_Optional],
		source:
			ChemicalData|ElementData|IsotopeData|
			_String?(KeyMemberQ[$ChemDataSources,#]&),
		default_]
	]:=
	ChemDataLookup[string,source,source,default];


HoldPattern[
	ChemDataLookup[
		string:Except[_Key|_List|_Pattern|_Optional],
		attr_]
	]:=
	ChemDataLookup[string,attr,ChemDataSource@string];
HoldPattern[
	ChemDataLookup[
		string:Except[_Key|_List|_Pattern|_Optional],
		attr_,default_]
	]:=
	ChemDataLookup[string,attr,ChemDataSource@string,default];


HoldPattern[ChemDataLookup[l_List,a__]]:=
	ChemDataLookup[#,a]&/@l;


HoldPattern[ChemDataLookup[Verbatim[Verbatim][a_],b__]]:=
	ChemDataLookup[ChemDataQuery[a], b];


ChemDataLookup[attr:Except[_Association]][
	string:Except[_Key]]:=
	ChemDataLookup[string,attr];
ChemDataLookup[spc:_Association][string_]:=
	ChemDataLookup[string,
		Lookup[spc,"Property",None],
		Lookup[spc,"Source",Sequence[]],
		Lookup[spc,"Default",Sequence[]]
		];


(* ::Subsection:: *)
(*Autocompletions*)



PackageAddAutocompletions[
	"ChemDataLookup",
	{
		None,
		Keys@$ChemDataSources,
		Join[
			ToString/@{ElementData,IsotopeData,ChemicalData},
			Keys@$ChemDataSources
			]
		}
	]


End[];



