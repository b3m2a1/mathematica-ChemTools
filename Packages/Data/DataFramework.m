(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



ChemDataLookup::usage=
	"Looks up relevant chemical data";
ChemData::usage=
	"A wrapper for various chemical data stuff to act like an extensible ChemicalData";


ChemDataProperties::usage="Finds properties matching a pattern";
ChemDataCacheClear::usage="Clears cached data matching a pattern";


PackageScopeBlock[
	ChemDataQuery::usage=
		"A descriptive head used in to pass multiple parameters to sources";
	$ChemDataCache::usage="The standard cache for data lookup",
	$Context
	]


Begin["`Private`"];


(* ::Subsection:: *)
(*ChemData and Caching*)



ChemData::badsrc=
	"$ChemDataSources can only take ChemData object";


If[Not@AssociationQ@$ChemDataCache,
	$ChemDataCache=<||>
	];


(* ::Subsubsubsection::Closed:: *)
(*ChemData Access*)



ChemData[
	name:_String|None:None,
	data:Except[_String], 
	fallback:Except[_String], 
	cache:Except[_String]:<||>
	][
	key:Except["Properties"],
	attr_:None
	]:=
	Replace[
		Lookup[cache, key, data[key]],
		{
			a:(_Association|{(_Rule|_RuleDelayed)..})?(attr=!=name&):>
				Lookup[a, attr, fallback[key, attr]],
			_Missing|$Failed:>
				fallback[key, attr]
			}
		];


(* ::Subsubsubsection::Closed:: *)
(*extractProps*)



extractProps[data_]:=
	Switch[data,
			_Association,
				If[AllTrue[Values@data,MatchQ[_Association]],
					Join@@Keys/@Values@data,
					Keys@data
					],
			ElementData|IsotopeData|ChemicalData,
				data["Properties"],
			_,
				{}
			]


(* ::Subsubsubsection::Closed:: *)
(*Properties*)



ChemData[
	name:_String|None:None,
	data:Except[_String],
	fallback_,
	cache_:<||>
	]["Properties"]:=
	Join[
		extractProps@cache,
		extractProps@data,
		extractProps@fallback
		];


(* ::Subsubsubsection::Closed:: *)
(*ChemData Manipulation*)



chemDataPrep[props_]:=
	Replace[props,{
		c:ChemData[_,__]:>
			c,
		a_Association?(KeyMemberQ[#,"Main"]&):>
			ChemData@@
				Lookup[
					Join[<|
						"FallBack"->($Failed&)
						|>,
						a
						],
					{"Main","FallBack","Cache"},
					Nothing
					],
		e_:>
			chemDataPrep[<|"Main"->e|>]
		}]


(* ::Subsubsubsection::Closed:: *)
(*OOP*)



ChemData/:
	Set[ChemData[name_String], props_]:=
		($ChemDataSources[name]=
			chemDataPrep[props]);
ChemData/:
	SetDelayed[ChemData[name_String], props_]:=
		($ChemDataSources[name]:=
			props);
ChemData/:
	Unset[ChemData[name_String], props_]:=
		($ChemDataSources[name]=.);


ChemData::nosrc="No data source \"``\"";
ChemData::newsrc="No data source \"``\". Creating new one.";
chemDataSet[name_, key_, value_]:=
	(
		$ChemDataCache[ChemDataQuery[key, name]]=.;
		If[KeyMemberQ[$ChemDataSources, name],
			Replace[$ChemDataSources[name],{
				ChemData[name, a_, b_]:>
					($ChemDataSources[name]=
						ChemData[name, a, b, <|key->value|>];),
				ChemData[name, a_, b_, c_]:>
					($ChemDataSources[name]=
						ChemData[name, a, b, Append[c,key->value]];)
				}],
			Message[ChemData::newsrc,name];
			$ChemDataSources[name]=
				ChemData[
					name,
					(Missing["KeyAbsent", #]&),
					$Failed&,
					<|key->value|>
					]
			];
		);


chemDataSetDelayed[name_,key_,value_]:=
	(
		$ChemDataCache[ChemDataQuery[key, name]]=.;
		If[KeyMemberQ[$ChemDataSources,name],
			Replace[$ChemDataSources[name],{
				ChemData[name, a_, b_]:>
					($ChemDataSources[name]=
						ChemData[a, b,<|key:>value|>];),
				ChemData[name, a_, b_, c_]:>
					($ChemDataSources[name]=
						ChemData[name, a, b, Append[c,key:>value]];)
				}],
			Message[ChemData::newsrc,name];
			$ChemDataSources[name]=
				ChemData[
					name,
					(Missing["KeyAbsent",#]&),
					$Failed&,
					<|key:>value|>
					]
			];
		);
chemDataSetDelayed~SetAttributes~HoldRest;


chemDataUnset[name_,key_]:=
	(
		$ChemDataCache[ChemDataQuery[key, name]]=.;
		If[KeyMemberQ[$ChemDataSources, name],
			Replace[$ChemDataSources[name],
				{
					ChemData[name, a_, b_, c_]:>
						($ChemDataSources[name]=
							ChemData[name, a, b, KeyDrop[c,key]];)
					}
				],
			Message[ChemData::nosrc,name];
			];
		);


ChemData/:
	HoldPattern[Set[ChemData[name_String][key_], val_]]:=
	chemDataSet[name, key, val];
ChemData/:
	HoldPattern[SetDelayed[ChemData[name_String][key_], val_]]:=
	chemDataSetDelayed[name, key, val];
ChemData/:
	HoldPattern[Unset[ChemData[name_String][key_]]]:=
	chemDataUnset[name, key];


`Package`PackageAddAutocompletions[
	"ChemData",
	{Keys@$ChemDataSources}
	]


(* ::Subsubsubsection::Closed:: *)
(*Formatting*)



Format[
	d:
	ChemData[
		name:_String|None:None,
		data:Except[_String],
		fallback_
		]
	]:=
	RawBoxes@BoxForm`ArrangeSummaryBox[
		"ChemData",
		d,
		None,
		{
			If[name===None,
				Nothing,
				BoxForm`MakeSummaryItem[
					{
						"Name: ", name
						},
					StandardForm
					]
				],
			BoxForm`MakeSummaryItem[
				{
					"Properties: ",
						Replace[
							d["Properties"],
							Except[{__}]->"Unknown"
							]
					},
				StandardForm
				]
			},
		{
			If[AssociationQ@data,
				BoxForm`MakeSummaryItem[{
					"Data: ",
					Short[data,1]
					},
					StandardForm
					],
				BoxForm`MakeSummaryItem[{
					"Function: ",
					Short[data,1]
					},
					StandardForm
					]
				],
			If[fallback=!=($Failed&),
				BoxForm`MakeSummaryItem[{
					"FallBack: ",
					Short[fallback,1]
					},
					StandardForm
					],
				Nothing
				]
			},
		StandardForm
		]


Format[
	d:ChemData[
		name:_String|None:None,
		data:Except[_String],
		fallback_,
		cache_:<||>
		]
	]:=
	RawBoxes@
		BoxForm`ArrangeSummaryBox[
			"ChemData",
			d,
			None,
			{
				If[name===None,
					Nothing,
					BoxForm`MakeSummaryItem[
						{
							"Name: ", name
							},
						StandardForm
						]
					],
				BoxForm`MakeSummaryItem[{
					"Properties: ",
					d["Properties"]
					},
					StandardForm
					]
				},
			{
				BoxForm`MakeSummaryItem[{
					"Data: ",
					Short[data,1]
					},
					StandardForm
					],
				BoxForm`MakeSummaryItem[{
					"FallBack: ",
					Short[fallback,1]
					},
					StandardForm
					],
				BoxForm`MakeSummaryItem[{
					"Cache Length: ",
					Length@cache
					},
					StandardForm
					]
				},
			StandardForm
			]


(* ::Subsection:: *)
(*ChemDataProperties*)



ChemDataProperties[pat_:"*",
	datasource:IsotopeData|ElementData|ChemicalData|_ChemData]:=
	With[{props=datasource["Properties"]},
		Cases[Replace[props, Entity[_,p_]:>p],
			_String?(StringMatchQ[pat])]
		];
ChemDataProperties[pat_:"*",
	s_String?(KeyMemberQ[$ChemDataSources,#]&)]:=
	ChemDataProperties[pat,$ChemDataSources[s]];
ChemDataProperties[thing_,pat_:"*"]:=
	ChemDataProperties[pat,ChemDataSource@thing];


(* ::Subsection:: *)
(*Cache*)



(* ::Subsubsubsection::Closed:: *)
(*ChemDataCacheClear*)



ChemDataCacheClear[string_:_,attr_:_]:=
	With[{old=
		KeySelect[$ChemDataCache,
			MatchQ[ChemDataQuery[string,attr]]
			]},
		$ChemDataCache=
			KeySelect[$ChemDataCache,
				Not@*MatchQ[ChemDataQuery[string,attr]]];
		old
		];


(* ::Subsubsubsection::Closed:: *)
(*Cache Editing*)



chemDataCacheThreadSet[keys:{__},vals:{__}]:=
	AssociateTo[$ChemDataCache,
		Thread[keys->vals]
		];
chemDataCacheThreadSet[ChemDataQuery[l:{__},k_],v:{__}]:=
	chemDataCacheThreadSet[
		Map[ChemDataQuery[#,k]&,l],
		v
		];
		
chemDataCacheThreadSetDelayed[keys:{__},vals:{__}]:=
	AssociateTo[$ChemDataCache,
		Thread[keys:>vals]
		];
chemDataCacheThreadSetDelayed[ChemDataQuery[l:{__},k_],v:{__}]:=
	chemDataCacheThreadSetDelayed[
		Map[ChemDataQuery[#,k]&,l],
		v
		];
chemDataCacheThreadSetDelayed~SetAttributes~HoldRest;


chemDataCacheThreadUnset[keys:{__}]:=
	KeyDropFrom[$ChemDataCache,keys];
chemDataCacheThreadUnset[ChemDataQuery[l:{__},k_]]:=
	chemDataCacheThreadUnset[Map[ChemDataQuery[#,k]&,l]];


ChemDataLookup/:HoldPattern[
		Set[ChemDataLookup[name:Except[_List],attr_],val_]]:=
	($ChemDataCache[ChemDataQuery[name,attr]]=val);
ChemDataLookup/:HoldPattern[
		SetDelayed[
			ChemDataLookup[name:Except[_List],attr_],val_]]:=
	($ChemDataCache[ChemDataQuery[name,attr]]:=val);
ChemDataLookup/:HoldPattern[
		Unset[ChemDataLookup[name:Except[_List],attr_]]]:=
	($ChemDataCache[ChemDataQuery[name,attr]]=.);


ChemDataLookup/:
	HoldPattern[
		Set[ChemDataLookup[name:_List,attr_],val_]]:=
	chemDataCacheThreadSet[ChemDataQuery[name,attr],val];
ChemDataLookup/:
	HoldPattern[
		SetDelayed[ChemDataLookup[name:_List,attr_],val_]]:=
	chemDataCacheThreadSetDelayed[ChemDataQuery[name,attr],val];
ChemDataLookup/:
	HoldPattern[
		Unset[ChemDataLookup[name:_List,attr_]]
		]:=
	chemDataCacheThreadUnset[ChemDataQuery[name,attr]];


(* ::Subsection:: *)
(*ChemDataLookup*)



ChemDataLookup//Clear


$ChemDataSpecialArgsPat=
	Except[_Key|_List|_Query|_Blank|_Pattern|_Optional];


(* ::Subsubsubsection::Closed:: *)
(*Relookup*)



ChemDataLookup[
	string:$ChemDataSpecialArgsPat,
	attr_,
	o___,
	"Overwrite"->True
	]:=
	(
		$ChemDataCache[ChemDataQuery[string, attr]]=.;
		ChemDataLookup[string, attr, o]
		);


(* ::Subsubsubsection::Closed:: *)
(*Caching Lookup*)



ChemDataLookup[
	string:$ChemDataSpecialArgsPat,
	attr_,
	dataSource:
		IsotopeData|ElementData|
		ChemicalData|_ChemData
	]:=
	With[{k=If[attr===None, Hash@dataSource, attr]},
		Lookup[
			$ChemDataCache, 
			ChemDataQuery[string, k],
			With[
				{
					d=
						dataSource[
							Replace[string,{"D"->"H2","T"->"H3"}],
							attr
							]
						},
				If[TrueQ@$ChemDataSourcesDontCacheFlag,
					$ChemDataSourcesDontCacheFlag=False;
					d,
					$ChemDataCache[ChemDataQuery[string, k]]=d
					]
				]
			]
		];


(* ::Subsubsubsubsection::Closed:: *)
(*Default*)



(*ChemDataLookup[
	string:$ChemDataSpecialArgsPat,
	attr_,
	dataSource:
		IsotopeData|ElementData|
		ChemicalData|_ChemData,
	default_
	]:=
	If[attr===None,
		Replace[
			dataSource[Replace[string,{"D"\[Rule]"H2","T"\[Rule]"H3"}],
				attr],
			_Missing\[Rule]default],
		Lookup[$ChemDataCache,ChemDataQuery[string,attr],
			With[{d=
				Replace[
					dataSource[Replace[string,{"D"\[Rule]"H2","T"\[Rule]"H3"}],
						attr],
					_Missing\[Rule]default]},
				If[TrueQ@$ChemDataSourcesDontCacheFlag,
					$ChemDataSourcesDontCacheFlag=False;
					d,
					$ChemDataCache[ChemDataQuery[string,attr]]=d
					]
				]
			]
		];*)


(* ::Subsubsubsection::Closed:: *)
(*ChemDataSources*)



ChemDataLookup[
	string:$ChemDataSpecialArgsPat,
	attr_,
	source_String?(KeyMemberQ[$ChemDataSources,#]&)
	]:=
	ChemDataLookup[
		string,
		attr,
		$ChemDataSources[source]
		];


(* ::Subsubsubsubsection::Closed:: *)
(*Default*)



(*ChemDataLookup[
	string:$ChemDataSpecialArgsPat,
	attr_,
	source_String?(KeyMemberQ[$ChemDataSources,#]&),
	default_
	]:=
	ChemDataLookup[
		string,
		attr,
		$ChemDataSources[source],
		default
		];*)


(* ::Subsubsubsection::Closed:: *)
(*Two-Argument*)



ChemDataLookup[
	string:$ChemDataSpecialArgsPat,
	source:
		ChemicalData|ElementData|IsotopeData|
		_String?(KeyMemberQ[$ChemDataSources,#]&)
	]:=
	ChemDataLookup[string, source, source];


(* ::Subsubsubsubsection::Closed:: *)
(*Default*)



ChemDataLookup[
	string:$ChemDataSpecialArgsPat,
	source:
		ChemicalData|ElementData|IsotopeData|
		_String?(KeyMemberQ[$ChemDataSources,#]&),
	default_
	]:=
	ChemDataLookup[string, None, source, default];


(* ::Subsubsubsection::Closed:: *)
(*Source Inference*)



ChemDataLookup[
	string:$ChemDataSpecialArgsPat,
	attr_
	]:=
	ChemDataLookup[
		string,
		attr,
		ChemDataSource@string
		];


(* ::Subsubsubsubsection::Closed:: *)
(*Default*)



ChemDataLookup[
	string:$ChemDataSpecialArgsPat,
	attr_,
	default_
	]:=
	ChemDataLookup[
		string,
		attr,
		ChemDataSource@string,
		default
		];


(* ::Subsubsubsection::Closed:: *)
(*Simple listability*)



ChemDataLookup[l_List,a__]:=
	ChemDataLookup[#,a]&/@l;


(* ::Subsubsubsection::Closed:: *)
(*Query handling*)



ChemDataLookup[Query[a__], b__]:=
	ChemDataLookup[ChemDataQuery@@Flatten[{a}, 1], b];


(* ::Subsubsubsection::Closed:: *)
(*Operator Form*)



(*ChemDataLookup[attr:Except[_Association]][
	string:Except[_Key]]:=
	ChemDataLookup[string,attr];
ChemDataLookup[spc:_Association][string_]:=
	ChemDataLookup[
		string,
		Lookup[spc,"Property",None],
		Lookup[spc,"Source",Sequence[]](*,
		Lookup[spc,"Default",Sequence[]]*)
		];*)


(* ::Subsection:: *)
(*Autocompletions*)



PackageAddAutocompletions[
	"ChemDataLookup",
	{
		None,
		Keys@$ChemDataSources,
		Join[
			ToString/@{ElementData,IsotopeData,ChemicalData},
			Keys@$ChemDataSources
			]
		}
	]


End[];



