(* ::Package:: *)

(* Autogenerated Package *)

$WSimClassPath::usage="The path on which to look for WSim class files";
WSimGetClassNames::usage="";
WSimGetClassProperties::usage="";
WSimApplyClassProperties::usage="";
WSimLoadClass::usage="Loads the WSim Class";


Begin["`Private`"];


(* ::Subsection:: *)
(*Class System*)



(* ::Subsubsection::Closed:: *)
(*$WSimClassPath*)



$WSimClassPath=
	{
		PackageFilePath["Resources", "Extensions", "WSim", "Classes"],
		FileNameJoin@{
			$UserBaseDirectory, "ApplicationData", 
			"ChemTools", "Extensions", "WSim", "Classes"
			}
		};


(* ::Subsubsection::Closed:: *)
(*WSimGetClassNames*)



WSimGetClassNames[]:=
	FileBaseName/@FileNames[___~~(".m"|".wl"), $WSimClassPath]


(* ::Subsubsection::Closed:: *)
(*WSimGetClassProperties*)



WalkerSimulator::noclass="No WSim class found at ``. Must return settings association.";


WSimGetClassProperties[obj_, f_]:=
	With[
		{
			testCont=
				Context[WalkerSimulator]<>
					StringDelete[FileBaseName[f], Except[WordCharacter]]<>"`"
			},	
		Block[{$ContextPath={"System`"}},
			Internal`WithLocalSettings[
				BeginPackage[
					testCont,
					Select[$PackageContexts, StringContainsQ["WSim"]]
					],
				With[{res=Get[f]},
					If[AssociationQ@res,
						WSimApplyClassSettings[obj, res],
						Message[WalkerSimulator::noclass, f];
						Throw[$Failed]
						]
					],
				If[$Context===testCont, EndPackage[]]
				]
			]
		]


(* ::Subsubsection::Closed:: *)
(*WSimApplyClassSettings*)



WSimApplyClassSettings[obj_, res_]:=
	AssociateTo[
		obj,
		KeyDrop[res, Keys@obj]
		]


(* ::Subsubsection::Closed:: *)
(*WSimLoadClass*)



WSimLoadClass[obj_, class_]:=
	Replace[FileNames[class~~(".m"|".wl"), $WSimClassPath],
		{
			{f_, ___}:>
				WSimGetClassProperties[obj, f]
			}
		]


End[];



