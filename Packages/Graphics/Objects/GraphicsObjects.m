(* ::Package:: *)

(* Autogenerated Package *)

ChemGraphicsBondShapeFunction2D::usage="";
ChemGraphicsBondShapeFunction3D::usage="";
ChemGraphicsBondObjects::usage="";
ChemGraphicsBondObjects3D::usage="";


ChemGraphicsAtomShapeFunction2D::usage="";
ChemGraphicsAtomShapeFunction3D::usage="";
ChemGraphicsAtomObjects::usage="";
ChemGraphicsAtomObjects3D::usage="";


ChemGraphicsSymmetryObjects::usage=
  "";
(*ChemGraphicsSymmetryGraphics::usage=
	"Plots a collection of symmetry elements";*)


ChemGraphicsAxesObjects::usage="";
ChemGraphicsAxesObjects3D::usage="";


ChemGraphicsAtomsetObjects::usage="";
ChemGraphicsAtomsetObjects3D::usage="";


Begin["`Private`"];


(* ::Subsection:: *)
(*Axes*)



(* ::Subsubsection::Closed:: *)
(*2D*)



ChemGraphicsAxesObjects[
  origin_,
  boxSize_,
  axes_
  ]:=
  ChemGraphicsAxesObjects3D[
    origin[[;;2]],
    boxSize,
    axes[[All, ;;2]]
    ]


(* ::Subsubsection::Closed:: *)
(*3D*)



ChemGraphicsAxesObjects3D[
  origin_,
  boxSize_,
  axes_
  ]:=
  {
    AbsoluteThickness[2],
    Arrowheads[{-.05,.05}, Appearance->"Projected"],
    MapThread[
      {#2, 
        Arrow@{
          origin-boxSize*#, origin+boxSize*#}, 
          Inset[#3, origin+(.1+boxSize)*#]
          }&,
      {
        axes,
        {
          Hue[.1, .5,  .8], 
          Hue[.4, .5,  .5],
          Hue[ 0,  1, .65]
          },
        {"A","B","C"}
        }
      ]
    }


(* ::Subsection:: *)
(*Symmetry Elements*)



(* ::Subsubsection::Closed:: *)
(*SymmetryObjects*)



ChemGraphicsSymmetryObjects[
  symmEls_Association,
  boxSize_?NumericQ,
  OptionsPattern[]
  ]:=
  With[{symm=symmEls["Elements"], m=boxSize, M=boxSize+.15},
    <|
      "InversionCenter"->
        If[symm["CenterSymmetric"],
          {Red,AbsolutePointSize@10,Point@symm["Center"]},
          {}
          ],
      "RotationAxes"->
        {
          AbsoluteThickness[1],
          Map[
            With[{v=Normalize[Last@#-symm["Center"]]},
              Line@{symm["Center"]+v*M,symm["Center"]-v*M}
              ]&,
            symm["RotationAxes"]
            ]
          },
      "SymmetryPlanes"->
        Map[
          With[{n=Cross[symm["Center"]-First@#,symm["Center"]-Last@#],N=48},
            {
              Opacity[.25],
              Polygon@
                NestList[
                  RotationTransform[2.\[Pi]/N,n,symm["Center"]],
                  symm["Center"]+m*Normalize[symm["Center"]-First@#],
                  N]
              }
            ]&,
          symm["SymmetryPlanes"]
          ],
      "ScrewAxes"->
        {
          Red,
          AbsoluteThickness[2],
          Dashed,
          Map[
            With[{v=Normalize[Last@#-symm["Center"]]},
              Line@{symm["Center"]+v*M,symm["Center"]-v*M}
              ]&,
            symm["ScrewAxes"]  
            ]
          }
      |>
    ]


Options[ChemGraphicsSymmetryObjects]:=
  Options[ChemComputeSymmetryElements];
ChemGraphicsSymmetryObjects[
  atoms_?(Length[#]>=3&),
  ops:OptionsPattern[]
  ]:=
  With[{
    symm=
      ChemComputeSymmetryElements[atoms,
        "ReturnFunctions"->False,
        "DetermineClasses"->False,
        ops
        ],
    m=.5+Max@
        Map[Abs,
          Thread@CoordinateBoundingBox[Last/@atoms]
          ]},
    ChemGraphicsSymmetryObjects[symm,m]
    ]


(* ::Subsubsection::Closed:: *)
(*SymmetryGraphics*)



(*Options[ChemGraphicsSymmetryGraphics]=
	Join[
		Options[Graphics3D],
		Options[ChemGraphicsSymmetryObjects]
		];
ChemGraphicsSymmetryGraphics[
	symm_Association,
	boxSize_?NumericQ,
	types:
		"InversionCenter"|"RotationAxes"|"SymmetryPlanes"|"ScrewAxes"|
			{("InversionCenter"|"RotationAxes"|"SymmetryPlanes"|"ScrewAxes")..}:
		{"InversionCenter","RotationAxes","SymmetryPlanes","ScrewAxes"},
	ops:OptionsPattern[]
	]:=
	Graphics3D[
		Lookup[
			ChemGraphicsSymmetryGraphics[symm,boxSize,
				Sequence@@FilterRules[{ops},Options@ChemGraphicsSymmetryGraphics]
				],
			types
			],
		ops
		];
ChemGraphicsSymmetryGraphics[
	atoms_List?(Length[#]>=3&),
	ops:OptionsPattern[]
	]:=
	With[{
		symm=ChemComputeSymmetryElements@atoms,
		m=.5+Max@
				Map[Abs,
					Thread@CoordinateBoundingBox[Last/@atoms]
					]},
		ChemGraphicsSymmetryGraphics[symm,m,ops]
		]
	*)


(* ::Subsection:: *)
(*AtomGraphic*)



(* ::Subsubsection::Closed:: *)
(*ChemGraphicsAtomObjectsWrapper*)



Options[ChemGraphicsAtomObjectsWrapper]=
  {
    "AtomicRadius"->Automatic,
    "AtomColor"->Automatic,
    "AtomStyle"->Automatic,
    "RadiusScaling"->.15,
    "AtomLabel"->
      Automatic,
    "AtomShapeFunction"->
      Automatic
    };
ChemGraphicsAtomObjectsWrapper[
  elSet:{{_String, _List, ___}, ___},
  fn:Except[_?OptionQ],
  ops:OptionsPattern[]
  ]:=
  Module[
  {
    atoms=Cases[elSet, {_String, _List, ___}],
    color,
    style,
    position,
    lab,
    radius
    },
    color=
      Replace[OptionValue["AtomColor"],
        Automatic:>
          MapThread[
            If[#2===None, #, #2]&,
            {
              ChemDataLookup[atoms[[All, 1]], "AtomColors"],
              Lookup[
                Map[Cases[#, _?OptionQ]&, atoms],
                "Color",
                None
                ]
              }
            ]
        ];
    style=
      Replace[OptionValue["AtomStyle"],
        Automatic:>
          Lookup[
            Map[Cases[#, _?OptionQ]&, atoms],
            "Style",
            None
            ]
        ];
    position=
      atoms[[All, 2]];
    lab=
      Replace[OptionValue["AtomLabel"],
        {
          Automatic:>
            Lookup[
              Map[Cases[#, _?OptionQ]&, atoms],
              "Label",
              None
              ],
          "Numbered":>
            Range[Length@Flatten@atoms],
          "Element"->
            atoms[[All, 1]]
          }
        ];
    radius=
      Flatten[List@Replace[
        OptionValue@"AtomicRadius",
        Automatic:>(
          MapThread[
            If[#2===None, #, #2]&,
            {
              OptionValue@"RadiusScaling"*
                QuantityMagnitude@
                  UnitConvert[ChemDataLookup[atoms[[All, 1]], "Radius"], "Angstroms"],
              Lookup[
                Map[Cases[#, _?OptionQ]&, atoms],
                "Radius",
                None
                ]
              }
            ]
          )
        ],
      1
      ];
    MapThread[
      fn,
      {
        Take[
          Flatten[ConstantArray[color, Length[atoms]], 1],
          Length[atoms]
          ],
        position,
        Take[
          Flatten[ConstantArray[radius, Length[atoms]], 1],
          Length[atoms]
          ],
        Take[
          Flatten[ConstantArray[lab, Length[atoms]], 1],
          Length[atoms]
          ],
        Take[
          Flatten[ConstantArray[style, Length[atoms]], 1],
          Length[atoms]
          ]
        }
      ]
    ];


(* ::Subsubsection::Closed:: *)
(*AtomShapeFunction2D*)



ChemGraphicsAtomShapeFunction2D[
  color_,
  position_,
  radius_,
  label_,
  style_
  ]:=
  {
    {
      EdgeForm[GrayLevel[0, .2]],
      Replace[style, None->Nothing],
      color,
      Disk[position[[;;2]], radius]
      },
    Replace[label,
      {
        None->
          Nothing,
        Text[s_]:>
          Text[
              Style[
                s,
                If[ColorDistance[color, Black]>.7, Black, White]
                ],
              position[[;;2]]
              ],
        e_:>
          Inset[
            Style[e,
              If[ColorDistance[color, Black]>.7, Black, White]],
            position[[;;2]]
            ]
        }]
    }


(* ::Subsubsection::Closed:: *)
(*AtomGraphics*)



Options[ChemGraphicsAtomObjects]=
  Options[ChemGraphicsAtomObjectsWrapper];
ChemGraphicsAtomObjects[
  elSet:{{_String, _List, ___}, ___},
  ops:OptionsPattern[]
  ]:=
  ChemGraphicsAtomObjectsWrapper[
    elSet,
    Replace[OptionValue["AtomShapeFunction"],
      Automatic->ChemGraphicsAtomShapeFunction2D
      ],
    ops
    ];
ChemGraphicsAtomObjects[
  elSet:{_String, _List, ___},
  ops:OptionsPattern[]
  ]:=
  ChemGraphicsAtomObjects[{elSet}, ops]


(* ::Subsubsection::Closed:: *)
(*AtomShapeFunction3D*)



ChemGraphicsAtomShapeFunction3D[
  color_,
  position_,
  radius_,
  label_,
  style_
  ]:=
  {
    {
      Replace[style,
        None->Nothing
        ],
      color,
      Sphere[position, radius]
      },
    Replace[label,
      {
        None->
          Nothing,
        Text[s_]:>
          Text[
              Style[
                s,
                If[ColorDistance[color, Black]>.7, Black, White]
                ],
              position
              ],
        e_:>
          Map[
            Inset[
              Style[
                e,
                If[ColorDistance[color, Black]>.7, Black, White]
                ],
              position+#
              ]&,
            (.15+radius)*
              If[radius>.5,
                Join[IdentityMatrix[3], -IdentityMatrix[3]],
                {{0,0,1}}
                ]
            ]
        }]
    }


(* ::Subsubsection::Closed:: *)
(*AtomGraphics3D*)



Options[ChemGraphicsAtomObjects3D]=
  Options[ChemGraphicsAtomObjectsWrapper];
ChemGraphicsAtomObjects3D[
  elSet:{{_String, _List, ___}, ___},
  ops:OptionsPattern[]
  ]:=
  ChemGraphicsAtomObjectsWrapper[
    elSet,
    Replace[OptionValue["AtomShapeFunction"],
      Automatic->ChemGraphicsAtomShapeFunction3D
      ],
    ops
    ];
ChemGraphicsAtomObjects3D[
  elSet:{_String, _List, ___},
  ops:OptionsPattern[]
  ]:=
  ChemGraphicsAtomObjects3D[{elSet}, ops]


(* ::Subsection:: *)
(*BondGraphics*)



(* ::Subsubsection::Closed:: *)
(*BondGraphicsCommon*)



Options[ChemGraphicsBondObjectsCommon]=
  {
  "DoubleBondSeparation"->.0075,
  "TripleBondSeparation"->.0075,
  "BondThickness"->.05,
  "BondDashing"->.025,
  "RadiusScaling"->.125,
  "BondRadius"->Automatic,
  "BondColor"->Automatic,
  "BondShapeFunction"->Automatic,
  "BondLabel"->Automatic,
  "BondStyle"->Automatic
  };
ChemGraphicsBondObjectsCommon[
  elSet:
    {
      {{_String, _List, ___}, {_String, _List, ___}, ___},
      ___
      },
  shape_,
  prepper_,
  ops:OptionsPattern[]
  ]:=
    Module[
    {
      pairs=
        Cases[elSet, {{_String, _List, ___}, {_String, _List, ___}, ___}],
      positions,
      radii,
      types,
      lab,
      cols,
      styles
      },
    positions=
      pairs[[All, {1, 2}, 2]];
    radii=
      QuantityMagnitude@
        UnitConvert[
          ChemDataLookup[
            pairs[[All, {1, 2}, 1]],
            "Radius"
            ],
          "Angstroms"
          ];
    lab=
      Replace[
        OptionValue["BondLabel"],
        {
          Automatic:>
            Lookup[
              Map[Cases[#, _?OptionQ]&, pairs],
              "Label",
              None
              ],
          "Numbered"->
            Range[Length@pairs]
          }
        ];
    cols=
      Replace[
        OptionValue["BondColor"],
        {
          Automatic:>
            MapThread[
              If[#2===None, #, #2]&,
              {
                ChemDataLookup[pairs[[All, {1, 2}, 1]], "AtomColors"],
                Lookup[
                  Map[Cases[#, _?OptionQ]&, pairs],
                  "Color",
                  None
                  ]
                }
              ],
          c:Except[{_, _}]:>
            {c, c}
          }
        ];
    styles=
      Replace[
        OptionValue["BondStyle"],
        {
          Automatic:>
            Lookup[
              Map[Cases[#, _?OptionQ]&, pairs],
              "Style",
              None
              ]
          }
        ];
    types=
      Lookup[
        Map[Cases[#, _?OptionQ]&, pairs],
        "Type",
        None
        ];
    Join@@
      MapThread[
        prepper[shape, ##, ops]&,
        {
          positions,
          Take[
            Flatten[
              ConstantArray[
                cols,
                Length@pairs
                ],
              1
              ],
            Length@pairs
            ],
          radii,
          pairs,
          types,
          Take[
            Flatten[
              ConstantArray[
                lab,
                Length@pairs
                ],
              1
              ],
            Length@pairs
            ],
          Take[
            Flatten[
              ConstantArray[
                styles,
                Length@pairs
                ],
              1
              ],
            Length@pairs
            ]
          }
        ]
    ];


(* ::Subsubsection::Closed:: *)
(*BondGraphicsEvalCommon2D*)



Options[BondGraphicsEvalCommon2D]=
  Options[ChemGraphicsBondObjectsCommon];
BondGraphicsEvalCommon2D[
  fn_, 
  pos_,
  cols_,
  rads_,
  ats_,
  types_,
  labs_,
  styles_,
  ops:OptionsPattern[]
  ]:=
  Block[
    {
      bondGraphicsPositions=pos,
      bondGraphicsColors=cols,
      bondGraphicsRadii=rads,
      bondGraphicsAtoms=ats,
      bondGraphicsType=types,
      bondGraphicsLabel=labs,
      bondGraphicsStyle=styles,
      bondGraphicsVector,
      bondGraphicsDBSep=OptionValue@"DoubleBondSeparation",
      bondGraphicsTBSep=OptionValue@"TripleBondSeparation",
      bondGraphicsThick=OptionValue["BondThickness"],
      bondGraphicsDash=OptionValue["BondDashing"]
      },
    bondGraphicsRadii=
      Replace[OptionValue@"BondRadius",
        {
          Automatic:>(
            OptionValue@"RadiusScaling"*
              QuantityMagnitude@bondGraphicsRadii
            ),
          n_?NumericQ:>
            ConstantArray[n, Length@bondGraphicsAtoms]
          }
        ];
    bondGraphicsVector=
      Subtract@@bondGraphicsPositions//Normalize;
    bondGraphicsPositions=
      Insert[bondGraphicsPositions,
        Mean@{
          First@bondGraphicsPositions-
            bondGraphicsVector*First@bondGraphicsRadii,
          Last@bondGraphicsPositions+
            bondGraphicsVector*Last@bondGraphicsRadii
          },
        2];
    fn[
      bondGraphicsType,
      bondGraphicsColors,
      bondGraphicsPositions,
      ConstantArray[
        Replace[OptionValue@"BondThickness",
          r_Real:>10*r
          ],
        2
        ],
      bondGraphicsLabel,
      bondGraphicsStyle,
      bondGraphicsVector,
      bondGraphicsTBSep,
      bondGraphicsDBSep,
      bondGraphicsThick,
      bondGraphicsDash
      ]
    ]


(* ::Subsubsection::Closed:: *)
(*BondShapeFunction2D*)



(* ::Subsubsubsection::Closed:: *)
(*ChemGraphicsSadLine*)



ChemGraphicsSadLine[{pt1_, pt2_}, thicc_]:=
With[{sadang=Quiet@VectorAngle[pt2-pt1, {1, 0}]},
  If[sadang===Indeterminate,
    Nothing,
    Rotate[
      Rectangle[
        pt1-
          {0, thicc/2},
        pt1+
          {Norm[Subtract[pt2, pt1]], thicc/2}
        ],
      Replace[Sign[(pt2-pt1)[[2]]], Except[-1]->1]*
        VectorAngle[pt2-pt1, {1, 0}],
      pt1
      ]
    ]
  ]


(* ::Subsubsubsection::Closed:: *)
(*SingleBonds*)



(* ::Subsubsubsubsection::Closed:: *)
(*bondGraphics2D1*)



bondGraphics2D1[
  bondGraphicsColors_,
  bondGraphicsPositions_,
  bondGraphicsLabel_,
  style_,
  bondGraphicThickness_
  ]:=
  {
    {
      EdgeForm[GrayLevel[0, .2]],
      Replace[None->Nothing]@style,
      {
        First@bondGraphicsColors,
        ChemGraphicsSadLine[bondGraphicsPositions[[;;2, ;;2]], bondGraphicThickness],
        Last@bondGraphicsColors,
        ChemGraphicsSadLine[bondGraphicsPositions[[2;;, ;;2]], bondGraphicThickness]
        }
      },
    Replace[bondGraphicsLabel,{
      None->Nothing,
      e_:>
        Text[
          Style[
            e,
            If[ColorDistance[bondGraphicsColors[[1]], Black]>.7, Black, White]
            ],
          bondGraphicsPositions[[2, ;;2]]+{0, .1}
          ]
      }]
    };


(* ::Subsubsubsubsection::Closed:: *)
(*bondGraphics2D1Dashed*)



bondGraphics2D1Dashed[
  bondGraphicsColors_,bondGraphicsPositions_,
  bondGraphicsLabel_,style_,
  bondGraphicThickness_,dashing_]:=
  bondGraphics2D1[
    bondGraphicsColors,
    bondGraphicsPositions,
    bondGraphicsLabel,
    Replace[style, 
      {
        None->Dashing[dashing], 
        e_:>{Dashing[dashing], style}
        }
      ],
    bondGraphicThickness
    ]


(* ::Subsubsubsection::Closed:: *)
(*DoubleBonds*)



(* ::Subsubsubsubsection::Closed:: *)
(*bondGraphics2D2*)



bondGraphics2D2[
  bondGraphicsColors_,bondGraphicsPositions_,
  bondGraphicsLabel_,style_,
  bondGraphicsVector_,bondGraphicSeparation_,
  bondGraphicThickness_]:=
  With[{perp=
      ConstantArray[
        (bondGraphicSeparation+bondGraphicThickness)*
          If[With[{g=Normalize@bondGraphicsVector},g!={0,0,1}&&g!={0,0,-1}],
            Cross[bondGraphicsVector, {0, 0, 1}],
            {0,0,0}
            ][[;;2]],
        2]},
    {
      {
        EdgeForm[GrayLevel[0, .2]],
        Replace[None->Nothing]@style,
        {
          First@bondGraphicsColors,
          ChemGraphicsSadLine[
            bondGraphicsPositions[[;;2, ;;2]]-perp, 
            bondGraphicThickness
            ],
          ChemGraphicsSadLine[
            bondGraphicsPositions[[;;2, ;;2]]+perp, 
            bondGraphicThickness
            ]
          },
        {
          Last@bondGraphicsColors,
          ChemGraphicsSadLine[
            bondGraphicsPositions[[2;;, ;;2]]-perp, 
            bondGraphicThickness
            ],
          ChemGraphicsSadLine[
            bondGraphicsPositions[[2;;, ;;2]]+perp, 
            bondGraphicThickness
            ]
          }
        },
      Replace[bondGraphicsLabel,{
        None->Nothing,
        e_:>
          Text[
            Style[
              e,
              If[ColorDistance[bondGraphicsColors[[1]], Black]>.7, Black, White]
              ],
          bondGraphicsPositions[[2, ;;2]]+If[perp!={0, 0}, 1.1*perp, {-.1, 0}]
          ]
        }]
      }
    ];


(* ::Subsubsubsubsection::Closed:: *)
(*bondGraphics2D2Dashed*)



bondGraphics2D2Dashed[
  bondGraphicsColors_,bondGraphicsPositions_,
  bondGraphicsLabel_,style_,
  bondGraphicsVector_,bondGraphicSeparation_,
  bondGraphicThickness_,dashing_]:=
  bondGraphics2D2[
    bondGraphicsColors,
    bondGraphicsPositions,
    bondGraphicsLabel,
    Replace[style, 
      {
        None->Dashing[dashing], 
        e_:>{Dashing[dashing], style}
        }
      ],
    bondGraphicsVector,
    bondGraphicSeparation,
    bondGraphicThickness,
    dashing
    ]


(* ::Subsubsubsection::Closed:: *)
(*TripleBonds*)



(* ::Subsubsubsubsection::Closed:: *)
(*bondGraphics3D3*)



bondGraphics2D3[
  bondGraphicsColors_,bondGraphicsPositions_,
  bondGraphicsLabel_, style_,
  bondGraphicsVector_,bondGraphicSeparation_,
  bondGraphicThickness_]:=
  With[{perp=
      ConstantArray[
        (bondGraphicSeparation+bondGraphicThickness)*
          If[With[{g=Normalize@bondGraphicsVector},g!={0,0,1}&&g!={0,0,-1}],
            Cross[bondGraphicsVector, {0, 0, 1}],
            {0,0,0}
            ][[;;2]],
        2]},
    {
      {
        EdgeForm[GrayLevel[0, .2]],
        Replace[None->Nothing]@style,
        {
          First@bondGraphicsColors,
          ChemGraphicsSadLine[
            bondGraphicsPositions[[;;2, ;;2]], 
            bondGraphicThickness
            ],
          ChemGraphicsSadLine[
            bondGraphicsPositions[[;;2, ;;2]]-perp, 
            bondGraphicThickness
            ],
          ChemGraphicsSadLine[
            bondGraphicsPositions[[;;2, ;;2]]+perp, 
            bondGraphicThickness
            ]
          },
        {
          Last@bondGraphicsColors,
          ChemGraphicsSadLine[
            bondGraphicsPositions[[2;;, ;;2]], 
            bondGraphicThickness
            ],
          ChemGraphicsSadLine[
            bondGraphicsPositions[[2;;, ;;2]]-perp, 
            bondGraphicThickness
            ],
          ChemGraphicsSadLine[
            bondGraphicsPositions[[2;;, ;;2]]+perp, 
            bondGraphicThickness
            ]
          }
        },
      Replace[bondGraphicsLabel,{
        None->Nothing,
        e_:>
          Text[
            Style[
              e,
              If[ColorDistance[bondGraphicsColors[[1]], Black]>.7, Black, White]
              ],
          bondGraphicsPositions[[2, ;;2]]+If[perp!={0, 0}, 1.1*perp, {-.1, 0}]
          ]
        }]
      }
    ];


(* ::Subsubsubsubsection::Closed:: *)
(*bondGraphics2D3Dashed*)



bondGraphics2D3Dashed[
  bondGraphicsColors_,bondGraphicsPositions_,
  bondGraphicsLabel_, style_,
  bondGraphicsVector_,bondGraphicSeparation_,
  bondGraphicThickness_,dashing_]:=
  bondGraphics2D3[
    bondGraphicsColors,
    bondGraphicsPositions,
    bondGraphicsLabel,
    Replace[style, 
      {
        None->Dashing[dashing], 
        e_:>{Dashing[dashing], style}
        }
      ],
    bondGraphicsVector,
    bondGraphicSeparation,
    bondGraphicThickness,
    dashing
    ]


(* ::Subsubsubsection::Closed:: *)
(*BondShapeFunction2D*)



ChemGraphicsBondShapeFunction2D[
  type_,
  colors_,
  positions_,
  radii_,
  label_,
  style_,
  vector_,
  tbSep_,
  dbSep_,
  thick_,
  dashing_
  ]:=
  Which[
    tbSep=!=None&&type==3//TrueQ,
      bondGraphics2D3[
        colors, positions,
        label, style,
        vector, tbSep,
        thick
        ],
    dbSep=!=None&&type==2//TrueQ,
      bondGraphics2D2[
        colors,positions, 
        label, style,
        vector, dbSep,
        thick
        ],
    (type==3&&tbSep===None)||
      (type==2&&dbSep===None)||
        type==1//TrueQ,
      bondGraphics2D1[
        colors, positions, 
        label, style,
        thick],
    tbSep=!=None&&type>2//TrueQ,
      bondGraphics2D3Dashed[
        colors, positions, 
        label, style,
        vector, tbSep,
        thick, dashing],
    dbSep=!=None&&type>1//TrueQ,
      bondGraphics2D2Dashed[
        colors, positions, 
        label, style,
        vector, dbSep,
        thick, dashing
        ],
    True,
      bondGraphics2D1Dashed[
        colors, positions, 
        label, style,
        thick, dashing
        ]
    ]


(* ::Subsubsection::Closed:: *)
(*BondGraphics*)



Options[ChemGraphicsBondObjects]=
  Options[ChemGraphicsBondObjectsCommon];
ChemGraphicsBondObjects[
  elSet:
    {
      {{_String, _List, ___}, {_String, _List, ___}, ___},
      ___
      },
  ops:OptionsPattern[]
  ]:=
  ChemGraphicsBondObjectsCommon[
    elSet,
    Replace[
      OptionValue["BondShapeFunction"], 
      Automatic->ChemGraphicsBondShapeFunction2D
      ],
    BondGraphicsEvalCommon2D,
    ops
    ]


(* ::Subsubsection::Closed:: *)
(*BondGraphicsEvalCommon3D*)



Options[BondGraphicsEvalCommon3D]=
  Options[ChemGraphicsBondObjectsCommon];
BondGraphicsEvalCommon3D[
  fn_, 
  pos_,
  cols_,
  rads_,
  ats_,
  types_,
  labs_,
  styles_,
  ops:OptionsPattern[]
  ]:=
  Block[
    {
      bondGraphicsAtoms=ats,
      bondGraphicsType=types,
      bondGraphicsPositions=pos,
      bondGraphicsColors=cols,
      bondGraphicsRadii=rads,
      bondGraphicsLab=labs,
      bondGraphicsStyle=styles,
      bondGraphicsVector,
      bondGraphicsDBSep=OptionValue@"DoubleBondSeparation",
      bondGraphicsTBSep=OptionValue@"TripleBondSeparation",
      bondGraphicsThick=OptionValue["BondThickness"],
      bondGraphicsDash=OptionValue["BondDashing"]
      },
      bondGraphicsRadii=
        Replace[OptionValue@"BondRadius",
          {
            Automatic:>
              (
                OptionValue@"RadiusScaling"*bondGraphicsRadii
                ),
            n_?NumericQ:>
              ConstantArray[n, Length@bondGraphicsAtoms]
            }];
      bondGraphicsVector=Subtract@@bondGraphicsPositions//Normalize;
      bondGraphicsPositions=
        Insert[
          bondGraphicsPositions,
          Mean@
            {
              First@bondGraphicsPositions-
                bondGraphicsVector*First@bondGraphicsRadii,
              Last@bondGraphicsPositions+
                bondGraphicsVector*Last@bondGraphicsRadii
              },
          2];
      fn[
        bondGraphicsType,
        bondGraphicsColors,
        bondGraphicsPositions,
        bondGraphicsLab,
        bondGraphicsStyle,
        bondGraphicsVector,
        bondGraphicsTBSep,
        bondGraphicsDBSep,
        bondGraphicsThick,
        bondGraphicsDash
        ]
      ]


(* ::Subsubsection::Closed:: *)
(*BondShapeFunction3D*)



(* ::Subsubsubsection::Closed:: *)
(*SingleBonds*)



(* ::Subsubsubsubsection::Closed:: *)
(*bondGraphics3D1*)



bondGraphics3D1[
  bondGraphicsColors_,
  bondGraphicsPositions_,
  bondGraphicsLabel_,
  style_,
  bondGraphicThickness_
  ]:=
  {
    {
      EdgeForm[None],
      Replace[None->Nothing]@style,
      {
        First@bondGraphicsColors,
        Cylinder[bondGraphicsPositions[[;;2]],bondGraphicThickness],
        Last@bondGraphicsColors,
        Cylinder[bondGraphicsPositions[[2;;]],bondGraphicThickness]
        }
      },
    Replace[bondGraphicsLabel,{
      None->Nothing,
      e_:>
        Map[
          Text[
            Style[
              e,
              If[ColorDistance[bondGraphicsColors[[1]], Black]>.7, Black, White]
              ],
            Mean@bondGraphicsPositions+#
            ]&,
          (.25+bondGraphicThickness)*
          If[bondGraphicThickness>.5,
              Join[IdentityMatrix[3], -IdentityMatrix[3]],
              {{0,0,1}}
              ]
          ]
      }]
    };


(* ::Subsubsubsubsection::Closed:: *)
(*bondGraphics3D1Dashed*)



bondGraphics3D1Dashed[
  bondGraphicsColors_,bondGraphicsPositions_,
  bondGraphicsLabel_,style_,
  bondGraphicThickness_,dashing_]:=
  {
    {
      EdgeForm[None],
      Replace[None->Nothing]@style,
      {
        First@bondGraphicsColors,
        Cylinder[#,bondGraphicThickness]&/@
          Partition[
            With[{v=Subtract@@bondGraphicsPositions[[;;2]]},
              With[{u=Normalize@v,n=Norm@v,p=bondGraphicsPositions[[2]]},
                p+#*u&/@Range[0,n,Min@{dashing,n/2.}]
                ]
              ],
            2],
        Last@bondGraphicsColors,
        Cylinder[#,bondGraphicThickness]&/@
          Partition[
            With[{v=Subtract@@bondGraphicsPositions[[2;;]]},
              With[{u=Normalize@v,n=Norm@v,p=bondGraphicsPositions[[3]]},
                p+#*u&/@Range[0,n,Min@{dashing,n/2.}]
                ]
              ],
            2]
        }
      },
    Replace[bondGraphicsLabel,
      {
        None->Nothing,
        e_:>
          Map[
            Text[
              Style[
                e,
                If[ColorDistance[bondGraphicsColors[[1]], Black]>.7, Black, White]
                ],
              Mean@bondGraphicsPositions+#
              ]&,
            (.25+bondGraphicThickness)*
              If[bondGraphicThickness>.5,
                Join[IdentityMatrix[3], -IdentityMatrix[3]],
                {{0,0,1}}
                ]
            ]
        }]
    };


(* ::Subsubsubsection::Closed:: *)
(*DoubleBonds*)



(* ::Subsubsubsubsection::Closed:: *)
(*bondGraphics3D2*)



bondGraphics3D2[
  bondGraphicsColors_,bondGraphicsPositions_,
  bondGraphicsLabel_,style_,
  bondGraphicsVector_,bondGraphicSeparation_,
  bondGraphicThickness_]:=
  With[{perp=
      ConstantArray[
        (bondGraphicSeparation+bondGraphicThickness)*
          If[With[{g=Normalize@bondGraphicsVector},g!={0,0,1}&&g!={0,0,-1}],
            Cross[bondGraphicsVector,{0,0,1}],
            {1,0,0}
            ],
        2]},
    {
      {
        EdgeForm[None],
        Replace[None->Nothing]@style,
        {
          First@bondGraphicsColors,
          Cylinder[bondGraphicsPositions[[;;2]]-perp,
            bondGraphicThickness],
          Cylinder[bondGraphicsPositions[[;;2]]+perp,
            bondGraphicThickness]
          },
        {
          Last@bondGraphicsColors,
          Cylinder[bondGraphicsPositions[[2;;]]-perp,
            bondGraphicThickness],
          Cylinder[bondGraphicsPositions[[2;;]]+perp,
            bondGraphicThickness]
          }
        },
      Replace[bondGraphicsLabel,{
        None->Nothing,
        e_:>
          Map[
            Text[
              Style[
                e,
                If[ColorDistance[bondGraphicsColors[[1]], Black]>.7, Black, White]
                ],
              Mean@bondGraphicsPositions+#
              ]&,
            (.25+bondGraphicThickness)*
            If[bondGraphicThickness>.5,
              Join[IdentityMatrix[3], -IdentityMatrix[3]],
              {{0,0,1}}
              ]
            ]
        }]
      }
    ];


(* ::Subsubsubsubsection::Closed:: *)
(*bondGraphics3D2Dashed*)



bondGraphics3D2Dashed[
  bondGraphicsColors_,bondGraphicsPositions_,
  bondGraphicsLabel_,style_,
  bondGraphicsVector_,bondGraphicSeparation_,
  bondGraphicThickness_,dashing_]:=
  With[{perp=
      ConstantArray[
        (bondGraphicSeparation+bondGraphicThickness)*
          If[With[{g=Normalize@bondGraphicsVector},g!={0,0,1}&&g!={0,0,-1}],
            Cross[bondGraphicsVector,{0,0,1}],
            {1,0,0}
            ],
        2]},
    {
      {
        EdgeForm[None],
        Replace[None->Nothing]@style,
        {
          First@bondGraphicsColors,
          Cylinder[#,bondGraphicThickness]&/@
            Partition[
              With[{v=Subtract@@bondGraphicsPositions[[;;2]]},
                With[{
                    u=Normalize@v,n=Norm@v,
                    p=bondGraphicsPositions[[2]]},
                    p+#*u-First@perp&/@Range[0,n,Min@{dashing,n/2.}]
                  ]
                ],
              2],
          Cylinder[bondGraphicsPositions[[;;2]]+perp,
            bondGraphicThickness]
          },
        {
          Last@bondGraphicsColors,
          Cylinder[#,bondGraphicThickness]&/@
            Partition[
              With[{v=Subtract@@bondGraphicsPositions[[2;;]]},
                With[{
                    u=Normalize@v,n=Norm@v,
                    p=bondGraphicsPositions[[3]]},
                    p+#*u-First@perp&/@Range[0,n,Min@{dashing,n/2.}]
                  ]
                ],
              2],
          Cylinder[bondGraphicsPositions[[2;;]]+perp,
            bondGraphicThickness]
          }
        },
      Replace[bondGraphicsLabel,{
        None->Nothing,
        e_:>
          Map[
            Text[
              Style[
                e,
                If[ColorDistance[bondGraphicsColors[[1]], Black]>.7, Black, White]
                ],
              Mean@bondGraphicsPositions+#
              ]&,
            (.25+bondGraphicThickness)*
            If[bondGraphicThickness>.5,
              Join[IdentityMatrix[3], -IdentityMatrix[3]],
              {{0,0,1}}
              ]
            ]
        }]
      }
    ];


(* ::Subsubsubsection::Closed:: *)
(*TripleBonds*)



(* ::Subsubsubsubsection::Closed:: *)
(*bondGraphics3D3*)



bondGraphics3D3[
  bondGraphicsColors_,bondGraphicsPositions_,
  bondGraphicsLabel_, style_,
  bondGraphicsVector_,bondGraphicSeparation_,
  bondGraphicThickness_]:=
  With[{perps=
      NestList[
        RotationMatrix[2.\[Pi]/3,bondGraphicsVector].#&,
        (bondGraphicSeparation+bondGraphicThickness)*
          If[With[{g=Normalize@bondGraphicsVector},g!={0,0,1}&&g!={0,0,-1}],
            Cross[bondGraphicsVector,{0,0,1}],
            {1,0,0}
            ],
        2
        ]},
    {
      {
        EdgeForm[None],
        Replace[None->Nothing]@style,
        {
          First@bondGraphicsColors,
          Cylinder[bondGraphicsPositions[[;;2]]+ConstantArray[#,2],
            bondGraphicThickness]&/@perps
          },
        {
          Last@bondGraphicsColors,
          Cylinder[bondGraphicsPositions[[2;;]]+ConstantArray[#,2],
            bondGraphicThickness]&/@perps
          }
        },
      Replace[bondGraphicsLabel,{
        None->Nothing,
        e_:>
          Map[
            Text[
              Style[
                e,
                If[ColorDistance[bondGraphicsColors[[1]], Black]>.7, Black, White]
                ],
              Mean@bondGraphicsPositions+#
              ]&,
            (.25+bondGraphicThickness)*
            If[bondGraphicThickness>.5,
              Join[IdentityMatrix[3], -IdentityMatrix[3]],
              {{0,0,1}}
              ]
            ]
        }]
      }
    ];


(* ::Subsubsubsubsection::Closed:: *)
(*bondGraphics3D3Dashed*)



bondGraphics3D3Dashed[
  bondGraphicsColors_,bondGraphicsPositions_,
  bondGraphicsLabel_, style_,
  bondGraphicsVector_,bondGraphicSeparation_,
  bondGraphicThickness_,dashing_]:=
    With[{perps=
      NestList[
        RotationMatrix[2.\[Pi]/3,bondGraphicsVector].#&,
        (bondGraphicSeparation+bondGraphicThickness)*
          If[With[{g=Normalize@bondGraphicsVector},g!={0,0,1}&&g!={0,0,-1}],
            Cross[bondGraphicsVector,{0,0,1}],
            {1,0,0}
            ],
        2
        ]},
    {
      {
        EdgeForm[None],
        Replace[None->Nothing]@style,
        {
          First@bondGraphicsColors,
          Cylinder[#,bondGraphicThickness]&/@
            Partition[
              With[{v=Subtract@@bondGraphicsPositions[[;;2]]},
                With[{
                    u=Normalize@v,n=Norm@v,
                    p=bondGraphicsPositions[[2]]},
                    p+#*u+First@perps&/@Range[0,n,Min@{dashing,n/2.}]
                  ]
                ],
              2],
          Cylinder[bondGraphicsPositions[[;;2]]+ConstantArray[#,2],
              bondGraphicThickness]&/@perps[[2;;]]
          },
        {
          Last@bondGraphicsColors,
          Cylinder[#,bondGraphicThickness]&/@
            Partition[
              With[{v=Subtract@@bondGraphicsPositions[[2;;]]},
                With[{
                    u=Normalize@v,n=Norm@v,
                    p=bondGraphicsPositions[[3]]},
                    p+#*u+First@perps&/@Range[0,n,Min@{dashing,n/2.}]
                  ]
                ],
              2],
          Cylinder[bondGraphicsPositions[[2;;]]+ConstantArray[#,2],
            bondGraphicThickness]&/@perps[[2;;]]
          }
        },
      Replace[bondGraphicsLabel,{
        None->Nothing,
        e_:>
          Map[
            Text[
              Style[
                e,
                If[ColorDistance[bondGraphicsColors[[1]], Black]>.7, Black, White]
                ],
              Mean@bondGraphicsPositions+#
              ]&,
            bondGraphicThickness*Join[IdentityMatrix[3], -IdentityMatrix[3]]
            ]
        }]
      }
    ];


(* ::Subsubsubsection::Closed:: *)
(*ChemGraphicsBondShapeFunction3D*)



ChemGraphicsBondShapeFunction3D[
  type_,
  colors_,
  positions_,
  label_,
  style_,
  vector_,
  tbSep_,
  dbSep_,
  thick_,
  dashing_
  ]:=
  Which[
    tbSep=!=None&&type==3//TrueQ,
      bondGraphics3D3[
        colors, positions,
        label, style,
        vector, tbSep,
        thick
        ],
    dbSep=!=None&&type==2//TrueQ,
      bondGraphics3D2[
        colors,positions, 
        label, style,
        vector, dbSep,
        thick
        ],
    (type==3&&tbSep===None)||
      (type==2&&dbSep===None)||
        type==1//TrueQ,
      bondGraphics3D1[
        colors, positions, 
        label, style,
        thick],
    tbSep=!=None&&type>2//TrueQ,
      bondGraphics3D3Dashed[
        colors, positions, 
        label, style,
        vector, tbSep,
        thick, dashing],
    dbSep=!=None&&type>1//TrueQ,
      bondGraphics3D2Dashed[
        colors, positions, 
        label, style,
        vector, dbSep,
        thick, dashing
        ],
    True,
      bondGraphics3D1Dashed[
        colors, positions, 
        label, style,
        thick, dashing
        ]
    ]


(* ::Subsubsection::Closed:: *)
(*BondGraphic3D*)



Options[ChemGraphicsBondObjects3D]=
  Options[ChemGraphicsBondObjects];
ChemGraphicsBondObjects3D[
  elSet:
    {
      {{_String, _List, ___}, {_String, _List, ___}, ___},
      ___
      },
  ops:OptionsPattern[]
  ]:=
  ChemGraphicsBondObjectsCommon[
    elSet,
    Replace[
      OptionValue["BondShapeFunction"], 
      Automatic->ChemGraphicsBondShapeFunction3D
      ],
    BondGraphicsEvalCommon3D,
    ops
    ]



(* ::Subsection:: *)
(*Atomset Graphics*)



(* ::Subsubsection::Closed:: *)
(*ChemGraphicsAtomsetGetAtomsBonds*)



ChemGraphicsAtomsetGetAtomsBonds[elSet_, gb_, as_]:=
  Module[
    {
      atoms,
      bonds,
      batMap
      },
    atoms=Cases[elSet, {_String, _List, ___}];
    atoms=
      ChemGraphicsAtomsetAlignAtoms[atoms, as];
    bonds=Cases[elSet, {_Integer, _Integer, ___}];
    If[Length@bonds==0&&(TrueQ@gb||OptionQ@gb),
      bonds=ChemUtilsGuessBonds[atoms, If[OptionQ@gb, gb, Sequence@@{}]];
      batMap=
        Association@
          MapIndexed[
            #2[[1]]->FirstPosition[atoms, Append[#[[;;2]], ___]][[1]]&,
            bonds["Atoms"]
            ];
      bonds=
        Map[
          Append[Lookup[batMap, #[[;;2]]], #[[3]]]&,
          bonds["Bonds"]
          ]
      ];
    bonds=
      Map[
        Quiet@
          Replace[
            Check[
              ReplacePart[#, 
                {
                  1->atoms[[ #[[1]] ]],
                  2->atoms[[ #[[2]] ]]
                  }
                ],
              Nothing
              ],
            {
              {at1_, at2_, type:Except[_?OptionQ], o___}:>
                {at1, at2, "Type"->type, o},
              {at1_, at2_, o:Except["Type"->_]...}:>
                {at1, at2, "Type"->1, o}
              }
            ]&,
        bonds
        ];
    {atoms, bonds}
    ]


(* ::Subsubsection::Closed:: *)
(*ChemGraphicsAtomsetAlignAtoms*)



ChemGraphicsAtomsetAlignAtoms[
  atoms_, 
  axSpec_
  ]:=
  With[{sp=ChemComputeAxisAlignmentTransform[atoms, Sequence@@Flatten[{axSpec}, 1]]},
    If[MatchQ[sp, _TransformationFunction],
      With[{transfAts=sp@atoms[[All, 2]]},
        ReplacePart[
          atoms,
          {i_, 2}:>transfAts[[i]]
          ]
        ],
      atoms
      ]
    ]


(* ::Subsubsection::Closed:: *)
(*ChemGraphicsAtomsetGetAxes*)



ChemGraphicsAtomsetGetAxes[
  elSet:
    {
      {_String, _List, ___},
      ___
      },
  drawAxes:{{_,_,_},{_,_,_},{_,_,_}}|"Inertial":"Inertial",
  origin:{_,_,_}|"Center"|"CenterOfMass"|True|False:"Center"
  ]:=
  Module[
    {
      atoms=Cases[elSet, {_String, _List, ___}],
      c,
      axes,
      m,
      rads
      },
    c=
      Replace[origin,
        {
          "CenterOfMass"|True:>ChemComputeCenterOfMass@atoms,
          "Center"|False:>ChemComputeCenter@atoms
          }
        ];
    axes=
      If[drawAxes==="Inertial",
        Lookup[ChemComputeInertialSystem@atoms, {"AAxis","BAxis","CAxis"}],
        Normalize/@drawAxes
        ];
    rads=
      QuantityMagnitude@
        UnitConvert[ChemDataLookup[atoms[[All, 1]], "Radius"], "Angstroms"];
    m=
      Max[rads]+
        Max@
          Map[Abs,
            Thread@CoordinateBoundingBox[atoms[[All, 2]]]
            ];
    {c, m, axes}
    ]


(* ::Subsubsection::Closed:: *)
(*ChemGraphicsAtomsetGetSymmetryElements*)



ChemGraphicsAtomsetGetSymmetryElements[
  atoms_, 
  pat_,
  els_,
  ops:OptionsPattern[]
  ]:=
  Module[
    {
      relAts=
        Cases[atoms, 
          Replace[pat, 
            Automatic->
              {
                Except@_String?(StringMatchQ[("H"|"Hydrogen")~~(NumberString|"")]),
                _,
                ___
                }
            ]
          ]
      },
    If[Length[atoms]>2,
      {
        ChemComputeSymmetryElements[
          If[Length@relAts<3, atoms, relAts],
          "ReturnFunctions"->False,
          "DetermineClasses"->False,
          "FullClasses"->False,
          "ReturnElements"->els,
          FilterRules[{ops}, Options@ChemComputeSymmetryElements]
          ],
        .5+Max@
          Map[Abs,
            Thread@CoordinateBoundingBox[Last/@atoms]
            ]
        }
      ]
    ]


(* ::Subsubsection::Closed:: *)
(*ChemGraphicsAtomsetGetPlotElements*)



Options[ChemGraphicsAtomsetGetPlotElements]=
  {
    "AxisAlign"->None,
    "UseAxes"->Automatic,
    "UseOrigin"->Automatic,
    "InertialAxes"->False,
    "SymmetryElements"->None,
    "SymmetryAtoms"->
      Except["H"|"D"|"H2"|"T"|"H3"],
    "SymmetryCoordinates"->
      _,
    "CenterOfMass"->False,
    "GuessBonds"->False
    };
ChemGraphicsAtomsetGetPlotElements[elSet_, ops:OptionsPattern[]]:=
  Module[
    {
      atoms,
      bonds,
      axes,
      origin,
      symms
      },
    {atoms, bonds}=
      ChemGraphicsAtomsetGetAtomsBonds[elSet, 
          OptionValue["GuessBonds"], OptionValue["AxisAlign"]];
    axes=
      If[Length@atoms>0,
        Replace[OptionValue@"UseAxes",
          {
            True:>
              ChemGraphicsAtomsetGetAxes[
                atoms,
                {{1, 0, 0}, {0, 1, 0}, {0, 0, 1}},
                Replace[OptionValue@"UseOrigin",
                  Automatic:>
                    TrueQ@OptionValue@"CenterOfMass"
                  ]
                ],
            Automatic:>
              If[OptionValue@"InertialAxes"//TrueQ,
                ChemGraphicsAtomsetGetAxes[
                    atoms,
                    "Inertial",
                    Replace[OptionValue@"UseOrigin",
                      Automatic:>
                        TrueQ@OptionValue@"CenterOfMass"
                      ]
                    ],
                Nothing
                ],
            l_List:>
              Replace[
                ChemGraphicsAtomsetGetAxes[
                  atoms,
                  l,
                  Replace[
                    OptionValue@"UseOrigin",
                    Automatic:>
                      TrueQ@OptionValue@"CenterOfMass"
                    ]
                  ],
                Except[_List]:>Nothing
                ],
            _->Nothing
            }
          ],
      Nothing
      ];
    origin=
      If[axes=!=Nothing, 
        axes[[1]],
        Replace[
          OptionValue@"UseOrigin",
          {
            Automatic:>
              If[TrueQ@OptionValue@"CenterOfMass",
                ChemComputeCenterOfMass[atoms],
                Nothing
                ],
            "CenterOfMass":>
              ChemComputeCenterOfMass[atoms],
            "Center":>
              ChemComputeCenter[atoms],
            Except[{__?NumericQ}]:>Nothing
            }
          ]
        ];
    symms=
      If[Length@atoms>0,
        Switch[OptionValue@"SymmetryElements",
          All,
            Values@
              ChemGraphicsAtomsetGetSymmetryElements[
                atoms,
                {
                  OptionValue@"SymmetryAtoms",
                  OptionValue@"SymmetryCoordinates",
                  ___
                  },
                OptionValue["SymmetryElements"],
                ops
                ],
          _List|_String,
            Lookup[
              ChemGraphicsAtomsetSymmetryGraphics[
                atoms,
                {
                  OptionValue@"SymmetryAtoms",
                  OptionValue@"SymmetryCoordinates",
                  ___
                  },
                OptionValue["SymmetryElements"],
                ops
                ],
              OptionValue@"SymmetryElements",
              Null
              ],
          _,
            Nothing
          ],
        Nothing
        ];
    <|
      "Atoms"->atoms, 
      "Bonds"->bonds, 
      "Axes"->axes, 
      "Origin"->origin, 
      "SymmetryElements"->symms
      |>
    ]


(* ::Subsubsection::Closed:: *)
(*Graphic*)



Options[ChemGraphicsAtomsetObjects]=
  Join[
    Options@ChemGraphicsAtomsetGetPlotElements,
    Options@ChemGraphicsAtomObjects,
    Options@ChemGraphicsBondObjects,
    {
      "OriginFunction"->Point
      }
    ];
ChemGraphicsAtomsetObjects[
  elSet:
    {
      {_String, _List, ___},
      ___
      },
  ops:OptionsPattern[]
  ]:=
  Module[
    {
      els,
      atoms,
      atomObjs,
      bonds,
      bondObjs,
      axesObjs,
      originObj
      },
    els=
      ChemGraphicsAtomsetGetPlotElements[
        elSet, 
        FilterRules[
          {
            "SymmetryElements"->None,
            ops
            }, 
          Options@ChemGraphicsAtomsetGetPlotElements
          ]
        ];
    {atoms, bonds}=
      Lookup[els, {"Atoms", "Bonds"}];
    axesObjs=
      Replace[els["Axes"],   l_List:>ChemGraphicsAxesObjects@@l];
    originObj=
      Replace[els["Origin"], l_List:>OptionValue["OriginFunction"]@l[[;;2]]];
    atomObjs=
      If[Length@atoms>0,
        ChemGraphicsAtomObjects[
          atoms,
          FilterRules[
            {
              ops
              },
            Options@ChemGraphicsAtomObjects
            ]
          ],
        Nothing
        ];
    bondObjs=
      If[Length@bonds>0,
        ChemGraphicsBondObjects[
          bonds,
          FilterRules[
            {
              ops
              },
            Options@ChemGraphicsBondObjects
            ]
          ],
        Nothing
        ];
    {
      axesObjs,
      originObj,
      bondObjs,
      atomObjs
      }
    ]


(* ::Subsubsection::Closed:: *)
(*Graphics3D*)



Options[ChemGraphicsAtomsetObjects3D]=
  Normal@
    Merge[
      Flatten@
        {
          Options@ChemGraphicsAtomObjects3D,
          Options@ChemGraphicsBondObjects3D,
          Options[ChemGraphicsAtomsetObjects],
          {
            "OriginFunction"->Point
            }
          },
    Last
    ];
ChemGraphicsAtomsetObjects3D[
  elSet:
    {
      {_String, _List, ___},
      ___
      },
  ops:OptionsPattern[]
  ]:=
  Module[
    {
      els,
      atoms,
      atomObjs,
      bonds,
      bondObjs,
      axes,
      symms,
      origin
      },
    els=
      ChemGraphicsAtomsetGetPlotElements[
        elSet, 
        FilterRules[
          {
            ops
            }, 
          Options@ChemGraphicsAtomsetGetPlotElements
          ]
        ];
    {atoms, bonds}=
      Lookup[els, {"Atoms", "Bonds"}];
    atomObjs=
      If[Length@atoms>0,
        ChemGraphicsAtomObjects3D[
          atoms,
          FilterRules[
            {
              ops
              },
            Options@ChemGraphicsAtomObjects3D
            ]
          ],
        Nothing
        ];
    bondObjs=
      If[Length@bonds>0,
        ChemGraphicsBondObjects3D[
          bonds,
          FilterRules[
            {
              ops
              },
            Options@ChemGraphicsBondObjects3D
            ]
          ],
        Nothing
        ];
    axes=
      Replace[els["Axes"], l_List:>ChemGraphicsAxesObjects3D@@l];
    origin=
      Replace[els["Origin"], l_List:>OptionValue["OriginFunction"]@l];
    symms=
      Replace[els["SymmetryElements"], 
        {l__}:>ChemGraphicsSymmetryObjects[l, ops]
        ];
    {
      axes,
      origin,
      symms,
      bondObjs,
      atomObjs
    }];


End[];



