(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



ChemDVRDefaultPlot::usage="";


Begin["`Private`"];


(* ::Subsection:: *)
(*ChemDVRDefaultPlot*)



(* ::Subsubsection::Closed:: *)
(*$ChemDVRDefaultPlotOptions*)



$ChemDVRDefaultPlotOptions=
	DeleteDuplicatesBy[First]@
		Join[
			{
				"ZeroAxis"->True,
				"ShowEnergy"->True,
				"ShowPotential"->True,
				"PotentialStyle"->Automatic,
				"WavefunctionSelection"->Automatic,
				"WavefunctionClipping"->Scaled[.0001],
				"WavefunctionScaling"->Automatic,
				"WavefunctionShifting"->Automatic,
				"WavefunctionRescaling"->None,
				"PotentialRescaling"->None,
				"PlotProbabilityDensity"->False,
				"PlotDisplayMode"->Manipulate,
				"PlotFunction"->Automatic,
				"CoordinateTransformation"->None,
				"PlotListStyle"->Automatic
				},
			Options[ChemDVRDefaultGridPointList],
			Options[ChemDVRDefaultWavefunctionSelection]
			]


(* ::Subsubsection::Closed:: *)
(*ChemDVRDefaultPlotOptionValue*)



ChemDVRDefaultPlotOptionValue[opName_, ops_, f_:None, default_:Automatic]:=
	Lookup[Flatten@{ops}, opName,
		Lookup[Options[f], opName, 
			Lookup[$ChemDVRDefaultPlotOptions, opName, default]
			]
		]


(* ::Subsubsection::Closed:: *)
(*ChemDVRDefaultPlotGetShiftedScaledWavefunctions*)



ChemDVRDefaultPlotGetShiftedScaledWavefunctions//Clear


(* ::Subsubsubsection::Closed:: *)
(*chemDVRDefaultPlotWavefunctionRescalingFunction*)



chemDVRDefaultPlotWavefunctionRescalingFunction//Clear;
chemDVRDefaultPlotWavefunctionRescalingFunction[
	{min_?NumericQ, max_?NumericQ},
	_
	]:=
	Map[Rescale[#, MinMax[#], {min, max}]&];
chemDVRDefaultPlotWavefunctionRescalingFunction[
	Scaled[mm:{_?NumericQ, _?NumericQ}],
	pot_
	]:=
	With[{pmm=mm*If[pot===None, {0, 1}, MinMax[pot]]},
		Map[Rescale[#, MinMax[#], pmm]&]
		];
chemDVRDefaultPlotWavefunctionRescalingFunction[
	Scaled[n_?NumericQ],
	pot_
	]:=
	chemDVRDefaultPlotWavefunctionRescalingFunction[
		Scaled[{0, n}],
		pot
		];
chemDVRDefaultPlotWavefunctionRescalingFunction[___]:=
	Identity


(* ::Subsubsubsection::Closed:: *)
(*chemDVRDefaultPlotWavefunctionShift*)



chemDVRDefaultPlotWavefunctionShift[n_?NumericQ, pot_]:=
	n;
chemDVRDefaultPlotWavefunctionShift[Scaled[s_?NumericQ], pot_]:=
	If[pot===None, 0, s*Max@Abs[pot-Min[pot]]];
chemDVRDefaultPlotWavefunctionShift[
	Offset[base_?NumericQ, shift_?NumericQ], pot_]:=
	base+shift;
chemDVRDefaultPlotWavefunctionShift[
	Offset[base_?NumericQ, Scaled[shift_?NumericQ]], pot_]:=
	chemDVRDefaultPlotWavefunctionShift[
		Offset[base, 
			If[pot===None, 0, shift*Max@Abs[pot-Min[pot]]]],
		pot
		];
chemDVRDefaultPlotWavefunctionShift[
	Offset[Scaled[base_?NumericQ], e_], pot_]:=
	chemDVRDefaultPlotWavefunctionShift[
		Offset[
			Rescale[base, 
				{0, 1}, 
				If[pot===None, {0, 1}, MinMax[pot]]
				], 
			e
			],
		pot
		];
chemDVRDefaultPlotWavefunctionShift[e_, pot_]:=
	e;


(* ::Subsubsubsection::Closed:: *)
(*ChemDVRDefaultPlotGetShiftedScaledWavefunctions*)



ChemDVRDefaultPlotGetShiftedScaledWavefunctions[
	psi_,
	pot_,
	shift_,
	scale_,
	rescale_
	]:=
	With[
		{
			rescalePsi=
				chemDVRDefaultPlotWavefunctionRescalingFunction[rescale, pot][psi],
			shiftFactor=
				chemDVRDefaultPlotWavefunctionShift[shift, pot],
			scaleFactor=
				Replace[scale,
					Scaled[s_?NumericQ]:>
						If[pot===None, None, s*Max@Abs[pot-Min[pot]]]
					]
			},
		If[NumericQ@shiftFactor,
			If[NumericQ@scaleFactor&&NumericQ@shift, 
				scaleFactor*shiftFactor, 
				shiftFactor
				]+#,
			#
			]&@
			If[NumericQ@scaleFactor, 
				With[{maxPsi=Max[Abs[psi]]},
					MapThread[
						With[{minPsi=First@MinimalBy[#, Abs]},
							#2-scaleFactor*minPsi/maxPsi
							]&,
						{
							rescalePsi,
							scaleFactor*rescalePsi/maxPsi
							}
						]
					],
				rescalePsi
				]
		];


(* ::Subsubsection::Closed:: *)
(*ChemDVRDefaultPlotGetClippedWavefunctionSpec*)



ChemDVRDefaultPlotGetClippedWavefunctionSpec[
	psi_,
	clip_?NumericQ
	]:=
	Module[
		{
			mainSpec=Map[#>=clip&, Abs[psi]],
			wfnLen=Length@psi,
			numTrue,
			needed,
			truePos,
			trueRange
			},
		numTrue=Count[mainSpec, True];
		needed=If[wfnLen<50, wfnLen, Ceiling[.1*wfnLen]]-numTrue;
		If[needed>0,
			truePos=First/@Position[mainSpec, True];
			Do[
				If[needed>0,
					trueRange=Range[Floor[needed/(2*Length@truePos)]];
					truePos=
						DeleteDuplicates@
							Select[
								Flatten@List[
									truePos,
									Map[
										#-trueRange&,
										truePos
										],
									Map[
										#+trueRange&,
										truePos
										]
									],
								#>0&&#<wfnLen&
								];
					needed-=Length@truePos;
					],
				{5}
				];
			mainSpec=
				ReplacePart[
					mainSpec,
					Alternatives@@truePos->True
					]
			];
		mainSpec
		]; 
ChemDVRDefaultPlotGetClippedWavefunctionSpec[
	psi_,
	Scaled[clip_?NumericQ]
	]:=
	ChemDVRDefaultPlotGetClippedWavefunctionSpec[
		psi,
		Rescale[clip, {0, 1}, MinMax[Abs@psi]]
		];
ChemDVRDefaultPlotGetClippedWavefunctionSpec[
	psi_,
	_
	]:=
	ConstantArray[True, Length@psi];


(* ::Subsubsection::Closed:: *)
(*ChemDVRDefaultPlotGetPlotPoints*)



(* ::Text:: *)
(*Handle zero axes appropriately*)



(* ::Subsubsubsection::Closed:: *)
(*Imp*)



iChemDVRDefaultPlotGetPlotPoints[
	sel_,
	pot_,
	grid_,
	scaling_,
	shifting_,
	rescaling_,
	clip:_Scaled|_?NumericQ
	]:=
	With[
		{
			scaledPsi=
				ChemDVRDefaultPlotGetShiftedScaledWavefunctions[
					sel, pot, 
					shifting, scaling, rescaling
					]
			},
		MapThread[
			With[
				{
					pspec=ChemDVRDefaultPlotGetClippedWavefunctionSpec[#, clip]
					},
				MapThread[
					Flatten@*List,
					{
						Pick[grid, pspec], 
						Pick[#2, pspec]
						}
					]
				]&,
			{
				sel,
				scaledPsi
				}
			]
		];
iChemDVRDefaultPlotGetPlotPoints[
	sel_,
	pot_,
	grid_,
	scaling_,
	shifting_,
	rescaling_,
	clip:Except[_?NumericQ]
	]:=
	With[
		{
			scaledPsi=
				ChemDVRDefaultPlotGetShiftedScaledWavefunctions[
					sel, pot, 
					shifting, scaling, rescaling
					]
			},
		Map[
			MapThread[Flatten@*List, {grid, #}]&,
			scaledPsi
			]
		]


(* ::Subsubsubsection::Closed:: *)
(*potResc*)



chemDVRDefaultPlotPotentialRescalingFunction[potResc_]:=
	Replace[potResc, 
		{
			{_?NumericQ, _?NumericQ}:>
				Function@Rescale[#, MinMax[#], potResc],
			Scaled[s:{_?NumericQ, _?NumericQ}]:>
				Function@
					With[{mm=MinMax[#]},
						Rescale[#, mm, s*mm]
						],
			Offset[
				off:_?NumericQ,
				scl:{_?NumericQ, _?NumericQ}
				]:>
				Function[
					off+Rescale[#, MinMax[#], scl]
					],
			Offset[
				off:_?NumericQ,
				Scaled[scl:{_?NumericQ, _?NumericQ}]
				]:>
				Function@
					With[{mm=MinMax[#]},
						off+If[scl=={1, 1}, #, Rescale[#, mm, scl*mm]]
						],
			Offset[
				Scaled[off:_?NumericQ],
				scl:{_?NumericQ, _?NumericQ}
				]:>
				Function@
					With[{mm=MinMax[#]},
						(off*First[mm])+Rescale[#, mm, scl*mm]
						],
			Offset[
				Scaled[off:_?NumericQ],
				Scaled[scl:{_?NumericQ, _?NumericQ}]
				]:>
				Function@
					With[{mm=MinMax[#]},
						(off*First[mm])+If[scl=={1, 1}, #, Rescale[#, mm, scl*mm]]
						],
			_->Identity
			}
		]


(* ::Subsubsubsection::Closed:: *)
(*Main*)



Options[ChemDVRDefaultPlotGetPlotPoints]=
	$ChemDVRDefaultPlotOptions;
ChemDVRDefaultPlotGetPlotPoints[
	gridpoints_,
	psi_,
	pot_,
	showPot_,
	showEng_,
	transf_,
	ops:OptionsPattern[]
	]:=
	With[
		{
			scaling=
				OptionValue["WavefunctionScaling"],
			rescaling=
				OptionValue["WavefunctionRescaling"],
			clipping=
				OptionValue["WavefunctionClipping"],
			shift=
				OptionValue["WavefunctionShifting"],
			potResc=
				OptionValue["PotentialRescaling"],
			wfnsel=
				ChemDVRDefaultWavefunctionSelection[
					ReleaseHold@psi, 
					FilterRules[
						Flatten@{
							ops,
							"WavefunctionSelection"->
								Replace[
									OptionValue["WavefunctionSelection"],
									Automatic:>
										If[Length@ReleaseHold[psi][[1]]>50,
											Scaled[.25],
											All
											]
									]
							}, 
						Options@ChemDVRDefaultWavefunctionSelection
						]
					],
			sqr=
				TrueQ["PlotProbabilityDensity"],
			gps=
				If[transf===None, 
					gridpoints, 
					Map[
						Replace[transf,
							chart_Rule:>
								Function[
									Evaluate@
										CoordinateTransform[chart, 
											Slot/@Range[Length[gridpoints[[1]]]]
											]
									]
							],
						gridpoints
						]
					],
				za=
					TrueQ@OptionValue["ZeroAxis"],
				potVals=ReleaseHold@pot
				},
		{
			If[TrueQ@showEng,
				wfnsel[[1]],
				None
				],
			iChemDVRDefaultPlotGetPlotPoints[
				If[sqr, wfnsel[[2]]^2, wfnsel[[2]]],
				If[showPot, pot, None],
				gps,
				Replace[scaling,
					Automatic:>If[rescaling=!=None, None, Scaled[.5]]
					],
				Replace[shift,
					Automatic:>If[rescaling=!=None, None, Offset[Scaled[0], 0]]
					],
				rescaling,
				clipping
				],
			If[TrueQ@showPot,
				MapThread[
					Flatten@*List,
					{
						gps,
						chemDVRDefaultPlotPotentialRescalingFunction[potResc]@
							Normal@
								If[potVals//MatrixQ,
									Diagonal@potVals,
									potVals
									]
						}
					],
				None
				]
			}
		]


(* ::Subsubsection::Closed:: *)
(*ChemDVRDefaultPlotPotential*)



ChemDVRDefaultPlotPotential[
	func_Symbol, pot_, ops:OptionsPattern[]
	]:=
	With[
		{
			potStyle=
				ChemDVRDefaultPlotOptionValue[
					"PotentialStyle",
					{ops},
					func,
					Automatic
					]
			},
		func[
			pot,
			Evaluate@
				FilterRules[
					FilterRules[
						Flatten@{
							PlotStyle->
								Replace[potStyle,
									Automatic:>
										{
											If[Length@pot[[1]]===2,
												Directive[Dashed, Gray],
												Directive[Opacity[.5], Gray]
												]
											}
									],
							ops
							},
						Options@func
						],
				Except[PolarAxes (* due to poor implementation this will layer... *)]
				]
			]
		];


(* ::Subsubsection::Closed:: *)
(*ChemDVRDefaultPlotResolvePlotStyle*)



ChemDVRDefaultPlotResolvePlotStyle[
	func_, solNum_, ops_
	]:=
	Module[
		{
			cf=
				Replace[
					{
						s:_String|{_String, __}:>ColorData[s],
						Automatic:>ColorData[97]
						}
					]@
					ChemDVRDefaultPlotOptionValue[
						"PlotListStyle", 
						{ops}, 
						func, 
						Lookup[
							Charting`ResolvePlotTheme[Automatic, func],
							"DefaultColorFunction",
							Lookup[
								Lookup[
									Charting`ResolvePlotTheme[Automatic, func], 
									Method,
									{"DefaultPlotStyle"->Automatic}
									],
								"DefaultPlotStyle",
								Automatic
								]
							]
						]
			},
			With[
				{
					ci=
						MatchQ[cf, HoldPattern[ColorDataFunction[_, "Indexed", __]]]
					},
				Function[
					Which[
						ListQ@cf,
							cf[[Mod[#, Length[cf], 1]]],
						ci,
							cf@#,
						True,
							cf@Rescale[#, {1, solNum}]
						]
					]
				]
			]


(* ::Subsubsection::Closed:: *)
(*ChemDVRDefaultPlotManipulateSolutions*)



ChemDVRDefaultPlotManipulateSolutions[
	func_Symbol, energies_, solns_, pot_,
 ops:OptionsPattern[]
 ]:=
	With[
		{
			potPlot=
				If[pot=!=None, ChemDVRDefaultPlotPotential[func, pot, ops], None],
			ps=
				ChemDVRDefaultPlotResolvePlotStyle[func, Length@solns, {ops}],
			failMsg=
				With[
					{
						fail=
							"Couldn't view solutions for plotting function ``"
								~TemplateApply~func
						},
					Failure["DVR Viewer", fail]
					]
			},
		Module[
			{
				sols=solns,
				plots=
					Table[
						Replace[
							func[
								solns[[i]],
								Evaluate@
									FilterRules[
										{
											ops,
											PlotStyle->
												ps[i]
											},
										Options@func
										]
								],
							{
								Except[_Graphics|_Graphics3D]:>
									failMsg,
								g:_Graphics|_Graphics3D:>
									Function[
										If[energies=!=None,
											Legended[#,
												Placed[
													Row@{Subscript["E", i],": ", energies[[i]] },
													After
													]
												],
											#
											]
										]@If[pot=!=None, Show[g, potPlot], g]
								}
							],
					{i, Min@{Length@solns, 25}}
					]
				},
			Manipulate[
				Replace[
					If[i<Length@plots,
						plots[[i]],
						func[
							sols[[i]],
							Evaluate@
								FilterRules[
									{
										ops,
										PlotStyle->
											ps[i]
										},
									Options@func
									]
							]
						],
					{
						Except[_Graphics|_Graphics3D]:>
							failMsg,
						g:_Graphics|_Graphics3D:>
							Function[
								If[energies=!=None,
									Legended[#,
										Placed[
											Row@{Subscript["E", i],": ", energies[[i]] },
											After
											]
										],
									#
									]
								]@If[pot=!=None, Show[g, potPlot], g]
						}
					],
				{{i, 1, "\[Psi]"}, 1, Length@sols, 1}
				]
			]
		]


(* ::Subsubsection::Closed:: *)
(*ChemDVRDefaultPlotListSolutions*)



ChemDVRDefaultPlotListSolutions[
	func_Symbol, energies_, solns_, pot_,
 ops:OptionsPattern[]
 ]:=
	With[
		{
			potPlot=
				If[pot=!=None, ChemDVRDefaultPlotPotential[func, pot, ops], None],
			ps=
				ChemDVRDefaultPlotResolvePlotStyle[func, Length@solns, {ops}],
			failMsg=
				"Couldn't view solutions for plotting function ``"~TemplateApply~func
			},
		Table[
			Replace[
				func[solns[[i]],
					Evaluate@
						FilterRules[
							{
								ops,
								PlotStyle->ps[i]
								},
							Options@func
							]
					],
				{
					Except[_Graphics|_Graphics3D]:>
						Failure["DVR Viewer", failMsg],
					g:_Graphics|_Graphics3D:>
						Function[
							If[energies=!=None,
								Legended[#,
									Placed[
										Row@{Subscript["E", i],": ", energies[[i]] },
										After
										]
									],
								#
								]
							]@If[pot=!=None, Show[g, potPlot], g]
					}
				],
			{i, 1, Length@solns}
			]
		];


(* ::Subsubsection::Closed:: *)
(*ChemDVRDefaultPlotShowSolutions*)



ChemDVRDefaultPlotShowSolutions[
	func_Symbol, energies_, solns_, pot_,
	ops:OptionsPattern[]
	]:=
	With[
		{
			ps=
				ChemDVRDefaultPlotResolvePlotStyle[func, Length@solns, {ops}]
			},
		Show[
			If[pot=!=None, 
				ChemDVRDefaultPlotPotential[func, pot, ops], 
				{}
				],
			MapIndexed[
				Replace[
					func[#,
						Evaluate@
							FilterRules[
								{
									ops,
									PlotStyle->
											ps@#2[[1]]
									},
								Options@func
								]
						],
					{
						Except[_Graphics|_Graphics3D]:>
							Nothing
						}
					]&,
				solns
				]
			]
		]


(* ::Subsubsection::Closed:: *)
(*ChemDVRDefaultPlotSolutions*)



ChemDVRDefaultPlotSolutions[
	func_Symbol, energies_, solns_, pot_,
 ops:OptionsPattern[]
 ]:=
	Switch[
		ChemDVRDefaultPlotOptionValue[
			"PlotDisplayMode",
			{ops},
			func
			],
		Manipulate|"Manipulate",
			ChemDVRDefaultPlotManipulateSolutions[
				func, energies, solns, pot, 
				ops
				],
		Show|"Show",
			ChemDVRDefaultPlotShowSolutions[
				func, energies, solns, pot, 
				ops
				],
		_,
			ChemDVRDefaultPlotListSolutions[
				func, energies, solns, pot, 
				ops
				]
		];
ChemDVRDefaultPlotSolutions[
	func_, energies_, solns_, pot_,
 ops:OptionsPattern[]
 ]:=
 Module[{plotFun},
 	plotFun[e___]:=func[e];
 	ChemDVRDefaultPlotSolutions[func, energies, solns, pot, ops]
 	] 


(* ::Subsubsection::Closed:: *)
(*ChemDVRDefaultPlotBasic*)



ChemDVRDefaultPlotBasic[
	solutions_, grid_, potentialMatrix_, 
	headFunc_Symbol, defaultFunc:Except[_?OptionQ],
	ops:OptionsPattern[]
	]:=
	Module[
		{
			params=
				ChemDVRDefaultPlotGetPlotPoints[
					grid,
					solutions, 
					potentialMatrix,
					TrueQ@
						ChemDVRDefaultPlotOptionValue[
							"ShowPotential",
							{ops},
							headFunc,
							False
							],
					TrueQ@
						ChemDVRDefaultPlotOptionValue[
							"ShowEnergy",
							{ops}, 
							headFunc,
							False
							],
					ChemDVRDefaultPlotOptionValue[
						"CoordinateTransformation",
						{ops}, 
						headFunc,
						None
						],
					FilterRules[{ops},
						Options@ChemDVRDefaultPlotGetPlotPoints
						]
					]
			},
		ChemDVRDefaultPlotSolutions[
			Replace[
				ChemDVRDefaultPlotOptionValue["PlotFunction",
					{ops}, 
					headFunc,
					False
					],
				Automatic->defaultFunc
				],
			Sequence@@params,
			ops,
			PlotRange->
				Append[
					ConstantArray[Automatic, 
						Length[params[[2, 1, 1]]]-1
						],
					MinMax@params[[2, All, All, -1]]
					],
			PlotRangePadding->
				Append[
					ConstantArray[
						{Scaled[.05],Scaled[.05]}, 
						Length[params[[2, 1, 1]]]-1
						],
					{Scaled[.15], Scaled[.15]}
					]
			]
	];


(* ::Subsubsection::Closed:: *)
(*ChemDVRDefaultPlotCartesian1D*)



Options[ChemDVRDefaultPlotCartesian1D]=
	Join[
		$ChemDVRDefaultPlotOptions,
		{
			AxesOrigin->{0,0},
			PlotRange->Automatic
			},
		FilterRules[Options[ListLinePlot],
			Except[AxesOrigin|PlotRange]
			]
		];
ChemDVRDefaultPlotCartesian1D[
	solutions_,
	grid_,
	potentialMatrix_,
	ops:OptionsPattern[]
	]:=
	ChemDVRDefaultPlotBasic[
		solutions, grid, potentialMatrix,
		ChemDVRDefaultPlotCartesian1D, ListLinePlot,
		ops
		]


(* ::Subsubsection::Closed:: *)
(*ChemDVRDefaultPlotCartesian2D*)



Options[ChemDVRDefaultPlotCartesian2D]=
	Join[
		$ChemDVRDefaultPlotOptions,
		Options[ListPlot3D]
		];
ChemDVRDefaultPlotCartesian2D[
	solutions_,
	grid_,
	potentialMatrix_,
	ops:OptionsPattern[]
	]:=
	ChemDVRDefaultPlotBasic[
		solutions, grid, potentialMatrix,
		ChemDVRDefaultPlotCartesian2D, ListPlot3D,
		ops
		]


(* ::Subsubsection::Closed:: *)
(*ChemDVRDefaultPlotCartesian3D*)



Options[ChemDVRDefaultPlotCartesian3D]=
	Join[
		$ChemDVRDefaultPlotOptions,
		Options[ContourPlot3D]
		];
ChemDVRDefaultPlotCartesian3D[
	solutions_,
	grid_,
	potentialMatrix_,
	ops:OptionsPattern[]
	]:=
	ChemDVRDefaultPlotBasic[
		solutions, grid, potentialMatrix,
		ChemDVRDefaultPlotCartesian3D, ContourPlot3D,
		ops
		]


(* ::Subsubsection::Closed:: *)
(*ChemDVRDefaultPlotRing*)



Options[ChemDVRDefaultPlotRing]=
	DeleteDuplicatesBy[First]@
		Join[
			{
				"WavefunctionShifting"->1,
				"PotentialRescaling"->
					Offset[Scaled[-1.5], Scaled[{1, 1}]],
				Joined->True
				},
			$ChemDVRDefaultPlotOptions,
			Options[ListPolarPlot]
			];
ChemDVRDefaultPlotRing[
	solutions_,
	grid_,
	potentialMatrix_,
	ops:OptionsPattern[]
	]:=
	ChemDVRDefaultPlotBasic[
		solutions, grid, potentialMatrix,
		ChemDVRDefaultPlotRing, ListPolarPlot,
		ops,
		"WavefunctionShifting"->1,
		"PotentialRescaling"->Offset[Scaled[-1.5], Scaled[{1, 1}]],
		Joined->True,
		PlotRange->All,
		PolarAxes->True
		]


(* ::Subsubsection::Closed:: *)
(*ChemDVRDefaultPlotRing3D*)



(* ::Subsubsubsection::Closed:: *)
(*iChemDVRDefaultPlotRing3D*)



iChemDVRDefaultPlotRing3D//Clear
Options[iChemDVRDefaultPlotRing3D]=
	Options[ListPointPlot3D];
iChemDVRDefaultPlotRing3D[pts_, ops:OptionsPattern[]]:=
	ReplaceAll[
		ListPointPlot3D[pts,
			Evaluate@FilterRules[{ops}, Options[ListPointPlot3D]]
			],
		{a___, p_Point, b___}:>
			{AbsoluteThickness[2], a, Line@@Insert[p, p[[1, 1]], {1, -1}], b}
		];


(* ::Subsubsubsection::Closed:: *)
(*ChemDVRDefaultPlotRing3D*)



Options[ChemDVRDefaultPlotRing3D]=
	DeleteDuplicatesBy[First]@
		Join[
			$ChemDVRDefaultPlotOptions,
			Options[ListPointPlot3D]
			];
ChemDVRDefaultPlotRing3D[
	solutions_,
	grid_,
	potentialMatrix_,
	ops:OptionsPattern[]
	]:=
	ChemDVRDefaultPlotBasic[
		solutions, grid, potentialMatrix,
		ChemDVRDefaultPlotRing3D, iChemDVRDefaultPlotRing3D,
		ops,
		"CoordinateTransformation"->
			({Cos[#], Sin[#]}&)
		]


(* ::Subsubsection::Closed:: *)
(*ChemDVRDefaultPlotPolar*)



Options[ChemDVRDefaultPlotPolar]=
	Join[
		$ChemDVRDefaultPlotOptions,
		Options[ListPlot3D]
		];
ChemDVRDefaultPlotPolar[
	solutions_,
	gridpoints_,
	potentialMatrix_,
	ops:OptionsPattern[]
	]:=
	ChemDVRDefaultPlotBasic[
		solutions, gridpoints, potentialMatrix,
		ChemDVRDefaultPlotPolar, ListPlot3D,
		ops,
		"CoordinateTransformation"->
			("Polar" -> "Cartesian"),
		RegionMemberFunction->
			RegionMember[
				Annulus[
					{0, 0}, 
					MinMax[gridpoints[[All, 1]]],
					MinMax[gridpoints[[All, 2]]]
					]
				]
		];


(* ::Subsubsection::Closed:: *)
(*ChemDVRDefaultPlotShell*)



Options[ChemDVRDefaultPlotShell]=
	DeleteDuplicatesBy[First]@
		Join[
			{
				"WavefunctionShifting"->1
				},
			$ChemDVRDefaultPlotOptions,
			Options[ListSurfacePlot3D]
			];
ChemDVRDefaultPlotShell[
	solutions_,
	gridpoints_,
	potentialMatrix_,
	ops:OptionsPattern[]
	]:=
	ChemDVRDefaultPlotBasic[
		solutions, gridpoints, potentialMatrix,
		ChemDVRDefaultPlotShell, ListSurfacePlot3D,
		ops,
		"CoordinateTransformation"->
			("Spherical" -> "Cartesian"),
		"WavefunctionShifting"->1
		]


(* ::Subsubsection::Closed:: *)
(*ChemDVRDefaultPlotSpherical*)



Options[ChemDVRDefaultPlotSpherical]=
	Join[
		$ChemDVRDefaultPlotOptions,
		Options[ContourPlot3D]
		];
ChemDVRDefaultPlotSpherical[
	solutions_,
	gridpoints_,
	potentialMatrix_,
	ops:OptionsPattern[]
	]:=
	ChemDVRDefaultPlotBasic[
		solutions, gridpoints, potentialMatrix,
		ChemDVRDefaultPlotSpherical, ContourPlot3D,
		ops,
		"CoordinateTransformation"->
			("Spherical" -> "Cartesian")
		]


(* ::Subsubsection::Closed:: *)
(*ChemDVRDefaultPlotDensity1D*)



(* ::Subsubsubsection::Closed:: *)
(*iChemDVRDefaultPlotDensity1D*)



iChemDVRDefaultPlotDensity1D//Clear
Options[iChemDVRDefaultPlotDensity1D]=
	Options[ListLinePlot];
iChemDVRDefaultPlotDensity1D[pts_, ops:OptionsPattern[]]:=
	With[
		{
			gp=
				pts[[All, 1]],
			wv=
				If[OptionValue[ColorFunctionScaling]=!=False,
					Rescale,
					Identity
					]@pts[[All, 2]],
			cf=
				Replace[Quiet@ColorData@OptionValue[ColorFunction],
					{
						HoldPattern[ColorData[Automatic]]:>
							ColorData["TemperatureMap"],
						HoldPattern[ColorData[f_]]:>f
						}
					]
			},
		ReplaceAll[
			ListLinePlot[
				Thread@{gp, 1},
				Evaluate@
					FilterRules[
						{ops, Axes->{True, False}}, 
						Options[ListLinePlot]
						]
				],
			{a___, l_Line, b___}:>
				{
					AbsoluteThickness[2], 
					a, 
					Append[l, 
						VertexColors->
							Map[cf, wv]
						], 
					b
					}
			]
		];


(* ::Subsubsubsection::Closed:: *)
(*ChemDVRDefaultPlotDensity1D*)



Options[ChemDVRDefaultPlotDensity1D]=
	DeleteDuplicatesBy[First]@
		Join[
			$ChemDVRDefaultPlotOptions,
			Options[ListLinePlot]
			];
ChemDVRDefaultPlotDensity1D[
	solutions_,
	grid_,
	potentialMatrix_,
	ops:OptionsPattern[]
	]:=
	ChemDVRDefaultPlotBasic[
		solutions, grid, potentialMatrix,
		ChemDVRDefaultPlotDensity1D, iChemDVRDefaultPlotDensity1D,
		ops,
		"ShowPotential"->False
		]


(* ::Subsubsection::Closed:: *)
(*ChemDVRDefaultPlotDensity2D*)



Options[ChemDVRDefaultPlotDensity2D]=
	Join[
		$ChemDVRDefaultPlotOptions,
		Options[ListDensityPlot]
		];
ChemDVRDefaultPlotDensity2D[
	solutions_,
	grid_,
	potentialMatrix_,
	ops:OptionsPattern[]
	]:=
	ChemDVRDefaultPlotBasic[
		solutions, grid, potentialMatrix,
		ChemDVRDefaultPlotDensity2D, ListDensityPlot,
		ops,
		"ShowPotential"->False
		]


(* ::Subsubsection::Closed:: *)
(*ChemDVRDefaultPlotDensity3D*)



Options[ChemDVRDefaultPlotDensity3D]=
	Join[
		$ChemDVRDefaultPlotOptions,
		Options[ListDensityPlot3D]
		];
ChemDVRDefaultPlotDensity3D[
	solutions_,
	grid_,
	potentialMatrix_,
	ops:OptionsPattern[]
	]:=
	ChemDVRDefaultPlotBasic[
		solutions, grid, potentialMatrix,
		ChemDVRDefaultPlotDensity3D, ListDensityPlot3D,
		ops,
		"ShowPotential"->False
		]


(* ::Subsubsection::Closed:: *)
(*ChemDVRDefaultPlotDensityRing*)



(* ::Subsubsubsection::Closed:: *)
(*iChemDVRDefaultPlotDensityRing*)



iChemDVRDefaultPlotDensityRing//Clear
Options[iChemDVRDefaultPlotDensityRing]=
	Options[ListPolarPlot];
iChemDVRDefaultPlotDensityRing[pts_, ops:OptionsPattern[]]:=
	With[
		{
			gp=
				pts[[All, 1]],
			wv=
				If[OptionValue[ColorFunctionScaling]=!=False,
					Rescale,
					Identity
					]@pts[[All, 2]],
			cf=
				Replace[Quiet@ColorData@OptionValue[ColorFunction],
					{
						HoldPattern[ColorData[Automatic]]:>
							ColorData["TemperatureMap"],
						HoldPattern[ColorData[f_]]:>f
						}
					]
			},
		ReplaceAll[
			ListPolarPlot[
				Thread@{gp, .5},
				Evaluate@
					FilterRules[
						{
							Joined->False,
							ops
							}, 
						Options[ListPolarPlot]
						]
				],
			{a___, p_Point, b___}:>
				{
					AbsoluteThickness[2], 
					a, 
					Append[If[TrueQ@OptionValue[Joined], Apply[Line], Identity]@p, 
						VertexColors->
							Map[cf, wv]
						], 
					b
					}
			]
		];


(* ::Subsubsubsection::Closed:: *)
(*ChemDVRDefaultPlotDensityRing*)



Options[iChemDVRDefaultPlotDensityRing]=
	DeleteDuplicatesBy[First]@
		Join[
			$ChemDVRDefaultPlotOptions,
			Options[ListPolarPlot]
			];
ChemDVRDefaultPlotDensityRing[
	solutions_,
	grid_,
	potentialMatrix_,
	ops:OptionsPattern[]
	]:=
	ChemDVRDefaultPlotBasic[
		solutions, grid, potentialMatrix,
		ChemDVRDefaultPlotDensityRing, iChemDVRDefaultPlotDensityRing,
		ops,
		PolarAxes->{True, False},
		Axes->False, 
		Joined->True,
		PlotRange->All,
		"ShowPotential"->False
		]


(* ::Subsubsection::Closed:: *)
(*ChemDVRDefaultPlotPolarDensity*)



Options[ChemDVRDefaultPlotPolarDensity]=
	Join[
		$ChemDVRDefaultPlotOptions,
		Options[DensityPlot]
		];
ChemDVRDefaultPlotPolarDensity[
	solutions_,
	gridpoints_,
	potentialMatrix_,
	ops:OptionsPattern[]
	]:=
	ChemDVRDefaultPlotBasic[
		solutions, gridpoints, potentialMatrix,
		ChemDVRDefaultPlotPolarDensity, DensityPlot,
		ops,
		"CoordinateTransformation"->
			("Polar" -> "Cartesian"),
		RegionMemberFunction->
			RegionMember[
				Annulus[
					{0, 0}, 
					MinMax[gridpoints[[All, 1]]],
					MinMax[gridpoints[[All, 2]]]
					]
				],
		"ShowPotential"->False
		];


(* ::Subsubsection::Closed:: *)
(*ChemDVRDefaultPlotSphericalDensity*)



Options[ChemDVRDefaultPlotSphericalDensity]=
	Join[
		$ChemDVRDefaultPlotOptions,
		Options[DensityPlot3D]
		];
ChemDVRDefaultPlotSphericalDensity[
	solutions_,
	gridpoints_,
	potentialMatrix_,
	ops:OptionsPattern[]
	]:=
	ChemDVRDefaultPlotBasic[
		solutions, gridpoints, potentialMatrix,
		ChemDVRDefaultPlotSphericalDensity, DensityPlot3D,
		ops,
		"CoordinateTransformation"->
			("Spherical" -> "Cartesian"),
		"ShowPotential"->False
		]


(* ::Subsubsection::Closed:: *)
(*ChemDVRDefaultPlotContour2D*)



Options[ChemDVRDefaultPlotContour2D]=
	Join[
		$ChemDVRDefaultPlotOptions,
		Options[ListContourPlot]
		];
ChemDVRDefaultPlotContour2D[
	solutions_,
	grid_,
	potentialMatrix_,
	ops:OptionsPattern[]
	]:=
	ChemDVRDefaultPlotBasic[
		solutions, grid, potentialMatrix,
		ChemDVRDefaultPlotContour2D, ListContourPlot,
		ops,
		"ShowPotential"->False
		]


(* ::Subsubsection::Closed:: *)
(*ChemDVRDefaultPlotContour3D*)



Options[ChemDVRDefaultPlotContour3D]=
	Join[
		$ChemDVRDefaultPlotOptions,
		Options[ListContourPlot3D]
		];
ChemDVRDefaultPlotContour3D[
	solutions_,
	grid_,
	potentialMatrix_,
	ops:OptionsPattern[]
	]:=
	ChemDVRDefaultPlotBasic[
		solutions, grid, potentialMatrix,
		ChemDVRDefaultPlotContour3D, ListContourPlot3D,
		ops,
		"ShowPotential"->False
		]


(* ::Subsubsection::Closed:: *)
(*ChemDVRDefaultPlotPolarContour*)



Options[ChemDVRDefaultPlotPolarContour]=
	Join[
		$ChemDVRDefaultPlotOptions,
		Options[ContourPlot]
		];
ChemDVRDefaultPlotPolarContour[
	solutions_,
	gridpoints_,
	potentialMatrix_,
	ops:OptionsPattern[]
	]:=
	ChemDVRDefaultPlotBasic[
		solutions, gridpoints, potentialMatrix,
		ChemDVRDefaultPlotPolarContour, ContourPlot,
		ops,
		"CoordinateTransformation"->
			("Polar" -> "Cartesian"),
		RegionMemberFunction->
			RegionMember[
				Annulus[
					{0, 0}, 
					MinMax[gridpoints[[All, 1]]],
					MinMax[gridpoints[[All, 2]]]
					]
				],
		"ShowPotential"->False
		];


(* ::Subsubsection::Closed:: *)
(*ChemDVRDefaultPlot*)



ChemDVRRun::nosup="PlotMode `` is unsupported";


Options[ChemDVRDefaultPlot]=
	Join[
		{
			"PlotMode"->Automatic
			},
		$ChemDVRDefaultPlotOptions
		];
ChemDVRDefaultPlot[
	solutions_,
	grid_,
	potentialMatrix_,
	ops:OptionsPattern[]
	]:=
	Catch@
	Module[
		{
			gridpoints,
			func,
			pmode,
			gridranges
			},
		pmode=
			ChemDVRDefaultPlotOptionValue[
				"PlotMode",
				{ops},
				ChemDVRDefaultPlot,
				Automatic
				];
		func=
			Switch[pmode,
				{"Cartesian", 1},
					ChemDVRDefaultPlotCartesian1D,
				{"Cartesian", 2},
					ChemDVRDefaultPlotCartesian2D,
				{"Cartesian", 3},
					ChemDVRDefaultPlotCartesian3D,
				"Cartesian",
					gridpoints=
						ChemDVRDefaultGridPointList[grid, 
							FilterRules[{ops}, Options@ChemDVRDefaultGridPointList]
							];
					{"Cartesian", Length@gridpoints[[1]]},
				{"Density", 1},
					ChemDVRDefaultPlotDensity1D,
				{"Density", 2},
					ChemDVRDefaultPlotDensity2D,
				{"Density", 3},
					ChemDVRDefaultPlotDensity3D,
				{"Density", "Ring"},
					ChemDVRDefaultPlotDensityRing,
				{"Density", "Polar"},
					ChemDVRDefaultPlotPolarDensity,
				{"Density", "Spherical"},
					ChemDVRDefaultPlotSphericalDensity,
				"Density",
					gridpoints=
						ChemDVRDefaultGridPointList[grid, 
							FilterRules[{ops}, Options@ChemDVRDefaultGridPointList]
							];
					{"Density", Length@gridpoints[[1]]},
				{"Contour", 2},
					ChemDVRDefaultPlotContour2D,
				{"Contour", 3},
					ChemDVRDefaultPlotContour3D,
				{"Contour", "Polar"},
					ChemDVRDefaultPlotPolarContour,
				{"Contour", "Spherical"},
					ChemDVRDefaultPlotSpherical,
				"Contour",
					gridpoints=
						ChemDVRDefaultGridPointList[grid, 
							FilterRules[{ops}, Options@ChemDVRDefaultGridPointList]
							];
					{"Contour", Length@gridpoints[[1]]},
				"Ring",
					ChemDVRDefaultPlotRing,
				"Ring3D",
					ChemDVRDefaultPlotRing3D,
				"Polar",
					ChemDVRDefaultPlotPolar,
				"Shell",
					ChemDVRDefaultPlotShell,
				"Spherical",
					ChemDVRDefaultPlotSpherical,
				Automatic,
					gridpoints=
						ChemDVRDefaultGridPointList[grid, 
							FilterRules[{ops}, Options@ChemDVRDefaultGridPointList]
							];
					gridranges=
						If[Length@gridpoints[[1]]==0,
							{MinMax@gridpoints},
							MinMax/@Transpose[gridpoints]
							];
					Switch[gridranges,
						{{_, _}?(#[[2]]+#[[1]]==2\[Pi]&)},
							"Ring",
						{
							{_, _}?(#[[2]]+#[[1]]==2\[Pi]&), 
							{_, _}?(#[[2]]+#[[1]]==\[Pi]&)
							},
							"Shell",
						{
							{_, _},
							{_, _}?(#[[2]]+#[[1]]==2\[Pi]&)
							},
							"Polar",
						{
							{_, _},
							{_, _}?(#[[2]]+#[[1]]==2\[Pi]&), 
							{_, _}?(#[[2]]+#[[1]]==\[Pi]&)
							},
							"Spherical",
						_,
							{"Cartesian", Length@gridranges}
						],
				_,
					Message[
						ChemDVRRun::nosup,
						pmode
						];
					Throw[$Failed]
				];
		If[StringQ@func||ListQ@func,
			ChemDVRDefaultPlot[
				solutions,
				grid,
				potentialMatrix,
				"PlotMode"->func,
				ops
				],
			If[!ListQ@gridpoints, 
				gridpoints=
					ChemDVRDefaultGridPointList[grid, 
						FilterRules[{ops}, Options@ChemDVRDefaultGridPointList]
						]
				];
			func[
				solutions,
				gridpoints,
				potentialMatrix,
				ops
				]
			]
		]


End[];



