(* ::Package:: *)

(* Autogenerated Package *)

(* ::Section:: *)
(*DVR Results Object*)



ChemDVRResultsObjectQ::usage="";
ChemDVRResultsModify::usage="";
NewDVRResultsObject::usage="";


Begin["`Private`"];


(* ::Subsection:: *)
(*Registration*)



(* ::Subsubsection::Closed:: *)
(*keyTypeMap*)



packedSquareMatrixQ=
  Developer`PackedArrayQ[#]&&
    SquareMatrixQ&&
    MatrixQ[#, Internal`RealValuedNumericQ]&


$keyTypeMap=
  <|
    "Object"->_ChemDVRObject,
    "Grid"->_List?Developer`PackedArrayQ,
    "Transformation"->_List?packedSquareMatrixQ,
    "KineticEnergy"->_List?packedSquareMatrixQ,
    "PotentialEnergy"->_List?packedSquareMatrixQ,
    "Wavefunctions"->_ChemWavefunctionsObject?ChemWavefunctionsObjectQ,
    "Extensions"->_Association?AssociationQ,
    "Options"->_Association?AssociationQ
    |>;


(* ::Subsubsection::Closed:: *)
(*validateResults*)



validateDVRResults[a_Association]:=
  AllTrue[Keys@$keyTypeMap,
    MatchQ[a[#], None|$keyTypeMap[#]]&
    ]


(* ::Subsubsection::Closed:: *)
(*NewDVRResultsObject*)



NewDVRResultsObject[a:_Association:<||>]:=
  Join[
    AssociationMap[None, Keys@$keyTypeMap],
    a
    ];


(* ::Subsubsection::Closed:: *)
(*ConstructDVRResults*)



ConstructDVRResults[
  cache_Association
  ]:=
  If[validateDVRResults[cache],
    cache,
    <|$Failed->True|> (* requires Association return to throw the error *)
    ];


(* ::Subsubsection::Closed:: *)
(*ChemDVRResultsObject*)



RegisterInterface[
  ChemDVRResultsObject,
  Keys@$keyTypeMap,
  "Validator"->
    ChemDVRResultsObjectQ,
  "Constructor"->
    ConstructDVRResults,
  "AccessorFunctions"->Automatic,
  "MutationFunctions"->{"Keys", "Parts"}
  ]


End[];



