(* ::Package:: *)

(* Autogenerated Package *)

(* ::Section:: *)
(*DVR Results Object*)



ChemDVRResultsObjectQ::usage="";
ChemDVRResultsModify::usage="";
NewDVRResultsObject::usage="";


Begin["`Private`"];


(* ::Subsection:: *)
(*Registration*)



(* ::Subsubsection::Closed:: *)
(*keyTypeMap*)



sparseArrayQ=
  MatchQ[_SparseArray?System`Private`NoEntryQ]


packedSquareMatrixQ=
  (Developer`PackedArrayQ[#]||sparseArrayQ[#])&&
    SquareMatrixQ&&
    MatrixQ[#, Internal`RealValuedNumericQ]&


$keyTypeMap=
  <|
    "Object"->_ChemDVRObject,
    "Grid"->_CoordinateGridObject?CoordinateGridObject,
    "Transformation"->_List?packedSquareMatrixQ,
    "KineticEnergy"->_List?packedSquareMatrixQ,
    "PotentialEnergy"->_List?packedSquareMatrixQ,
    "Wavefunctions"->_WavefunctionsObject?WavefunctionsObjectQ,(*
		"Extensions"\[Rule]_Association?AssociationQ,*)
    "Options"->_Association?AssociationQ
    |>;


(* ::Subsubsection::Closed:: *)
(*validateResults*)



validateDVRResults[a_Association]:=
  AllTrue[Keys@$keyTypeMap,
    If[!MatchQ[a[#], None|$keyTypeMap[#]],
      PackageRaiseException[Automatic,
        "DVR result `` for \"``\" is not None and doesn't match pattern ``",
        a[#],
        #,
        $keyTypeMap[#]
        ],
      True
      ]&
    ]


(* ::Subsubsection::Closed:: *)
(*NewDVRResultsObject*)



NewDVRResultsObject[a:_Association:<||>]:=
  ChemDVRResultsObject@Join[
    AssociationMap[None&, Keys@$keyTypeMap],
    a
    ];


(* ::Subsubsection::Closed:: *)
(*ConstructDVRResults*)



ConstructDVRResults[
  cache_Association
  ]:=
  Module[{new=constructDVRResults[cache]},
    If[validateDVRResults[new],
      new,
      <|$Failed->True|> (* requires Association return to throw the error *)
      ]
    ];
ConstructDVRResults[
  e_
  ]:=
  ConstructDVRResults[Association@e]


(* ::Subsubsection::Closed:: *)
(*ChemDVRResultsObject*)



RegisterInterface[
  ChemDVRResultsObject,
  Keys@$keyTypeMap,
  "Validator"->
    ChemDVRResultsObjectQ,
  "Constructor"->
    ConstructDVRResults,
  "AccessorFunctions"->Automatic,
  "MutationFunctions"->{"Keys", "Parts"}
  ]


End[];



