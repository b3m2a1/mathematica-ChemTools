(* ::Package:: *)

(* Autogenerated Package *)

ChemWavefunctionsObject::usage=
  "An object-oriented interface into wavefunction stuff";


Begin["`Private`"];


(* ::Subsection:: *)
(*Registration*)



(* ::Subsubsection::Closed:: *)
(*validateWavefunctionData*)



validateWavefunctionData[energies_, wfns_, gps_]:=
  Developer`PackedArrayQ@energies&&
  Developer`PackedArrayQ@wfns&&
  Developer`PackedArrayQ@gps&&
  MatrixQ[wfns, Internal`RealValuedNumericQ]&&
  Length@wfns[[1]]==Length@gps&&
  Length@energies==Length@wfns&&
  VectorQ[energies, Internal`RealValuedNumericQ]&&
  MatrixQ[gps, Internal`RealValuedNumericQ];
validateWavefunctionData[energies_, wfns_]:=
  Developer`PackedArrayQ@energies&&
  Developer`PackedArrayQ@wfns&&
  MatrixQ[wfns, Internal`RealValuedNumericQ]&&
  Length@energies==Length@wfns&&
  VectorQ[energies, Internal`RealValuedNumericQ]&&


(* ::Subsubsection::Closed:: *)
(*extractGridpoints*)



(* ::Subsubsection::Closed:: *)
(*ConstructWavefunctions*)



ConstructWavefunctions[
  {
    energies_,
    wfns_
    },
  grid_
  ]:=
  With[
    {
      erg=Developer`ToPackedArray@energies,
      wf=Developer`ToPackedArray@wfns,
      gps=extractGridpoints[grid]
      },
    If[validateWavefunctionData[erg, wf, gps],
      <|
        "GridPoints"->gps,
        "Wavefunctions"->wf,
        "Energies"->erg
        |>,
      <|$Failed->True|> (* requires Association return to throw the error *)
      ]
    ];
ConstructWavefunctions[a_Association]:=
  a;


(* ::Subsubsection::Closed:: *)
(*ChemWavefunctionsObject*)



RegisterInterface[
  ChemWavefunctionsObject,
  {"GridPoints", "Wavefunctions", "Energies"},
  "Validator"->
    WavefunctionObjectQ,
  "Constructor"->
    ConstructWavefunctions,
  "AccessorFunctions"->
    <|
      "Parts"->ChemWavefunctionsPart,
      "Keys"->ChemWavefunctionsKeyPart
      |>
  ]


End[];



