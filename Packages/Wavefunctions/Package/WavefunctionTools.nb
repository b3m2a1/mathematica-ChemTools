Notebook[{

Cell[CellGroupData[{
Cell["\[LeftCeiling]Wavefunction Tools\[RightFloor]", "CodeSection",
 Evaluatable->True,ExpressionUUID->"c53a16d2-e338-4337-96a0-1a1051ce7185"],

Cell[CellGroupData[{

Cell["\[LeftCeiling]Constructor\[RightFloor]", "CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"ac6738b2-7353-45aa-9e98-140fd52fc242"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"ConstructWavefunctions", "::", "usage"}], "=", "\"\<\>\""}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"WavefunctionsObjectQ", "::", "usage"}], "=", "\"\<\>\""}], 
  ";"}]}], "CodeInput",ExpressionUUID->"bdd548cc-3f68-49e9-887a-9f9028f93867"]\

}, Open  ]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]Parts\[RightFloor]", "CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"b6db1bdf-2c83-4bb4-a8d4-6a670d4fde30"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"WFPart", "::", "usage"}], "=", "\n", "\t", 
   "\"\<Applies part to a wavefunction\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"WFKeyPart", "::", "usage"}], "=", "\n", "\t", 
   "\"\<Applies key lookup to a wavefunction\>\""}], 
  ";"}]}], "CodeInput",ExpressionUUID->"0683456a-e69c-4b41-9668-ec499b04160b"]\

}, Closed]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]Creation\[RightFloor]", "CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"39dd86f3-fe30-4dc5-8b41-0c2fcc428c4b"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"SelfConsistentWavefunctions", "::", "usage"}], "=", "\n", "\t", 
   "\"\<Function for doing 1D SCF averaging of a potential with a DVR\>\""}], 
  ";"}]], "CodeInput",ExpressionUUID->"21bad048-59a2-4577-a1b5-b2bce712e387"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"WFEigensystem", "::", "usage"}], "=", "\n", "\t", 
   "\"\<Generates wavefunctions from a Hamiltonian in a smart way\>\""}], 
  ";"}]], "CodeInput",ExpressionUUID->"d70c4afe-ff74-457a-8a9c-b71cb5c5e8f4"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]Combination\[RightFloor]", "CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"05e35bc7-978c-4a75-9ba1-821e3d52e2d4"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"WFProduct", "::", "usage"}], "=", "\n", "\t", 
   "\"\<Creates product wavefunctions out of 1D wavefunctions\>\""}], 
  ";"}]], "CodeInput",ExpressionUUID->"3b7eda12-4ee4-43ca-b151-49bfa268f3e9"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]ExpectationValues\[RightFloor]", "CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"fad35e4a-51a3-4019-91bf-5417f63718d5"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"WFExpectationValues", "::", "usage"}], "=", "\n", "\t", 
   "\"\<Expectation values over a normalized, discretized set of \
wavefunctions\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"WFOperatorMatrix", "::", "usage"}], "=", "\n", "\t", 
   "\"\<Operator matrix over a normalized, discretized set of wavefunctions\>\
\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"WFOperatorMatrixElements", "::", "usage"}], "=", "\n", "\t", 
   "\"\<Operator matrix elements over a normalized, discretized set of \
wavefunctions\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"WFOverlap", "::", "usage"}], "=", "\n", "\t", 
   "\"\<Takes the overlap between two sets of wavefunctions\>\""}], 
  ";"}]}], "CodeInput",ExpressionUUID->"62923166-5333-4e5f-91b3-613ea84f0575"]\

}, Open  ]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]Interface\[RightFloor]", "CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"adea57d1-941c-407f-8716-5d4ee410b9f1"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"WFNormal", "::", "usage"}], "=", "\"\<\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"WFLength", "::", "usage"}], "=", "\"\<\>\""}], 
  ";"}]}], "CodeInput",ExpressionUUID->"ba1cdb20-4442-4baa-8389-b4f9d8a69f68"]\

}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"Begin", "[", "\"\<`Private`\>\"", "]"}], 
  ";"}]], "InputSection",ExpressionUUID->"eb1d7e10-f3ca-44af-a40a-\
46e42b1adc0b"],

Cell[CellGroupData[{

Cell["\[LeftCeiling]Constructor\[RightFloor]", "CodeSubsection",
 Evaluatable->True,ExpressionUUID->"70955e72-cc6d-4cba-be0a-0e35ddd8472a"],

Cell[CellGroupData[{

Cell["\[LeftCeiling]validateWavefunctionData\[RightFloor]", \
"CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"c90aad33-3a54-458e-b8ba-80c71b6161c9"],

Cell[BoxData[
 RowBox[{
  RowBox[{"validateWavefunctionData", "[", 
   RowBox[{"{", 
    RowBox[{"energies_", ",", " ", "wfns_"}], "}"}], "]"}], ":=", "\n", "\t", 
  
  RowBox[{
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"!", 
      RowBox[{"Developer`PackedArrayQ", "@", "energies"}]}], ",", "\n", 
     "\t\t", 
     RowBox[{"PackageRaiseException", "[", 
      RowBox[{
      "Automatic", ",", "\n", "\t\t\t", 
       "\"\<Failed to pack wavefunction energies ``\>\"", ",", "\n", "\t\t\t",
        "energies"}], "\n", "\t\t\t", "]"}], ",", "\n", "\t\t", "True"}], 
    "\n", "\t\t", "]"}], "&&", "\n", "\t\t", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"!", 
      RowBox[{"AllTrue", "[", 
       RowBox[{"wfns", ",", " ", "GridFunctionObjectQ"}], "]"}]}], ",", "\n", 
     "\t\t\t", 
     RowBox[{"PackageRaiseException", "[", 
      RowBox[{
      "Automatic", ",", "\n", "\t\t\t\t", 
       "\"\<Some wavefunctions could not be turned into GridFunctionObjects\>\
\""}], "\n", "\t\t\t\t", "]"}], ",", "\n", "\t\t\t", "True"}], "\n", "\t\t\t",
     "]"}]}]}]], \
"CodeInput",ExpressionUUID->"94240285-1ea5-479d-b339-11a665096cc1"]
}, Closed]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]constructWavefunctionData\[RightFloor]", \
"CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"9d4ff0e4-3b33-450f-a996-1c9ace933d4a"],

Cell[BoxData[
 RowBox[{
  RowBox[{"constructWavefunctionData", "[", 
   RowBox[{"erg_", ",", " ", "wf_", ",", " ", "grid_"}], "]"}], ":=", "\n", 
  "\t", 
  RowBox[{"Module", "[", "\n", "\t\t", 
   RowBox[{
    RowBox[{"{", "\n", "\t\t\t", 
     RowBox[{
      RowBox[{"engs", "=", 
       RowBox[{"Developer`ToPackedArray", "@", 
        RowBox[{"N", "[", "erg", "]"}]}]}], ",", "\n", "\t\t\t", 
      RowBox[{"wfns", "=", "\n", "\t\t\t\t", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"!", 
          RowBox[{"GridFunctionObjectQ", "@", 
           RowBox[{"wf", "[", 
            RowBox[{"[", "1", "]"}], "]"}]}]}], ",", "\n", "\t", "\t\t\t\t", 
         RowBox[{"Developer`ToPackedArray", "@", 
          RowBox[{"N", "[", "wf", "]"}]}], ",", "\n", "\t\t\t\t\t", "wf"}], 
        "\n", "\t\t\t\t\t", "]"}]}], ",", "\n", "\t\t\t", 
      RowBox[{"gr", "=", 
       RowBox[{"CoordinateGridObject", "[", "grid", "]"}]}]}], "\n", "\t\t\t",
      "}"}], ",", "\n", "\t\t", 
    RowBox[{
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"!", 
        RowBox[{"GridFunctionObjectQ", "@", 
         RowBox[{"wfns", "[", 
          RowBox[{"[", "1", "]"}], "]"}]}]}], ",", "\n", "\t\t\t", 
       RowBox[{"wfns", "=", 
        RowBox[{
         RowBox[{
          RowBox[{"GridFunctionObject", "[", 
           RowBox[{"gr", ",", " ", "#"}], "]"}], "&"}], "/@", "wfns"}]}]}], 
      "\n", "\t\t\t", "]"}], ";", "\n", "\t\t", 
     RowBox[{"{", 
      RowBox[{"engs", ",", " ", "wfns"}], "}"}]}]}], "\n", "\t\t", 
   "]"}]}]], \
"CodeInput",ExpressionUUID->"05f0d9a7-33b0-4be6-ab2f-8d5221c24289"]
}, Closed]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]ConstructWavefunctions\[RightFloor]", "CodeSubsubsection",
 
 Evaluatable->True,ExpressionUUID->"0af182a3-74d4-4b3a-8491-b7e5fcfbcae2"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ConstructWavefunctions", "//", "Clear"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"ConstructWavefunctions", "[", "\n", "\t", 
    RowBox[{
     RowBox[{"{", "\n", "\t\t", 
      RowBox[{"energies_", ",", "\n", "\t\t", "wfns_"}], "\n", "\t\t", "}"}], 
     ",", "\n", "\t", "grid_"}], "\n", "\t", "]"}], ":=", "\n", "\t", 
   RowBox[{"With", "[", "\n", "\t\t", 
    RowBox[{
     RowBox[{"{", "\n", "\t\t\t", 
      RowBox[{"data", "=", 
       RowBox[{"constructWavefunctionData", "[", 
        RowBox[{"energies", ",", " ", "wfns", ",", " ", "grid"}], "]"}]}], 
      "\n", "\t\t\t", "}"}], ",", "\n", "\t\t", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"validateWavefunctionData", "[", "data", "]"}], ",", "\n", 
       "\t\t\t", 
       RowBox[{"<|", "\n", "\t\t\t\t", 
        RowBox[{
         RowBox[{"\"\<Wavefunctions\>\"", "\[Rule]", 
          RowBox[{"data", "[", 
           RowBox[{"[", "2", "]"}], "]"}]}], ",", "\n", "\t\t\t\t", 
         RowBox[{"\"\<Energies\>\"", "\[Rule]", 
          RowBox[{"data", "[", 
           RowBox[{"[", "1", "]"}], "]"}]}]}], "\n", "\t\t\t\t", "|>"}], ",", 
       "\n", "\t\t\t", 
       RowBox[{"<|", 
        RowBox[{"$Failed", "\[Rule]", "True"}], "|>"}]}], " ", 
      RowBox[{"(*", " ", 
       RowBox[{
       "requires", " ", "Association", " ", "return", " ", "to", " ", "throw",
         " ", "the", " ", "error"}], " ", "*)"}], "\n", "\t\t\t", "]"}]}], 
    "\n", "\t\t", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"ConstructWavefunctions", "[", "\n", "\t", 
    RowBox[{"\"\<SCF\>\"", ",", "\n", "\t", "args___"}], "\n", "\t", "]"}], ":=",
    "\n", "\t", 
   RowBox[{"Module", "[", "\n", "\t\t", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "res", ",", " ", "energies", ",", " ", "wfns", ",", " ", "grid"}], 
      "}"}], ",", "\n", "\t\t", 
     RowBox[{
      RowBox[{"res", "=", 
       RowBox[{"Flatten", "@", 
        RowBox[{"{", 
         RowBox[{"SelfConsistentWavefunctions", "[", "args", "]"}], "}"}]}]}],
       ";", "\n", "\t\t", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", 
         RowBox[{"MatchQ", "[", 
          RowBox[{"res", ",", " ", 
           RowBox[{"{", "__Association", "}"}]}], "]"}]}], ",", "\n", 
        "\t\t\t", 
        RowBox[{"PackageRaiseException", "[", "\n", "\t\t\t\t", 
         RowBox[{
         "Automatic", ",", "\n", "\t\t\t\t", 
          "\"\<Failed to generate valid SCF wavefunctions\>\""}], "\n", 
         "\t\t\t\t", "]"}], ",", "\n", "\t\t\t", 
        RowBox[{
         RowBox[{"energies", "=", "\n", "\t\t\t\t", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Plus", "@@", "#Energies"}], "&"}], ",", " ", "res"}], 
           "]"}]}], ";", "\n", "\t\t\t", 
         RowBox[{"wfns", "=", "\n", "\t\t\t\t", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"GFKroneckerProduct", "@@", "#Wavefunctions"}], "&"}], 
            ",", " ", "res"}], "]"}]}], ";", "\n", "\t", "\t\t", 
         RowBox[{"grid", "=", "\n", "\t", "\t\t\t", 
          RowBox[{
           RowBox[{"wfns", "[", 
            RowBox[{"[", "1", "]"}], "]"}], "[", "\"\<Grid\>\"", "]"}]}], ";",
          " ", "\n", "\t", "\t\t", 
         RowBox[{"ConstructWavefunctions", "[", "\n", "\t", "\t\t\t", 
          RowBox[{
           RowBox[{"{", "\n", "\t", "\t\t\t\t", 
            RowBox[{"energies", ",", "\n", "\t", "\t\t\t\t", "wfns"}], "\n", 
            "\t", "\t\t\t\t", "}"}], ",", "\n", "\t\t\t\t", "grid"}], "\n", 
          "\t\t\t\t", "]"}]}]}], "\n", "\t\t\t", "]"}]}]}], "\n", "\t\t", 
    "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"ConstructWavefunctions", "[", "a_Association", "]"}], ":=", "\n", 
   "\t", "a"}], 
  ";"}]}], "CodeInput",ExpressionUUID->"afff2841-224c-40ae-a75d-28dd471377f2"]\

}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]WFNormal\[RightFloor]", "CodeSubsection",
 Evaluatable->True,ExpressionUUID->"50e200d8-87f3-4f08-a3a3-6bde11ea60a6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"WFNormal", "[", "wfns_", "]"}], ":=", "\n", "\t", 
  RowBox[{"{", "\n", "\t\t", 
   RowBox[{
    RowBox[{"wfns", "[", "\"\<Energies\>\"", "]"}], ",", "\n", "\t\t", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"Flatten", "@", 
        RowBox[{"#", "[", "\"\<Values\>\"", "]"}]}], "&"}], "/@", 
      RowBox[{"wfns", "[", "\"\<Wavefunctions\>\"", "]"}]}], "//", 
     "Developer`ToPackedArray"}], ",", "\n", "\t\t", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"wfns", "[", "\"\<Wavefunctions\>\"", "]"}], "[", 
       RowBox[{"[", "1", "]"}], "]"}], "[", "\"\<Grid\>\"", "]"}], "//", 
     "Normal"}]}], "\n", "\t\t", 
   "}"}]}]], \
"CodeInput",ExpressionUUID->"c0c23182-01e4-406d-a559-cc5375cf68cd"]
}, Closed]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]Mindless\[RightFloor]", "CodeSubsection",
 Evaluatable->True,ExpressionUUID->"f1da57d9-2998-4ea3-aee2-aa8f69d6e6a9"],

Cell[CellGroupData[{

Cell["\[LeftCeiling]WFLength\[RightFloor]", "CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"f1664c2d-996a-4846-a35d-2f375d07ca9f"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"WFLength", "[", "wf_", "]"}], ":=", "\n", "\t", 
   RowBox[{"Length", "@", 
    RowBox[{"wf", "[", "\"\<Wavefunctions\>\"", "]"}]}]}], 
  ";"}]], "CodeInput",ExpressionUUID->"c034061d-570f-43fc-b2be-1ae4693944f9"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]Wavefunction Parts\[RightFloor]", "CodeSubsection",
 Evaluatable->True,ExpressionUUID->"07308ff2-cdf4-46b7-bbac-f7e6c2e4b613"],

Cell[CellGroupData[{

Cell["\[LeftCeiling]WFPart\[RightFloor]", "CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"26a36364-bff1-44b1-9d43-f6e3a105a9a2"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"WFPart", "[", 
   RowBox[{
    RowBox[{"WavefunctionsObject", "[", "c_", "]"}], ",", " ", "sel_"}], 
   "]"}], ":=", "\n", "\t", 
  RowBox[{
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"IntegerQ", "@", "sel"}], ",", " ", "\n", "\t\t", 
     RowBox[{
      RowBox[{"Lookup", "[", 
       RowBox[{"#", ",", " ", 
        RowBox[{"{", 
         RowBox[{"\"\<Energies\>\"", ",", " ", "\"\<Wavefunctions\>\""}], 
         "}"}]}], "]"}], "&"}], ",", "\n", "\t\t", "WavefunctionsObject"}], 
    "\n", "\t\t", "]"}], "@", "\n", "\t\t", 
   RowBox[{"MapAt", "[", "\n", "\t\t\t", 
    RowBox[{
     RowBox[{
      RowBox[{"Part", "[", 
       RowBox[{"#", ",", " ", "sel"}], "]"}], "&"}], ",", "\n", "\t\t\t", "c",
      ",", "\n", "\t\t\t", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", "\"\<Energies\>\"", "}"}], ",", " ", 
       RowBox[{"{", "\"\<Wavefunctions\>\"", "}"}]}], "}"}]}], "\n", "\t\t\t",
     "]"}]}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"WFPart", "[", 
    RowBox[{
     RowBox[{"WavefunctionsObject", "[", "c_", "]"}], ",", " ", "All", ",", 
     " ", "p__"}], "]"}], ":=", "\n", "\t", 
   RowBox[{"WavefunctionsObject", "@", "\n", "\t\t", 
    RowBox[{"MapAt", "[", "\n", "\t\t\t", 
     RowBox[{
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{"#", "[", 
         RowBox[{"[", "p", "]"}], "]"}], "&"}], "]"}], ",", "\n", "\t\t\t", 
      "c", ",", "\n", "\t\t\t", "\"\<Wavefunctions\>\""}], "\n", "\t\t\t", 
     "]"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"WFPart", "[", 
   RowBox[{
    RowBox[{"WavefunctionsObject", "[", "c_", "]"}], ",", " ", "sel_", ",", 
    " ", "p__"}], "]"}], ":=", "\n", "\t", 
  RowBox[{
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"IntegerQ", "@", "sel"}], ",", " ", "\n", "\t\t", 
     RowBox[{
      RowBox[{"Lookup", "[", "\n", "\t\t\t", 
       RowBox[{
        RowBox[{"MapAt", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"#", "[", 
            RowBox[{"[", "p", "]"}], "]"}], "&"}], ",", " ", "#", ",", " ", 
          "\"\<Wavefunctions\>\""}], "]"}], ",", " ", "\n", "\t\t\t", 
        RowBox[{"{", 
         RowBox[{"\"\<Energies\>\"", ",", " ", "\"\<Wavefunctions\>\""}], 
         "}"}]}], "\n", "\t\t\t", "]"}], "&"}], ",", "\n", "\t\t", 
     RowBox[{
      RowBox[{"WavefunctionsObject", "@", "\n", "\t\t\t", 
       RowBox[{"MapAt", "[", 
        RowBox[{
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{"#", "[", 
            RowBox[{"[", "p", "]"}], "]"}], "&"}], "]"}], ",", " ", "#", ",", 
         " ", "\"\<Wavefunctions\>\""}], "]"}]}], "&"}]}], "\n", "\t\t", 
    "]"}], "@", "\n", "\t\t", 
   RowBox[{"MapAt", "[", "\n", "\t\t\t", 
    RowBox[{
     RowBox[{
      RowBox[{"Part", "[", 
       RowBox[{"#", ",", " ", "sel"}], "]"}], "&"}], ",", "\n", "\t\t\t", "c",
      ",", "\n", "\t\t\t", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", "\"\<Energies\>\"", "}"}], ",", " ", 
       RowBox[{"{", "\"\<Wavefunctions\>\"", "}"}]}], "}"}]}], "\n", "\t\t\t",
     "]"}]}]}]}], \
"CodeInput",ExpressionUUID->"41c964cf-4378-4ee1-9450-fb34b9f5753b"]
}, Closed]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]WFKeyPart\[RightFloor]", "CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"7e48b41f-8a60-49c0-9d7f-9545580d8fc6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"WFKeyPart", "[", 
   RowBox[{
    RowBox[{"c", ":", 
     RowBox[{"WavefunctionsObject", "[", "a_", "]"}]}], ",", " ", "sel__"}], 
   "]"}], ":=", "\n", "\t", 
  RowBox[{
  "a", "[", "sel", 
   "]"}]}]], \
"CodeInput",ExpressionUUID->"fb743073-23b9-4c81-a3b3-23ba1713ad56"]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]WavefunctionNormalize\[RightFloor]", "CodeSubsection",
 Evaluatable->True,ExpressionUUID->"d9f2c565-9ead-44fc-b994-c80399146fb1"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"WavefunctionNormalize", "[", "wfs_", "]"}], ":=", "\n", "\t", 
   RowBox[{"wfs", "/", 
    RowBox[{"Map", "[", 
     RowBox[{"Norm", ",", " ", "wfs"}], "]"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"WFNormalize", "[", "c_WavefunctionsObject", "]"}], ":=", "\n", 
   "\t", 
   RowBox[{"MapAt", "[", 
    RowBox[{
    "WavefunctionNormalize", ",", " ", "c", ",", " ", 
     "\"\<Wavefunctions\>\""}], "]"}]}], 
  ";"}]}], "CodeInput",ExpressionUUID->"cfa53a02-96e9-4e10-9895-65cf9f6503a8"]\

}, Closed]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]NormalizedQ\[RightFloor]", "CodeSubsection",
 Evaluatable->True,ExpressionUUID->"0c79370d-3705-4561-9c17-cf010b3207f6"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"WFNormalizedQ", "[", "c_WavefunctionsObject", "]"}], ":=", "\n", 
   "\t", 
   RowBox[{"AllTrue", "[", 
    RowBox[{
     RowBox[{"Norm", "/@", 
      RowBox[{"c", "[", "\"\<Wavefunctions\>\"", "]"}]}], ",", " ", 
     RowBox[{
      RowBox[{"#", "\[Equal]", "1"}], "&"}]}], "]"}]}], 
  ";"}]], "CodeInput",ExpressionUUID->"b0f38d94-cea8-4e7d-82b7-bc12529b4f7f"]
}, Closed]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]WavefunctionsProduct\[RightFloor]", "CodeSubsection",
 Evaluatable->True,ExpressionUUID->"0189d5f7-97c5-4bc6-a8ac-2a1372e7b7ba"],

Cell[BoxData[
 RowBox[{
  RowBox[{"WFProduct", "[", "\n", "\t", 
   RowBox[{
   "wfns1_WavefunctionsObject", ",", "\n", "\t", 
    "wfnsother__WavefunctionsObject", ",", "\n", "\t", 
    RowBox[{"n", ":", 
     RowBox[{
      RowBox[{"_Integer", "?", "Positive"}], "|", "All", "|", "Automatic"}], 
     ":", "Automatic"}]}], "\n", "\t", "]"}], ":=", "\n", "\t", 
  RowBox[{"Module", "[", "\n", "\t\t", 
   RowBox[{
    RowBox[{"{", "\n", "\t\t\t", 
     RowBox[{"numCombo", ",", "\n", "\t\t\t", 
      RowBox[{"energies", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"#", "[", "\"\<Energies\>\"", "]"}], "&"}], "/@", 
        RowBox[{"{", 
         RowBox[{"wfns1", ",", "  ", "wfnsother"}], "}"}]}]}], ",", "\n", 
      "\t\t\t", 
      RowBox[{"wfns", "=", 
       RowBox[{
        RowBox[{
         RowBox[{"#", "[", "\"\<Wavefunctions\>\"", "]"}], "&"}], "/@", 
        RowBox[{"{", 
         RowBox[{"wfns1", ",", " ", "wfnsother"}], "}"}]}]}], ",", "\n", 
      "\t\t\t", "wavefunctions", ",", "\n", "\t\t\t", "indices"}], "\n", 
     "\t\t\t", "}"}], ",", "\n", "\t\t", 
    RowBox[{
     RowBox[{"numCombo", "=", "\n", "\t\t\t", 
      RowBox[{"Replace", "[", "\n", "\t\t\t\t", 
       RowBox[{"n", ",", " ", "\n", "\t\t\t\t", 
        RowBox[{"{", "\n", "\t\t\t\t\t", 
         RowBox[{
          RowBox[{"All", ":>", "\n", "\t\t\t\t\t\t", 
           RowBox[{"Apply", "[", 
            RowBox[{"Times", ",", " ", 
             RowBox[{"Length", "/@", "energies"}]}], "]"}]}], ",", "\n", 
          "\t\t\t\t\t", 
          RowBox[{
           RowBox[{"i_Integer", "?", "Positive"}], ":>", "\n", "\t\t\t\t\t\t", 
           RowBox[{"Min", "@", 
            RowBox[{"{", 
             RowBox[{"i", ",", " ", 
              RowBox[{"Apply", "[", 
               RowBox[{"Times", ",", " ", 
                RowBox[{"Length", "/@", "energies"}]}], "]"}]}], "}"}]}]}], 
          ",", "\n", "\t\t\t\t\t", 
          RowBox[{"Automatic", ":>", "\n", "\t\t\t\t\t\t", 
           RowBox[{"Min", "@", 
            RowBox[{"{", 
             RowBox[{"50", ",", " ", 
              RowBox[{"Apply", "[", 
               RowBox[{"Times", ",", " ", 
                RowBox[{"Length", "/@", "energies"}]}], "]"}]}], "}"}]}]}]}], 
         "\n", "\t\t\t\t\t", "}"}]}], "\n", "\t\t\t\t", "]"}]}], ";", "\n", 
     "\t\t", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"indices", ",", " ", "energies"}], "}"}], "=", 
      RowBox[{"ChemUtilsProductEnergies", "[", 
       RowBox[{"energies", ",", " ", "numCombo"}], "]"}]}], ";", "\n", "\t\t", 
     RowBox[{"wavefunctions", "=", "\n", "\t\t\t", 
      RowBox[{"Map", "[", "\n", "\t\t\t\t", 
       RowBox[{
        RowBox[{
         RowBox[{"GFKroneckerProduct", "@@", 
          RowBox[{"Extract", "[", 
           RowBox[{"wfns", ",", " ", 
            RowBox[{"MapIndexed", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"#2", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], ",", " ", "#"}], "}"}], 
               "&"}], ",", " ", "#"}], "]"}]}], "]"}]}], "&"}], ",", " ", 
        "\n", "\t\t\t\t", "indices"}], "\n", "\t\t\t\t", "]"}]}], ";", "\n", 
     "\t\t", 
     RowBox[{"WavefunctionsObject", "@", "\n", "\t\t\t", 
      RowBox[{"<|", "\n", "\t\t\t\t", 
       RowBox[{
        RowBox[{"\"\<Energies\>\"", "\[Rule]", "energies"}], ",", "\n", 
        "\t\t\t\t", 
        RowBox[{"\"\<Wavefunctions\>\"", "\[Rule]", "wavefunctions"}]}], "\n",
        "\t\t\t\t", "|>"}]}]}]}], "\n", "\t\t", 
   "]"}]}]], \
"CodeInput",ExpressionUUID->"ca29e743-f5f3-48ff-918d-39c51a888013"]
}, Closed]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]GridWavefunctions\[RightFloor]", "CodeSubsection",
 Evaluatable->True,ExpressionUUID->"b39e0278-5ddd-4779-b1be-c95b49a2de99"],

Cell[CellGroupData[{

Cell["\[LeftCeiling]iChemDVRDefaultThreadGridWavefunctions\[RightFloor]", \
"CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"fe931f93-b1ad-4d25-8108-2398f7a0f2c9"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"iChemDVRDefaultThreadGridWavefunctions", "[", 
    RowBox[{"gps_", ",", " ", "wfns_", ",", " ", "retE_"}], "]"}], ":=", "\n",
    "\t", 
   RowBox[{"Module", "[", "\n", "\t\t", 
    RowBox[{
     RowBox[{"{", "\n", "\t\t\t", 
      RowBox[{"grid", "=", "gps"}], "\n", "\t\t\t", "}"}], ",", "\n", 
     "\t\t\t", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", 
         RowBox[{"ListQ", "@", 
          RowBox[{"First", "@", "grid"}]}]}], ",", "\n", "\t\t\t\t", 
        RowBox[{"grid", "=", 
         RowBox[{"List", "/@", "grid"}]}]}], "\n", "\t", "\t\t\t", "]"}], ";",
       "\n", "\t\t", 
      RowBox[{"grid", "=", 
       RowBox[{"Developer`ToPackedArray", "@", "grid"}]}], ";", "\n", "\t\t", 
      
      RowBox[{"If", "[", 
       RowBox[{"retE", ",", " ", "\n", "\t\t\t", 
        RowBox[{"MapThread", "[", "\n", "\t\t\t\t", 
         RowBox[{
          RowBox[{
           RowBox[{"#", "->", 
            RowBox[{"Join", "[", 
             RowBox[{"grid", ",", " ", 
              RowBox[{"List", "/@", "#2"}], ",", " ", "2"}], "]"}]}], "&"}], 
          ",", "\n", "\t", "\t\t\t", "wfns"}], "\n", "\t", "\t\t\t", "]"}], 
        ",", "\n", "\t\t\t", 
        RowBox[{"Map", "[", "\n", "\t\t\t\t", 
         RowBox[{
          RowBox[{
           RowBox[{"Join", "[", 
            RowBox[{"grid", ",", " ", 
             RowBox[{"List", "/@", "#"}], ",", " ", "2"}], "]"}], "&"}], ",", 
          " ", "\n", "\t\t\t\t", 
          RowBox[{"wfns", "[", 
           RowBox[{"[", "2", "]"}], "]"}]}], "\n", "\t\t\t\t", "]"}]}], "\n", 
       "\t\t\t", "]"}]}]}], "\n", "\t\t", "]"}]}], 
  ";"}]], "CodeInput",ExpressionUUID->"cc8fe620-5d2e-46c2-908a-22aacefa8495"]
}, Closed]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]ChemDVRDefaultGridWavefunctions\[RightFloor]", \
"CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"fdad6e0d-f83b-46a6-9fd7-881c3f95e829"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "ChemDVRDefaultGridWavefunctions", "]"}], "=", 
   "\n", "\t", 
   RowBox[{"Join", "[", "\n", "\t\t", 
    RowBox[{
     RowBox[{"{", "\n", "\t\t\t", 
      RowBox[{
       RowBox[{"\"\<ReturnEnergies\>\"", "\[Rule]", "False"}], ",", "\n", 
       "\t\t\t", 
       RowBox[{"\"\<PruningEnergy\>\"", "\[Rule]", "None"}]}], "\n", "\t\t\t",
       "}"}], ",", "\n", "\t\t", 
     RowBox[{"Options", "[", "ChemDVRDefaultWavefunctionSelection", "]"}], 
     ",", "\n", "\t\t", 
     RowBox[{"Options", "[", "ChemDVRDefaultGridPointList", "]"}]}], "\n", 
    "\t\t", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"ChemDVRDefaultGridWavefunctions", "[", "\n", "\t", 
    RowBox[{
    "grid_", ",", " ", "\n", "\t", "wfs_", ",", "\n", "\t", "V_", ",", "\n", 
     "\t", 
     RowBox[{"o", ":", 
      RowBox[{"OptionsPattern", "[", "]"}]}]}], "\n", "\t", "]"}], ":=", "\n",
    "\t", 
   RowBox[{"With", "[", "\n", "\t\t", 
    RowBox[{
     RowBox[{"{", "\n", "\t\t\t", 
      RowBox[{
       RowBox[{"coreGridPoints", "=", "\n", "\t\t\t\t", 
        RowBox[{"ChemDVRDefaultPruneGridPoints", "[", "\n", "\t\t\t\t\t", 
         RowBox[{
          RowBox[{"ChemDVRDefaultGridPointList", "[", 
           RowBox[{"grid", ",", " ", "\n", "\t", "\t", "\t\t\t\t", 
            RowBox[{"FilterRules", "[", 
             RowBox[{
              RowBox[{"{", "o", "}"}], ",", " ", 
              RowBox[{"Options", "@", "ChemDVRDefaultGridPointList"}]}], 
             "]"}]}], "\n", "\t\t\t\t\t\t", "]"}], ",", "\n", "\t\t\t\t\t", 
          "V", ",", "\n", "\t\t\t\t\t", 
          RowBox[{"OptionValue", "[", "\"\<PruningEnergy\>\"", "]"}]}], "\n", 
         "\t\t\t\t\t", "]"}]}], ",", "\n", "\t\t\t", 
       RowBox[{"wfns", "=", "\n", "\t\t\t\t", 
        RowBox[{
        "ChemDVRDefaultWavefunctionSelection", "[", "\n", "\t\t\t\t\t", 
         RowBox[{
          RowBox[{"ReleaseHold", "@", "wfs"}], ",", "\n", "\t\t\t\t\t", 
          RowBox[{"FilterRules", "[", 
           RowBox[{
            RowBox[{"{", "o", "}"}], ",", " ", 
            RowBox[{
            "Options", "[", "ChemDVRDefaultWavefunctionSelection", "]"}]}], 
           "]"}]}], "\n", "\t\t\t\t\t", "]"}]}], ",", "\n", "\t\t\t", 
       RowBox[{"retE", "=", 
        RowBox[{"TrueQ", "@", 
         RowBox[{"OptionValue", "[", "\"\<ReturnEnergies\>\"", "]"}]}]}]}], 
      "\n", "\t\t\t", "}"}], ",", "\n", "\t\t", 
     RowBox[{"iChemDVRDefaultThreadGridWavefunctions", "[", "\n", "\t\t\t", 
      RowBox[{
      "coreGridPoints", ",", "\n", "\t\t\t", "wfns", ",", "\n", "\t\t\t", 
       "retE"}], "\n", "\t\t\t", "]"}]}], "\n", "\t\t", "]"}]}], 
  ";"}]}], "CodeInput",ExpressionUUID->"563c6799-83c6-495c-ac37-04461420566b"]\

}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]ChemDVRDefaultInterpolatingWavefunctions\[RightFloor]", \
"CodeSubsection",
 Evaluatable->True,
 CellChangeTimes->{
  3.724795314403144*^9},ExpressionUUID->"c1c43192-5228-48c1-a154-\
5550a8659a1b"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "ChemDVRDefaultInterpolatingWavefunctions", "]"}], 
   "=", "\n", "\t", 
   RowBox[{"Options", "@", "ChemDVRDefaultGridWavefunctions"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"ChemDVRDefaultInterpolatingWavefunctions", "[", "\n", "\t", 
   RowBox[{
   "grid_", ",", "\n", "\t", "wfs_", ",", "\n", "\t", "V_", ",", "\n", "\t", 
    RowBox[{"ops", ":", 
     RowBox[{"OptionsPattern", "[", "]"}]}]}], "\n", "\t", "]"}], ":=", "\n", 
  "\t", 
  RowBox[{"With", "[", "\n", "\t\t", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"wf", "=", 
      RowBox[{"ChemDVRDefaultGridWavefunctions", "[", 
       RowBox[{"grid", ",", " ", "wfs", ",", " ", "V", ",", " ", "ops"}], 
       "]"}]}], "}"}], ",", "\n", "\t\t", 
    RowBox[{
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"MatchQ", "[", 
        RowBox[{
         RowBox[{"wf", "[", 
          RowBox[{"[", "1", "]"}], "]"}], ",", " ", "_Rule"}], "]"}], ",", 
       "\n", "\t\t\t", 
       RowBox[{
        RowBox[{
         RowBox[{"#", "[", 
          RowBox[{"[", "1", "]"}], "]"}], "\[Rule]", 
         RowBox[{"Interpolation", "[", 
          RowBox[{"#", "[", 
           RowBox[{"[", "2", "]"}], "]"}], "]"}]}], "&"}], ",", "\n", 
       "\t\t\t", "Interpolation"}], "\n", "\t\t\t", "]"}], "/@", "wf"}]}], 
   "\n", "\t\t", 
   "]"}]}]}], \
"CodeInput",ExpressionUUID->"f5bdd442-8804-4fca-aaf8-e1b9a10ccdd1"]
}, Closed]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]ExpectationValues\[RightFloor]", "CodeSubsection",
 Evaluatable->True,ExpressionUUID->"d1aef3dd-5ea3-4c58-b7fc-fd2bd9d09da3"],

Cell[CellGroupData[{

Cell["\[LeftCeiling]expectationValue\[RightFloor]", "CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"d5e13232-994a-40e6-a51d-7438133420a8"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"expectationValueVec", "[", 
    RowBox[{"func_", ",", " ", "grid_"}], "]"}], ":=", "\n", "\t", 
   RowBox[{"Replace", "[", 
    RowBox[{
     RowBox[{"func", "@", "grid"}], ",", " ", "\n", "\t\t", 
     RowBox[{
      RowBox[{"Except", "[", 
       RowBox[{"_List", "?", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"Length", "[", "#", "]"}], "\[Equal]", 
           RowBox[{"Length", "@", "grid"}]}], "&"}], ")"}]}], "]"}], ":>", 
      RowBox[{"Map", "[", 
       RowBox[{"func", ",", " ", "grid"}], "]"}]}]}], "\n", "\t\t", "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"expectationValueVec", "[", 
    RowBox[{"func_", ",", " ", "grid_", ",", " ", "wf_"}], "]"}], ":=", "\n", 
   "\t", 
   RowBox[{"Replace", "[", 
    RowBox[{
     RowBox[{"func", "[", 
      RowBox[{"grid", ",", " ", "wf"}], "]"}], ",", "\n", "\t\t", 
     RowBox[{
      RowBox[{"Except", "[", 
       RowBox[{"_List", "?", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"Length", "[", "#", "]"}], "\[Equal]", 
           RowBox[{"Length", "@", "grid"}]}], "&"}], ")"}]}], "]"}], ":>", 
      "\n", "\t\t\t", 
      RowBox[{"MapThread", "[", 
       RowBox[{"func", ",", " ", 
        RowBox[{"{", 
         RowBox[{"grid", ",", " ", "wf"}], "}"}]}], "]"}]}]}], "\n", "\t\t", 
    "]"}]}], ";"}]}], \
"CodeInput",ExpressionUUID->"29f5f034-3c95-481e-a935-3281bc8a7955"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"multiplicativeOperatorQ", "[", "func_Function", "]"}], ":=", "\n",
    "\t", 
   RowBox[{"!", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"MemberQ", "[", 
       RowBox[{"func", ",", " ", 
        RowBox[{"Slot", "[", "2", "]"}], ",", " ", "\[Infinity]"}], "]"}], "||",
       "\n", "\t\t\t", 
      RowBox[{"MatchQ", "[", 
       RowBox[{"func", ",", " ", 
        RowBox[{
         RowBox[{"Verbatim", "[", "Function", "]"}], "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"_", ",", " ", "_"}], "}"}], ",", " ", "___"}], "]"}]}], 
       "]"}]}], ")"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"multiplicativeOperatorQ", "[", "e_", "]"}], ":=", "\n", "\t", 
   "False"}], 
  ";"}]}], "CodeInput",ExpressionUUID->"91029e27-5abd-4f85-b366-c72727e2cf03"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"expectationValue", "[", "\n", "\t", 
    RowBox[{
    "func_Function", ",", " ", "grid_", ",", " ", "wfL_", ",", " ", "wfR_", 
     ",", "\n", "\t", "multiplicative_"}], "\n", "\t", "]"}], ":=", "\n", 
   "\t", 
   RowBox[{"wfL", ".", "\n", "\t\t", 
    RowBox[{"With", "[", "\n", "\t\t\t", 
     RowBox[{
      RowBox[{"{", "\n", "\t\t\t\t", 
       RowBox[{"mult", "=", "\n", "\t\t\t\t\t", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"multiplicative", "===", "Automatic"}], ",", "\n", 
          "\t\t\t\t\t\t", 
          RowBox[{"multiplicativeOperatorQ", "[", "func", "]"}], ",", "\n", 
          "\t\t\t\t\t\t", 
          RowBox[{"TrueQ", "@", "multiplicative"}]}], "\n", "\t\t\t\t\t\t", 
         "]"}]}], "\n", "\t\t\t\t", "}"}], ",", "\n", "\t\t\t", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", "mult"}], ",", "\n", "\t\t\t\t", 
        RowBox[{"expectationValueVec", "[", 
         RowBox[{"func", ",", " ", "grid", ",", " ", "wfR"}], "]"}], ",", 
        "\n", "\t\t\t\t", 
        RowBox[{"wfR", "*", 
         RowBox[{"expectationValueVec", "[", 
          RowBox[{"func", ",", " ", "grid"}], "]"}]}]}], "\n", "\t\t\t\t", 
       "]"}]}], "\n", "\t\t", "]"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"expectationValue", "[", 
   RowBox[{
    RowBox[{"func", ":", 
     RowBox[{"Except", "[", "_Function", "]"}]}], ",", " ", "grid_", ",", " ",
     "wfL_", ",", " ", "wfR_", ",", "\n", "\t", "multiplicative_"}], "\n", 
   "\t", "]"}], ":=", "\n", "\t", 
  RowBox[{"wfL", ".", 
   RowBox[{"Replace", "[", 
    RowBox[{
     RowBox[{"expectationValueVec", "[", 
      RowBox[{"func", ",", " ", "grid", ",", " ", "wfR"}], "]"}], ",", "\n", 
     "\t\t", 
     RowBox[{"{", "\n", "\t\t\t", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"_func", ",", " ", "__"}], "}"}], "\[RuleDelayed]", "\n", 
       "\t\t\t\t", 
       RowBox[{"Replace", "[", 
        RowBox[{
         RowBox[{"expectationValueVec", "[", 
          RowBox[{"func", ",", " ", "grid"}], "]"}], ",", "\n", "\t\t\t\t\t", 
         
         RowBox[{"{", "\n", "\t\t\t\t\t\t", 
          RowBox[{
           RowBox[{
            RowBox[{"{", 
             RowBox[{"_func", ",", " ", "__"}], "}"}], ":>", "\n", 
            "\t\t\t\t\t\t\t", 
            RowBox[{"PackageRaiseException", "[", "\n", "\t\t\t\t\t\t\t\t", 
             RowBox[{
             "Automatic", ",", "\n", "\t\t\t\t\t\t\t\t", 
              "\"\<Operator `` in matrix element calculation didn't \
evaluate\>\"", ",", "\n", "\t\t\t\t\t\t\t\t", "func"}], "\n", 
             "\t\t\t\t\t\t\t\t", "]"}]}], ",", "\n", "\t\t\t\t\t\t", 
           RowBox[{"l_", "\[RuleDelayed]", 
            RowBox[{"wfR", "*", "l"}]}]}], "\n", "\t\t\t\t\t\t", "}"}]}], 
        "\n", "\t\t\t\t\t", "]"}]}], "\n", "\t\t\t", "}"}]}], "\n", "\t\t", 
    "]"}]}]}]}], \
"CodeInput",ExpressionUUID->"fc176b76-5d44-4933-b9d3-c6e8dd71961d"]
}, Closed]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]operatorMatrix\[RightFloor]", "CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"b3f7d8ff-446a-461c-b1d0-960ca3dd79bc"],

Cell[BoxData[
 RowBox[{
  RowBox[{"operatorMatrix", "[", 
   RowBox[{
   "exf_", ",", " ", "grid_", ",", " ", "wfnsL_", ",", " ", "wfnsR_", ",", 
    " ", "assumeRealSym_", ",", " ", "assumeHerm_", ",", " ", "mult_"}], 
   "]"}], ":=", "\n", "\t", 
  RowBox[{"Block", "[", "\n", "\t\t", 
   RowBox[{
    RowBox[{"{", "\n", "\t\t\t", 
     RowBox[{
      RowBox[{"mat", "=", 
       RowBox[{"ConstantArray", "[", 
        RowBox[{"0.", ",", " ", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Length", "@", "wfnsL"}], ",", " ", 
           RowBox[{"Length", "@", "wfnsR"}]}], "}"}]}], "]"}]}], ",", "\n", 
      "\t\t\t", 
      RowBox[{"asrs", "=", 
       RowBox[{"TrueQ", "@", "assumeRealSym"}]}], ",", "\n", "\t\t\t", 
      RowBox[{"ash", "=", 
       RowBox[{"TrueQ", "@", "assumeHerm"}]}], ",", "\n", "\t\t\t", 
      RowBox[{"mo", "=", "mult"}]}], "\n", "\t\t\t", "}"}], ",", "\n", "\t", 
    RowBox[{
     RowBox[{"Which", "[", "\n", "\t\t", 
      RowBox[{"asrs", ",", "\n", "\t\t\t", 
       RowBox[{"Do", "[", "\n", "\t\t\t\t", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"i", ">", "j"}], ",", " ", "\n", "\t\t\t\t\t", 
           RowBox[{
            RowBox[{"mat", "[", 
             RowBox[{"[", 
              RowBox[{"i", ",", " ", "j"}], "]"}], "]"}], "=", 
            RowBox[{"mat", "[", 
             RowBox[{"[", 
              RowBox[{"j", ",", " ", "i"}], "]"}], "]"}]}], ",", "\n", 
           "\t\t\t\t\t", 
           RowBox[{
            RowBox[{"mat", "[", 
             RowBox[{"[", 
              RowBox[{"i", ",", " ", "j"}], "]"}], "]"}], "=", "\n", 
            "\t\t\t\t\t\t", 
            RowBox[{"expectationValue", "[", 
             RowBox[{"exf", ",", " ", "grid", ",", " ", 
              RowBox[{"wfnsL", "[", 
               RowBox[{"[", "i", "]"}], "]"}], ",", " ", 
              RowBox[{"wfnsR", "[", 
               RowBox[{"[", "j", "]"}], "]"}], ",", " ", "mo"}], "]"}]}]}], 
          "\n", "\t\t\t\t\t", "]"}], ",", "\n", "\t\t\t\t", 
         RowBox[{"{", 
          RowBox[{"i", ",", " ", 
           RowBox[{"Length", "@", "wfnsL"}]}], "}"}], ",", "\n", "\t\t\t\t", 
         RowBox[{"{", 
          RowBox[{"j", ",", " ", 
           RowBox[{"Length", "@", "wfnsR"}]}], "}"}]}], "\n", "\t\t\t\t", 
        "]"}], ",", "\n", "\t\t", "ash", ",", "\n", "\t\t\t", 
       RowBox[{"Do", "[", "\n", "\t\t\t\t", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"i", ">", "j"}], ",", " ", "\n", "\t\t\t\t\t", 
           RowBox[{
            RowBox[{"mat", "[", 
             RowBox[{"[", 
              RowBox[{"i", ",", " ", "j"}], "]"}], "]"}], "=", 
            RowBox[{"Conjugate", "@", 
             RowBox[{"mat", "[", 
              RowBox[{"[", 
               RowBox[{"j", ",", " ", "i"}], "]"}], "]"}]}]}], ",", "\n", 
           "\t\t\t\t\t", 
           RowBox[{
            RowBox[{"mat", "[", 
             RowBox[{"[", 
              RowBox[{"i", ",", " ", "j"}], "]"}], "]"}], "=", "\n", 
            "\t\t\t\t\t\t", 
            RowBox[{"expectationValue", "[", 
             RowBox[{"exf", ",", " ", "grid", ",", " ", 
              RowBox[{"wfnsL", "[", 
               RowBox[{"[", "i", "]"}], "]"}], ",", " ", 
              RowBox[{"wfnsR", "[", 
               RowBox[{"[", "j", "]"}], "]"}], ",", " ", "mo"}], "]"}]}]}], 
          "\n", "\t\t\t\t\t", "]"}], ",", "\n", "\t\t\t\t", 
         RowBox[{"{", 
          RowBox[{"i", ",", " ", 
           RowBox[{"Length", "@", "wfnsL"}]}], "}"}], ",", "\n", "\t\t\t\t", 
         RowBox[{"{", 
          RowBox[{"j", ",", " ", 
           RowBox[{"Length", "@", "wfnsR"}]}], "}"}]}], "\n", "\t\t\t\t", 
        "]"}], ",", "\n", "\t\t", "True", ",", "\n", "\t\t\t", 
       RowBox[{"Do", "[", "\n", "\t\t\t\t", 
        RowBox[{
         RowBox[{
          RowBox[{"mat", "[", 
           RowBox[{"[", 
            RowBox[{"i", ",", " ", "j"}], "]"}], "]"}], "=", "\n", 
          "\t\t\t\t\t", 
          RowBox[{"expectationValue", "[", 
           RowBox[{"exf", ",", " ", "grid", ",", " ", 
            RowBox[{"wfnsL", "[", 
             RowBox[{"[", "i", "]"}], "]"}], ",", " ", 
            RowBox[{"wfnsR", "[", 
             RowBox[{"[", "j", "]"}], "]"}], ",", " ", "mo"}], "]"}]}], ",", 
         "\n", "\t\t\t\t", 
         RowBox[{"{", 
          RowBox[{"i", ",", " ", 
           RowBox[{"Length", "@", "wfnsL"}]}], "}"}], ",", "\n", "\t\t\t\t", 
         RowBox[{"{", 
          RowBox[{"j", ",", " ", 
           RowBox[{"Length", "@", "wfnsR"}]}], "}"}]}], "\n", "\t\t\t\t", 
        "]"}]}], "\n", "\t\t", "]"}], ";", "\n", "\t", 
     RowBox[{"Developer`ToPackedArray", "@", "mat"}]}]}], "\n", "\t", 
   "]"}]}]], \
"CodeInput",ExpressionUUID->"b15c54f2-a7e2-46ef-92c1-65b52b6993a3"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]ExpectationValues\[RightFloor]", "CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"8fb84396-c56a-49c0-9543-2eb7a114ca0e"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "WFExpectationValues", "]"}], "=", "\n", "\t", 
   RowBox[{"{", "\n", "\t\t", 
    RowBox[{"\"\<MultiplicativeOperator\>\"", "\[Rule]", "Automatic"}], "\n", 
    "\t\t", "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"iWFExpectationValues", "[", "\n", "\t", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"grid_", ",", " ", "wfns_"}], "}"}], ",", "\n", "\t", "evs_", 
     ",", "\n", "\t", "mul_", ",", "\n", "\t", 
     RowBox[{"ops", ":", 
      RowBox[{"OptionsPattern", "[", "]"}]}]}], "\n", "\t", "]"}], ":=", "\n",
    "\t", 
   RowBox[{"With", "[", "\n", "\t\t", 
    RowBox[{
     RowBox[{"{", "\n", "\t\t\t", 
      RowBox[{"exfns", "=", 
       RowBox[{"Flatten", "@", 
        RowBox[{"List", "@", "evs"}]}]}], "\n", "\t\t\t", "}"}], ",", "\n", 
     "\t\t\t", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"Not", "@", 
         RowBox[{"ListQ", "@", "evs"}]}], ",", " ", 
        RowBox[{"Map", "[", "First", "]"}], ",", " ", "Identity"}], "]"}], 
      "@", "\n", "\t\t\t\t", 
      RowBox[{"Table", "[", "\n", "\t\t\t\t\t", 
       RowBox[{
        RowBox[{"Map", "[", "\n", "\t\t\t\t\t\t", 
         RowBox[{
          RowBox[{
           RowBox[{"expectationValue", "[", 
            RowBox[{
            "#", ",", " ", "grid", ",", " ", "wf", ",", " ", "wf", ",", " ", 
             "mul"}], "]"}], "&"}], ",", "\n", "\t\t\t\t\t\t", "exfns"}], 
         "\n", "\t\t\t\t\t\t", "]"}], ",", "\n", "\t\t\t\t\t", 
        RowBox[{"{", 
         RowBox[{"wf", ",", " ", "wfns"}], "}"}]}], "\n", "\t\t\t\t\t", 
       "]"}]}]}], "\n", "\t\t", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"WFExpectationValues", "[", "\n", "\t", 
    RowBox[{"c_WavefunctionsObject", ",", "\n", "\t", "evs_", ",", "\n", "\t", 
     RowBox[{"ops", ":", 
      RowBox[{"OptionsPattern", "[", "]"}]}]}], "\n", "\t", "]"}], ":=", "\n",
    "\t", 
   RowBox[{"iWFExpectationValues", "[", "\n", "\t\t", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"c", "[", "\"\<Grid\>\"", "]"}], "[", "\"\<Points\>\"", "]"}],
        ",", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"Flatten", "@", 
          RowBox[{"#", "[", "\"\<Values\>\"", "]"}]}], "&"}], "/@", 
        RowBox[{"c", "[", "\"\<Wavefunctions\>\"", "]"}]}]}], "}"}], ",", 
     "\n", "\t\t", "evs", ",", "\n", "\t\t", 
     RowBox[{"OptionValue", "[", "\"\<MultiplicativeOperator\>\"", "]"}], ",",
      "\n", "\t\t", "ops"}], "\n", "\t\t", "]"}]}], 
  ";"}]}], "CodeInput",ExpressionUUID->"874d792a-3a56-4b10-a089-f8cf5f8273fd"]\

}, Closed]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]OperatorMatrix\[RightFloor]", "CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"3b3513b2-c248-468a-96e0-a68f1034fc47"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "WFOperatorMatrix", "]"}], "=", "\n", "\t", 
   RowBox[{"Join", "[", "\n", "\t\t", 
    RowBox[{
     RowBox[{"Options", "@", "WFExpectationValues"}], ",", "\n", "\t\t", 
     RowBox[{"{", "\n", "\t\t\t", 
      RowBox[{
       RowBox[{"\"\<AssumeSymmetric\>\"", "\[Rule]", "True"}], ",", "\n", 
       "\t\t\t", 
       RowBox[{"\"\<AssumeHermitian\>\"", "\[Rule]", "False"}]}], "\n", 
      "\t\t\t", "}"}]}], "\n", "\t\t", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"iWFOperatorMatrix", "[", "\n", "\t", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"grid_", ",", " ", "wfns_"}], "}"}], ",", "\n", "\t", "evs_", 
     ",", "\n", "\t", "asrs_", ",", "\n", "\t", "ash_", ",", "\n", "\t", 
     "mult_", ",", "\n", "\t", 
     RowBox[{"ops", ":", 
      RowBox[{"OptionsPattern", "[", "]"}]}]}], "\n", "\t", "]"}], ":=", "\n",
    "\t", 
   RowBox[{"Module", "[", "\n", "\t\t", 
    RowBox[{
     RowBox[{"{", "\n", "\t\t\t", 
      RowBox[{
       RowBox[{"exfns", "=", 
        RowBox[{"Flatten", "@", 
         RowBox[{"List", "@", "evs"}]}]}], ",", "\n", "\t\t\t", "els", ",", 
       "\n", "\t\t\t", "sels", ",", "\n", "\t\t\t", "mat", ",", "\n", 
       "\t\t\t", "exf", ",", "\n", "\t\t\t", "mo", ",", "\n", "\t\t\t", 
       RowBox[{"mul", "=", "mult"}]}], "\n", "\t\t\t", "}"}], ",", "\n", 
     "\t\t\t", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", 
         RowBox[{"ListQ", "@", "mul"}]}], ",", " ", 
        RowBox[{"mul", "=", 
         RowBox[{"ConstantArray", "[", 
          RowBox[{"mul", ",", " ", 
           RowBox[{"Length", "@", "exfns"}]}], "]"}]}]}], "]"}], ";", "\n", 
      "\t\t\t", 
      RowBox[{"Table", "[", "\n", "\t\t\t\t", 
       RowBox[{
        RowBox[{
         RowBox[{"exf", "=", 
          RowBox[{"exfns", "[", 
           RowBox[{"[", "n", "]"}], "]"}]}], ";", "\n", "\t\t\t\t", 
         RowBox[{"mo", "=", 
          RowBox[{"mul", "[", 
           RowBox[{"[", "n", "]"}], "]"}]}], ";", "\n", "\t\t\t\t", 
         RowBox[{"mat", "=", 
          RowBox[{"ConstantArray", "[", 
           RowBox[{"0.", ",", " ", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Length", "@", "wfns"}], ",", " ", 
              RowBox[{"Length", "@", "wfns"}]}], "}"}]}], "]"}]}], ";", "\n", 
         "\t\t\t\t", 
         RowBox[{"operatorMatrix", "[", 
          RowBox[{
          "exf", ",", " ", "grid", ",", " ", "wfns", ",", " ", "wfns", ",", 
           " ", "asrs", ",", " ", "ash", ",", " ", "mo"}], "]"}]}], ",", "\n",
         "\t\t\t\t", 
        RowBox[{"{", 
         RowBox[{"n", ",", " ", 
          RowBox[{"Length", "@", "exfns"}]}], "}"}]}], "\n", "\t\t\t\t", 
       "]"}]}]}], "\n", "\t\t", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"WFOperatorMatrix", "[", "\n", "\t", 
    RowBox[{"c_WavefunctionsObject", ",", "\n", "\t", "evs_", ",", "\n", "\t", 
     RowBox[{"ops", ":", 
      RowBox[{"OptionsPattern", "[", "]"}]}]}], "\n", "\t", "]"}], ":=", "\n",
    "\t", 
   RowBox[{"iWFOperatorMatrix", "[", "\n", "\t\t", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"c", "[", "\"\<Grid\>\"", "]"}], "[", "\"\<Points\>\"", "]"}],
        ",", " ", 
       RowBox[{
        RowBox[{
         RowBox[{"Flatten", "@", 
          RowBox[{"#", "[", "\"\<Values\>\"", "]"}]}], "&"}], "/@", 
        RowBox[{"c", "[", "\"\<Wavefunctions\>\"", "]"}]}]}], "}"}], ",", 
     "\n", "\t\t", "evs", ",", "\n", "\t\t", 
     RowBox[{"TrueQ", "@", 
      RowBox[{"OptionValue", "[", "\"\<AssumeSymmetric\>\"", "]"}]}], ",", 
     "\n", "\t\t", 
     RowBox[{"TrueQ", "@", 
      RowBox[{"OptionValue", "[", "\"\<AssumeHermitian\>\"", "]"}]}], ",", 
     "\n", "\t\t", 
     RowBox[{"OptionValue", "[", "\"\<MultiplicativeOperator\>\"", "]"}], ",",
      "\n", "\t\t", "ops"}], "\n", "\t\t", "]"}]}], 
  ";"}]}], "CodeInput",ExpressionUUID->"e0ba8185-819e-45d6-aa40-e1475d0b6048"]\

}, Closed]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]OperatorMatrixElements\[RightFloor]", "CodeSubsubsection",
 
 Evaluatable->True,ExpressionUUID->"164dc4c7-9f5f-4026-9047-706c6a07357f"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "WFOperatorMatrixElements", "]"}], "=", "\n", "\t", 
   RowBox[{"Options", "@", "WFOperatorMatrix"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"iWFOperatorMatrixElements", "[", "\n", "\t", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"grid_", ",", " ", "wfns_"}], "}"}], ",", "\n", "\t", "evs_", 
     ",", "\n", "\t", "ash_", ",", "\n", "\t", "asrs_", ",", "\n", "\t", 
     "mult_", ",", "\n", "\t", 
     RowBox[{"ops", ":", 
      RowBox[{"OptionsPattern", "[", "]"}]}]}], "\n", "\t", "]"}], ":=", "\n",
    "\t", 
   RowBox[{"Module", "[", "\n", "\t\t", 
    RowBox[{
     RowBox[{"{", "\n", "\t\t\t", 
      RowBox[{
       RowBox[{"exfns", "=", 
        RowBox[{"Flatten", "@", 
         RowBox[{"List", "@", "evs"}]}]}], ",", "\n", "\t\t\t", "els", ",", 
       "\n", "\t\t\t", "sels", ",", "\n", "\t\t\t", "mat", ",", "\n", 
       "\t\t\t", "wfL", ",", "\n", "\t\t\t", "wfR", ",", "\n", "\t\t\t", 
       "res", ",", "\n", "\t\t\t", 
       RowBox[{"mul", "=", "mult"}]}], "\n", "\t\t\t", "}"}], ",", "\n", 
     "\t\t", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"sels", ",", " ", "exfns"}], "}"}], "=", 
       RowBox[{"Transpose", "[", 
        RowBox[{"List", "@@@", "exfns"}], "]"}]}], ";", "\n", "\t\t", 
      RowBox[{"(*", " ", 
       RowBox[{
       "get", " ", "a", " ", "list", " ", "of", " ", "LHS", " ", 
        "wavefunctions", " ", "and", " ", "RHS", " ", "wavefunctions", " ", 
        "for", " ", "each", " ", "set", " ", "of", " ", "expectation", " ", 
        "value", " ", "functions"}], " ", "*)"}], "\n", "\t\t", 
      RowBox[{"wfL", "=", "\n", "\t\t\t", 
       RowBox[{"Map", "[", "\n", "\t\t\t\t", 
        RowBox[{
         RowBox[{
          RowBox[{"Map", "[", "\n", "\t\t\t\t\t", 
           RowBox[{
            RowBox[{
             RowBox[{"Part", "[", 
              RowBox[{"wfns", ",", " ", "#"}], "]"}], "&"}], ",", "\n", 
            "\t\t\t\t\t", 
            RowBox[{"Replace", "[", "\n", "\t\t\t\t\t\t", 
             RowBox[{
              RowBox[{
               RowBox[{"Replace", "[", 
                RowBox[{"#", ",", " ", 
                 RowBox[{
                  RowBox[{"k", ":", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Except", "[", "_List", "]"}], ",", " ", "_"}], 
                    "}"}]}], "\[RuleDelayed]", 
                  RowBox[{"{", "k", "}"}]}]}], "]"}], "[", 
               RowBox[{"[", 
                RowBox[{"All", ",", " ", "1"}], "]"}], "]"}], ",", "\n", 
              "\t\t\t\t\t\t", 
              RowBox[{"i_Integer", "\[RuleDelayed]", 
               RowBox[{"{", "i", "}"}]}], ",", "\n", "\t\t\t\t\t\t", "1"}], 
             "\n", "\t\t\t\t\t\t", "]"}]}], "\n", "\t\t\t\t\t", "]"}], "&"}], 
         ",", "\n", "\t\t\t\t", "sels"}], "\n", "\t\t\t\t", "]"}]}], ";", 
      "\n", "\t\t", 
      RowBox[{"wfR", "=", "\n", "\t\t\t", 
       RowBox[{"Map", "[", "\n", "\t\t\t\t", 
        RowBox[{
         RowBox[{
          RowBox[{"Map", "[", "\n", "\t\t\t\t\t", 
           RowBox[{
            RowBox[{
             RowBox[{"Part", "[", 
              RowBox[{"wfns", ",", " ", "#"}], "]"}], "&"}], ",", "\n", 
            "\t\t\t\t\t", 
            RowBox[{"Replace", "[", "\n", "\t\t\t\t\t\t", 
             RowBox[{
              RowBox[{
               RowBox[{"Replace", "[", 
                RowBox[{"#", ",", " ", 
                 RowBox[{
                  RowBox[{"k", ":", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Except", "[", "_List", "]"}], ",", " ", "_"}], 
                    "}"}]}], "\[RuleDelayed]", 
                  RowBox[{"{", "k", "}"}]}]}], "]"}], "[", 
               RowBox[{"[", 
                RowBox[{"All", ",", " ", "2"}], "]"}], "]"}], ",", "\n", 
              "\t\t\t\t\t\t", 
              RowBox[{"i_Integer", "\[RuleDelayed]", 
               RowBox[{"{", "i", "}"}]}], ",", "\n", "\t\t\t\t\t\t", "1"}], 
             "\n", "\t\t\t\t\t\t", "]"}]}], "\n", "\t\t\t\t\t", "]"}], "&"}], 
         ",", "\n", "\t\t\t\t", "sels"}], "\n", "\t\t\t\t", "]"}]}], ";", 
      "\n", "\t\t", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", 
         RowBox[{"ListQ", "@", "mul"}]}], ",", " ", 
        RowBox[{"mul", "=", 
         RowBox[{"ConstantArray", "[", 
          RowBox[{"mul", ",", " ", 
           RowBox[{"Length", "@", "exfns"}]}], "]"}]}]}], "]"}], ";", "\n", 
      "\t\t", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{
        "Thread", " ", "over", " ", "the", " ", "right", " ", "and", " ", 
         "left", " ", "wavefunctions"}], ",", " ", 
        RowBox[{"the", " ", "operators"}], ",", " ", 
        RowBox[{"and", " ", "the", " ", "multiplicativity"}]}], " ", "*)"}], 
      "\n", "\t\t", 
      RowBox[{"res", "=", "\n", "\t\t\t", 
       RowBox[{"MapThread", "[", "\n", "\t\t\t\t", 
        RowBox[{
         RowBox[{
          RowBox[{"With", "[", "\n", "\t\t\t\t\t", 
           RowBox[{
            RowBox[{"{", "\n", "\t\t\t\t\t\t", 
             RowBox[{
              RowBox[{"exfn", "=", "#3"}], ",", "\n", "\t\t\t\t\t\t", 
              RowBox[{"m", "=", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"ListQ", "@", "#3"}], "&&", 
                  RowBox[{"!", 
                   RowBox[{"ListQ", "@", "#4"}]}]}], ",", " ", 
                 RowBox[{"ConstantArray", "[", 
                  RowBox[{"#4", ",", " ", 
                   RowBox[{"Length", "@", "#3"}]}], "]"}], ",", " ", "#4"}], 
                "]"}]}]}], "\n", "\t\t\t\t\t\t", "}"}], ",", "\n", 
            "\t\t\t\t\t", 
            RowBox[{"(*", " ", 
             RowBox[{
             "need", " ", "another", " ", "thread", " ", "in", " ", "case", 
              " ", "multiple", " ", "specs", " ", "were", " ", "provided", 
              " ", "for", " ", "a", " ", "single", " ", "function"}], " ", 
             "*)"}], "\n", "\t\t\t\t\t", 
            RowBox[{
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"Length", "@", "#"}], "\[Equal]", "1"}], ",", " ", 
               "First", ",", " ", "Identity"}], "]"}], "@", "\n", 
             "\t\t\t\t\t\t", 
             RowBox[{"MapThread", "[", "\n", "\t\t\t\t\t\t\t", 
              RowBox[{
               RowBox[{
                RowBox[{"With", "[", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"l", "=", "#"}], ",", " ", 
                    RowBox[{"r", "=", "#2"}]}], "}"}], ",", "\n", "\t", 
                  "\t\t\t\t\t\t\t", 
                  RowBox[{"(*", " ", 
                   RowBox[{
                   "Thread", " ", "over", " ", "the", " ", "operators", " ", 
                    "and", " ", "multiplicativity"}], " ", "*)"}], "\n", "\t",
                   "\t", "\t", "\t\t\t\t\t", 
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{"!", 
                    RowBox[{"ListQ", "@", "exfn"}]}], ",", "\n", "\t", 
                    "\t\t\t\t\t\t\t\t", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "@", "l"}], ">", "1"}], "||", 
                    RowBox[{
                    RowBox[{"Length", "@", "r"}], ">", "1"}]}], ",", "\n", 
                    "\t\t\t\t\t\t\t\t\t\t", 
                    RowBox[{"operatorMatrix", "[", 
                    RowBox[{
                    "exfn", ",", " ", "grid", ",", " ", "l", ",", " ", "r", 
                    ",", " ", "asrs", ",", " ", "ash", ",", " ", "m"}], "]"}],
                     ",", "\n", "\t", "\t\t\t\t\t\t\t\t\t", 
                    RowBox[{"expectationValue", "[", 
                    RowBox[{"exfn", ",", " ", "grid", ",", " ", 
                    RowBox[{"l", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
                    RowBox[{"r", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", " ", "m"}], "]"}]}], 
                    "\n", "\t", "\t", "\t", "\t\t\t\t\t\t\t", "]"}], ",", 
                    "\n", "\t", "\t", "\t", "\t\t\t\t\t\t", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "@", "exfn"}], "\[Equal]", "1"}], ",", 
                    " ", "First", ",", " ", "Identity"}], "]"}], "@", "\n", 
                    "\t", "\t", "\t", "\t\t\t\t\t\t\t", 
                    RowBox[{
                    "MapThread", "[", "\n", "\t", "\t", "\t", 
                    "\t\t\t\t\t\t\t\t", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"exf", "=", "#"}], ",", " ", 
                    RowBox[{"mo", "=", "#2"}]}], "}"}], ",", "\n", "\t", "\t",
                     "\t", "\t\t\t\t\t\t\t\t\t", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "@", "l"}], ">", "1"}], "||", 
                    RowBox[{
                    RowBox[{"Length", "@", "r"}], ">", "1"}]}], ",", "\n", 
                    "\t", "\t", "\t", "\t", "\t", "\t", "\t", "\t\t\t\t\t\t", 
                    
                    RowBox[{"operatorMatrix", "[", 
                    RowBox[{
                    "exf", ",", " ", "grid", ",", " ", "l", ",", " ", "r", 
                    ",", " ", "asrs", ",", " ", "ash", ",", " ", "mo"}], 
                    "]"}], ",", "\n", "\t", "\t", "\t", "\t", "\t", "\t", 
                    "\t", "\t\t\t\t\t\t", 
                    RowBox[{"expectationValue", "[", 
                    RowBox[{"exf", ",", " ", "grid", ",", " ", 
                    RowBox[{"l", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", " ", 
                    RowBox[{"r", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", " ", "mo"}], "]"}]}],
                     "\n", "\t", "\t", "\t", "\t\t\t\t\t\t\t\t\t\t", "]"}]}], 
                    "\n", "\t", "\t", "\t", "\t\t\t\t\t\t\t\t\t", "]"}], 
                    "&"}], ",", "\n", "\t", "\t\t\t\t\t\t\t\t\t\t", 
                    RowBox[{"{", "\n", "\t", "\t\t\t\t\t\t\t\t\t\t\t", 
                    RowBox[{
                    "exfn", ",", "\n", "\t", "\t\t\t\t\t\t\t\t\t\t\t", "m"}], 
                    "\n", "\t", "\t\t\t\t\t\t\t\t\t\t\t", "}"}]}], "\n", "\t",
                     "\t\t\t\t\t\t\t\t\t\t", "]"}]}]}], "\n", "\t", 
                   "\t\t\t\t\t\t\t\t", "]"}]}], "\n", "\t", "\t\t\t\t\t\t\t", 
                 "]"}], "&"}], ",", "\n", "\t", "\t\t\t\t\t\t", 
               RowBox[{"{", 
                RowBox[{"#", ",", " ", "#2"}], "}"}]}], "\n", "\t", 
              "\t\t\t\t\t\t", "]"}]}]}], "\n", "\t\t\t\t\t", "]"}], "&"}], 
         ",", "\n", "\t\t\t\t", 
         RowBox[{"{", "\n", "\t", "\t\t\t\t", 
          RowBox[{
          "wfL", ",", "\n", "\t", "\t\t\t\t", "wfR", ",", "\n", "\t", 
           "\t\t\t\t", "exfns", ",", "\n", "\t", "\t\t\t\t", "mul"}], "\n", 
          "\t", "\t\t\t\t", "}"}]}], "\n", "\t", "\t\t\t", "]"}]}], ";", "\n",
       "\t\t", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "@", "wfL"}], "\[Equal]", "1"}], ",", " ", 
        RowBox[{"res", "[", 
         RowBox[{"[", "1", "]"}], "]"}], ",", " ", "res"}], "]"}]}]}], "\n", 
    "\t\t", "]"}]}], 
  ";"}]}], "CodeInput",ExpressionUUID->"f55a1145-979e-4b61-ba8c-a8ee7a50da8e"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"WFOperatorMatrixElements", "[", "\n", "\t", 
    RowBox[{"c_WavefunctionsObject", ",", "\n", "\t", 
     RowBox[{"evs", ":", "\n", "\t\t", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"_", ",", " ", "_"}], "}"}], "->", "_"}], ")"}], "|", "\n",
         "\t\t", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"_", ",", " ", "_"}], "}"}], "..."}], "}"}], "->", "_"}],
          ")"}], "|", "\n", "\t\t", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"_", ",", " ", "_"}], "}"}], "..."}], "}"}], "|", 
              RowBox[{"{", 
               RowBox[{"_", ",", " ", "_"}], "}"}]}], ")"}], "->", "_"}], 
           ")"}], ".."}], "}"}]}], ")"}]}], ",", "\n", "\t", 
     RowBox[{"ops", ":", 
      RowBox[{"OptionsPattern", "[", "]"}]}]}], "\n", "\t", "]"}], ":=", "\n",
    "\t", 
   RowBox[{"iWFOperatorMatrixElements", "[", "\n", "\t\t", 
    RowBox[{
     RowBox[{"{", "\n", "\t\t\t", 
      RowBox[{
       RowBox[{
        RowBox[{"c", "[", "\"\<Grid\>\"", "]"}], "[", "\"\<Points\>\"", "]"}],
        ",", " ", "\n", "\t\t\t", 
       RowBox[{
        RowBox[{
         RowBox[{"Flatten", "@", 
          RowBox[{"#", "[", "\"\<Values\>\"", "]"}]}], "&"}], "/@", 
        RowBox[{"c", "[", "\"\<Wavefunctions\>\"", "]"}]}]}], "\n", "\t\t\t", 
      "}"}], ",", "\n", "\t\t", "evs", ",", "\n", "\t\t", 
     RowBox[{"TrueQ", "@", 
      RowBox[{"OptionValue", "[", "\"\<AssumeSymmetric\>\"", "]"}]}], ",", 
     "\n", "\t\t", 
     RowBox[{"TrueQ", "@", 
      RowBox[{"OptionValue", "[", "\"\<AssumeHermitian\>\"", "]"}]}], ",", 
     "\n", "\t\t", 
     RowBox[{"OptionValue", "[", "\"\<MultiplicativeOperator\>\"", "]"}], ",",
      "\n", "\t\t", "ops"}], "\n", "\t\t", "]"}]}], 
  ";"}]], "CodeInput",ExpressionUUID->"e34cc8d5-b2b5-41b0-bb67-1ee0523303a8"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]Overlaps\[RightFloor]", "CodeSubsection",
 Evaluatable->True,ExpressionUUID->"5ba511ff-aa9f-4eb5-bca7-b255bd1be949"],

Cell[CellGroupData[{

Cell["\[LeftCeiling]getWFOverlapVals\[RightFloor]", "CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"609d216b-e390-487c-a040-c6c2ef759951"],

Cell[BoxData[
 RowBox[{
  RowBox[{"getWFOverlapVals", "[", 
   RowBox[{"wfns1_", ",", " ", "wfns2_"}], "]"}], ":=", "\n", "\t", 
  RowBox[{"Module", "[", "\n", "\t\t", 
   RowBox[{
    RowBox[{"{", "\n", "\t\t\t", 
     RowBox[{
      RowBox[{"g1", "=", 
       RowBox[{"wfns1", "[", "\"\<Wavefunctions\>\"", "]"}]}], ",", "\n", 
      "\t\t\t", 
      RowBox[{"g2", "=", 
       RowBox[{"wfns2", "[", "\"\<Wavefunctions\>\"", "]"}]}], ",", "\n", 
      "\t\t\t", "grid1", ",", "\n", "\t\t\t", "grid2", ",", "\n", "\t\t\t", 
      "vals1", ",", "\n", "\t\t\t", "vals2"}], "\n", "\t\t\t", "}"}], ",", 
    "\n", "\t\t", 
    RowBox[{
     RowBox[{"grid1", "=", 
      RowBox[{
       RowBox[{"g1", "[", 
        RowBox[{"[", "1", "]"}], "]"}], "[", "\"\<Grid\>\"", "]"}]}], ";", 
     "\n", "\t\t", 
     RowBox[{"grid2", "=", 
      RowBox[{
       RowBox[{"g2", "[", 
        RowBox[{"[", "1", "]"}], "]"}], "[", "\"\<Grid\>\"", "]"}]}], ";", 
     "\n", "\t\t", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"grid1", "=!=", "grid2"}], ",", "\n", "\t\t\t", 
       RowBox[{"PackageRaiseException", "[", "\n", "\t\t\t\t", 
        RowBox[{
        "Automatic", ",", "\n", "\t\t\t\t", 
         "\"\<Wavefunction overlap can only be computed on the same \
grid\>\""}], "\n", "\t\t\t\t", "]"}]}], "\n", "\t\t\t", "]"}], ";", "\n", 
     "\t\t", 
     RowBox[{
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{"Flatten", "[", 
         RowBox[{"#", "[", "\"\<Values\>\"", "]"}], "]"}], "&"}], "]"}], "/@", 
      RowBox[{"{", 
       RowBox[{"g1", ",", " ", "g2"}], "}"}]}]}]}], "\n", "\t\t", 
   "]"}]}]], \
"CodeInput",ExpressionUUID->"c08f5881-8c56-4c4e-8bab-1444df78d2a1"]
}, Closed]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]WFOverlapMatrix\[RightFloor]", "CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"bd33aff8-326c-4735-b3f3-d55be18525f9"],

Cell[BoxData[
 RowBox[{
  RowBox[{"WFOverlapMatrix", "[", 
   RowBox[{"wfns1_", ",", " ", "wfns2_"}], "]"}], ":=", "\n", "\t", 
  RowBox[{
   RowBox[{"PackageExceptionBlock", "[", "\"\<WFOverlapMatrix\>\"", "]"}], 
   "@", "\n", "\t\t", 
   RowBox[{"Module", "[", "\n", "\t\t\t", 
    RowBox[{
     RowBox[{"{", "\n", "\t\t\t\t", 
      RowBox[{"vals1", ",", "\n", "\t\t\t\t", "vals2"}], "\n", "\t\t\t\t", 
      "}"}], ",", "\n", "\t\t\t", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"vals1", ",", " ", "vals2"}], "}"}], "=", 
       RowBox[{"getWFOverlapVals", "[", 
        RowBox[{"wfns1", ",", " ", "wfns2"}], "]"}]}], ";", "\n", "\t\t\t", 
      RowBox[{"vals1", ".", 
       RowBox[{"Transpose", "[", "vals2", "]"}]}]}]}], "\n", "\t\t\t", 
    "]"}]}]}]], \
"CodeInput",ExpressionUUID->"8321855b-b74d-43da-8bda-4da0dee66220"]
}, Closed]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]WFOverlapElements\[RightFloor]", "CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"5edde0fa-6d5f-4fac-aa27-ec924f509c89"],

Cell[BoxData[
 RowBox[{
  RowBox[{"WFOverlapElements", "[", "\n", "\t", 
   RowBox[{"wfns1_", ",", " ", "\n", "\t", "wfns2_", ",", "\n", "\t", 
    RowBox[{"pairs", ":", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"_Integer", ",", " ", "_Integer"}], "}"}], ".."}], "}"}]}]}], 
   "\n", "\t", "]"}], ":=", "\n", "\t", 
  RowBox[{
   RowBox[{"PackageExceptionBlock", "[", "\"\<WFOverlapMatrix\>\"", "]"}], 
   "@", "\n", "\t\t", 
   RowBox[{"Module", "[", "\n", "\t\t\t", 
    RowBox[{
     RowBox[{"{", "\n", "\t\t\t\t", 
      RowBox[{
      "vals1", ",", "\n", "\t\t\t\t", "vals2", ",", "\n", "\t\t\t\t", 
       RowBox[{"pt", "=", 
        RowBox[{"Transpose", "@", "pairs"}]}]}], "\n", "\t\t\t\t", "}"}], ",",
      "\n", "\t\t\t", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"Max", "@", 
           RowBox[{"pt", "[", 
            RowBox[{"[", "1", "]"}], "]"}]}], ">", 
          RowBox[{"WFLength", "[", "wfns1", "]"}]}], "||", "\n", 
         "\t\t\t\t\t\t", 
         RowBox[{
          RowBox[{"Max", "@", 
           RowBox[{"pt", "[", 
            RowBox[{"[", "2", "]"}], "]"}]}], ">", 
          RowBox[{"WFLength", "[", "wfns2", "]"}]}], "||", "\n", 
         "\t\t\t\t\t\t", 
         RowBox[{
          RowBox[{"Min", "@", "pt"}], "\[LessEqual]", "0"}]}], ",", "\n", 
        "\t\t\t\t", 
        RowBox[{"PackageRaiseExceptin", "[", 
         RowBox[{
         "Automatic", ",", "\n", "\t\t\t\t\t", 
          "\"\<Pair specification out of bounds for wavefunctions\>\""}], 
         "\n", "\t\t\t\t\t", "]"}]}], "\n", "\t\t\t\t", "]"}], ";", "\n", 
      "\t\t\t", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"vals1", ",", " ", "vals2"}], "}"}], "=", 
       RowBox[{"getWFOverlapVals", "[", 
        RowBox[{"wfns1", ",", " ", "wfns2"}], "]"}]}], ";", "\n", "\t\t\t", 
      RowBox[{"vals1", "=", 
       RowBox[{"vals1", "[", 
        RowBox[{"[", 
         RowBox[{"pt", "[", 
          RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}]}], ";", "\n", "\t\t\t", 
      RowBox[{"vals2", "=", 
       RowBox[{"vals2", "[", 
        RowBox[{"[", 
         RowBox[{"pt", "[", 
          RowBox[{"[", "2", "]"}], "]"}], "]"}], "]"}]}], ";", "\n", "\t\t\t", 
      RowBox[{"MapThread", "[", 
       RowBox[{"Dot", ",", " ", 
        RowBox[{"{", 
         RowBox[{"vals1", ",", " ", "vals2"}], "}"}]}], "]"}]}]}], "\n", 
    "\t\t\t", 
    "]"}]}]}]], \
"CodeInput",ExpressionUUID->"d8a71fce-f564-419b-a091-d09b4c8f7aac"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]WFOverlap\[RightFloor]", "CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"b7c71e54-ecc4-4b0f-8da0-a79dcd94bc01"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"WFOverlap", "[", 
    RowBox[{"wfns1_", ",", " ", "wfns2_", ",", " ", 
     RowBox[{"Optional", "[", 
      RowBox[{"All", ",", " ", "All"}], "]"}]}], "]"}], ":=", "\n", "\t", 
   RowBox[{"WFOverlapMatrix", "[", 
    RowBox[{"wfns1", ",", " ", "wfns2"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"WFOverlap", "[", 
    RowBox[{"wfns1_", ",", " ", "wfns2_", ",", " ", 
     RowBox[{"pairs", ":", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"_Integer", ",", " ", "_Integer"}], "}"}], ".."}], "}"}]}]}],
     "]"}], ":=", "\n", "\t", 
   RowBox[{"WFOverlapMatrix", "[", 
    RowBox[{"wfns1", ",", " ", "wfns2", ",", " ", "pairs"}], "]"}]}], 
  ";"}]}], "CodeInput",ExpressionUUID->"905e3c2c-bc2c-48c1-b945-666fc169a4ab"]\

}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]SCF\[RightFloor]", "CodeSubsection",
 Evaluatable->True,ExpressionUUID->"e2e9ad35-f9d9-4831-8fb7-38b4a56857e9"],

Cell[BoxData[
 RowBox[{
  RowBox[{"catchSCFException", "=", 
   RowBox[{"PackageExceptionBlock", "[", "\"\<SCFWavefunctions\>\"", "]"}]}], 
  ";"}]], "CodeInput",ExpressionUUID->"d85ffb0a-5f27-4e52-83d7-6c48b7e4bf84"],

Cell[CellGroupData[{

Cell["\[LeftCeiling]constructSCFWfn\[RightFloor]", "CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"a3838cf3-0edc-4a83-af7d-4284e24f87fa"],

Cell[BoxData[{
 RowBox[{"constructSCFWfn", "//", "Clear"}], "\n", 
 RowBox[{
  RowBox[{"constructSCFWfn", "[", "\n", "\t", 
   RowBox[{
   "ctor_", ",", "\n", "\t", "grid_", ",", "\n", "\t", "pot_", ",", "\n", 
    "\t", "n_"}], "\n", "\t", "]"}], ":=", "\n", "\t", 
  RowBox[{"Module", "[", "\n", "\t\t", 
   RowBox[{
    RowBox[{"{", "\n", "\t\t\t", 
     RowBox[{
      RowBox[{"res", "=", 
       RowBox[{"ctor", "[", 
        RowBox[{"grid", ",", " ", "pot", ",", " ", "n"}], "]"}]}], ",", "\n", 
      "\t\t\t", 
      RowBox[{"energy", "=", "I"}]}], "\n", "\t\t\t", "}"}], ",", "\n", 
    "\t\t", 
    RowBox[{
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"VectorQ", "[", 
        RowBox[{"res", ",", " ", "Internal`RealValuedNumberQ"}], "]"}], ",", 
       "\n", "\t\t\t", 
       RowBox[{"res", "=", 
        RowBox[{"GridFunctionObject", "[", 
         RowBox[{"grid", ",", " ", "res"}], "]"}]}]}], "\n", "\t\t\t", "]"}], 
     ";", "\n", "\t\t", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"ChemDVRResultsObjectQ", "@", "res"}], ",", "\n", "\t\t\t", 
       RowBox[{"res", "=", 
        RowBox[{"res", "[", "\"\<Wavefunctions\>\"", "]"}]}]}], "\n", 
      "\t\t\t", "]"}], ";", "\n", "\t\t", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"WavefunctionsObjectQ", "@", "res"}], ",", "\n", "\t\t\t", 
       RowBox[{
        RowBox[{"energy", "=", 
         RowBox[{"res", "[", "\"\<Energies\>\"", "]"}]}], ";", "\n", "\t\t\t", 
        RowBox[{"res", "=", 
         RowBox[{"res", "[", "\"\<Wavefunctions\>\"", "]"}]}], ";", "\n", 
        "\t\t\t", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Length", "@", "res"}], "\[Equal]", "1"}], ",", "\n", 
          "\t\t\t\t", 
          RowBox[{
           RowBox[{"res", "=", 
            RowBox[{"res", "[", 
             RowBox[{"[", "1", "]"}], "]"}]}], ";", "\n", "\t\t\t\t", 
           RowBox[{"energy", "=", 
            RowBox[{"energy", "[", 
             RowBox[{"[", "1", "]"}], "]"}]}], ";"}], ",", "\n", "\t\t\t\t", 
          RowBox[{
           RowBox[{"res", "=", 
            RowBox[{"res", "[", 
             RowBox[{"[", "n", "]"}], "]"}]}], ";", "\n", "\t\t\t\t", 
           RowBox[{"energy", "=", 
            RowBox[{"energy", "[", 
             RowBox[{"[", "n", "]"}], "]"}]}], ";"}]}], "\n", "\t\t\t\t", 
         "]"}]}]}], "\n", "\t\t\t", "]"}], ";", "\n", "\t\t", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"!", 
         RowBox[{"GridFunctionObjectQ", "@", "res"}]}], "||", 
        RowBox[{"!", 
         RowBox[{"NumericQ", "@", "energy"}]}]}], ",", "\n", "\t\t\t", 
       RowBox[{"PackageRaiseException", "[", "\n", "\t\t\t\t", 
        RowBox[{
        "Automatic", ",", "\n", "\t\t\t\t", 
         "\"\<Constructed wavefunction `` is not a valid wavefunction\>\"", 
         ",", "\n", "\t\t\t\t", 
         RowBox[{"Short", "@", "res"}]}], "\n", "\t\t\t\t", "]"}]}], "\n", 
      "\t\t\t", "]"}], ";", "\n", "\t\t", 
     RowBox[{"{", 
      RowBox[{"energy", ",", " ", "res"}], "}"}]}]}], "\n", "\t\t", 
   "]"}]}]}], \
"CodeInput",ExpressionUUID->"8d07be58-dfcd-4230-90ac-eb4e63176caf"]
}, Closed]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]scfAveragePot\[RightFloor]", "CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"a1e60304-a1bb-4192-9792-13a371a4ea9e"],

Cell["\<\
\[LeftCeiling]
\tThis one might be kinda tricky... Need to average over every other DOF \
somehow to get a new pot...
\tIn general this is just a Fold-ed Dot operation but can we do this cleaner \
in n-dimensions....?

\tBasically we reduce every element in every list by a dot operation, but we \
probably need to permute first...
\[RightFloor]\
\>", "Text",
 Evaluatable->True,ExpressionUUID->"15c1d9a0-1f1d-48c1-8e66-1afb8a5d8b96"],

Cell[BoxData[{
 RowBox[{"scfAveragePot", "//", "Clear"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"scfAveragePot", "[", 
    RowBox[{"potVals_", ",", " ", 
     RowBox[{"wfns", ":", 
      RowBox[{"{", "__List", "}"}]}]}], "]"}], ":=", "\n", "\t", 
   RowBox[{"Fold", "[", "\n", "\t\t", 
    RowBox[{
     RowBox[{
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"vec", "=", "#2"}], "}"}], ",", "\n", "\t\t\t", 
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Dot", "[", 
            RowBox[{"#", ",", " ", "vec"}], "]"}], "&"}], ",", " ", "#"}], 
         "]"}]}], "\n", "\t\t\t", "]"}], "&"}], ",", "\n", "\t\t", "potVals", 
     ",", "\n", "\t\t", "wfns"}], "\n", "\t\t", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"scfAveragePot", "[", 
    RowBox[{"potVals_", ",", " ", 
     RowBox[{"wfns", ":", 
      RowBox[{"{", "__List", "}"}]}], ",", " ", "i_"}], "]"}], ":=", "\n", 
   "\t", 
   RowBox[{"scfAveragePot", "[", "\n", "\t\t", 
    RowBox[{
     RowBox[{"Transpose", "[", 
      RowBox[{"potVals", ",", " ", "\n", "\t\t\t", 
       RowBox[{"(*", " ", "\n", "\t\t\t", 
        RowBox[{
         RowBox[{
          RowBox[{"I", "'"}], "m", " ", "not", " ", "sure", " ", "if", " ", 
          "this", " ", "is", " ", "justified", " ", 
          RowBox[{"(", 
           RowBox[{"or", " ", "how", " ", "to", " ", "justify", " ", "it"}], 
           ")"}], "\n", "\t\t\t", "I", " ", "would", " ", "have", " ", 
          "thought", " ", "we", " ", "wanted", " ", "to", " ", "have", " ", 
          "the", " ", "relevant", " ", "degree", " ", "of", " ", "freedom", 
          " ", "be", " ", "the", " ", "last", " ", "element", " ", "in", " ", 
          "the", " ", "thing", "\n", "\t\t\t", "That", " ", "way", " ", "the",
           " ", "wfns", " ", "and", " ", "the", " ", "Dimensions", " ", "of", 
          " ", "the", " ", "potVals", " ", "would", " ", "align"}], ",", " ", 
         "\n", "\t\t\t\t", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"i", ".", "e", ".", " ", "Dot"}], " ", "wfn_", "1", " ", 
            "into", " ", "the", " ", "potVals", " ", "with", " ", "matrix", 
            " ", "arranged", " ", "so", " ", "that", " ", "dimension", " ", 
            "1", " ", "is", " ", "at", " ", "the", " ", "outer", " ", "most", 
            " ", 
            RowBox[{"level", ".", "\n", "\t\t\t", "Apparently"}], " ", "not", 
            " ", 
            RowBox[{"though", ".", "  ", "Apparently"}], " ", "the", " ", 
            "excluded", " ", "dimension", " ", "should", " ", "be", " ", "at",
             " ", "the", " ", "outer", " ", "most", " ", "level"}], "..."}], 
          "?"}]}], "\n", "\t\t\t", "*)"}], "\n", "\t\t\t", 
       RowBox[{"Insert", "[", 
        RowBox[{
         RowBox[{"Range", "[", 
          RowBox[{"2", ",", " ", 
           RowBox[{"Length", "[", "wfns", "]"}]}], "]"}], ",", " ", "1", ",", 
         " ", "i"}], "]"}]}], "\n", "\t\t\t", 
      RowBox[{"(*", 
       RowBox[{"Insert", "[", 
        RowBox[{
         RowBox[{"Range", "[", 
          RowBox[{"1", ",", " ", 
           RowBox[{
            RowBox[{"Length", "[", "wfns", "]"}], "-", "1"}]}], "]"}], ",", 
         " ", 
         RowBox[{"Length", "[", "wfns", "]"}], ",", " ", "i"}], "]"}], "*)"}],
       "\n", "\t\t\t", "]"}], ",", "\n", "\t\t", 
     RowBox[{"Delete", "[", 
      RowBox[{"wfns", ",", " ", "i"}], "]"}]}], "\n", "\t\t", "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"scfAveragePots", "[", 
    RowBox[{"potVals_", ",", " ", 
     RowBox[{"wfns", ":", 
      RowBox[{"{", "__List", "}"}]}]}], "]"}], ":=", "\n", "\t", 
   RowBox[{"Table", "[", "\n", "\t\t", 
    RowBox[{
     RowBox[{"scfAveragePot", "[", 
      RowBox[{"potVals", ",", " ", "wfns", ",", " ", "i"}], "]"}], ",", "\n", 
     "\t\t", 
     RowBox[{"{", 
      RowBox[{"i", ",", " ", 
       RowBox[{"Length", "@", "wfns"}]}], "}"}]}], "\n", "\t\t", "]"}]}], 
  ";"}]}], "CodeInput",ExpressionUUID->"acae2a38-64db-4e9d-a22a-c2133fd9f3a9"]\

}, Open  ]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]scfOverlapFactor\[RightFloor]", "CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"fdc44274-9b36-4ade-9f61-2616e80d14f6"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"scfOverlapFactor", "//", "Clear"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"scfOverlapFactor", "[", "\n", "\t", 
    RowBox[{
     RowBox[{"old", ":", 
      RowBox[{"{", "__GridFunctionObject", "}"}]}], ",", " ", "\n", "\t", 
     RowBox[{"new", ":", 
      RowBox[{"{", "__GridFunctionObject", "}"}]}]}], "\n", "\t", "]"}], ":=",
    "\n", "\t", 
   RowBox[{"Times", "@@", "\n", "\t\t", 
    RowBox[{"MapThread", "[", "\n", "\t\t\t", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{"Flatten", "[", 
         RowBox[{"#", "[", "\"\<Values\>\"", "]"}], "]"}], ".", 
        RowBox[{"Flatten", "[", 
         RowBox[{"#2", "[", "\"\<Values\>\"", "]"}], "]"}]}], "&"}], ",", 
      "\n", "\t\t\t", 
      RowBox[{"{", "\n", "\t\t\t\t", 
       RowBox[{"old", ",", "\n", "\t\t\t\t", "new"}], "\n", "\t\t\t\t", 
       "}"}]}], "\n", "\t\t\t", "]"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"scfOverlapFactor", "[", "___", "]"}], ":=", "0"}], 
  ";"}]}], "CodeInput",ExpressionUUID->"babe845d-ea05-430b-b579-a7ab795c204e"]\

}, Closed]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]scfWfnsFromPots\[RightFloor]", "CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"d5b38130-1572-4e26-8246-ab0975dc9128"],

Cell[BoxData[
 RowBox[{
  RowBox[{"scfWfnsFromPots", "[", 
   RowBox[{
   "wfConstructors_", ",", " ", "grids_", ",", " ", "pots_", ",", " ", 
    "state_"}], "]"}], ":=", "\n", "\t", 
  RowBox[{"MapThread", "[", "\n", "\t\t", 
   RowBox[{"constructSCFWfn", ",", "\n", "\t\t", 
    RowBox[{"{", "\n", "\t\t\t", 
     RowBox[{
     "wfConstructors", ",", "\n", "\t\t\t", "grids", ",", "\n", "\t\t\t", 
      "pots", ",", "\n", "\t\t\t", "state"}], "\n", "\t\t\t", "}"}]}], "\n", 
   "\t\t", "]"}]}]], \
"CodeInput",ExpressionUUID->"25da8da2-fb66-46af-ab45-51e2505d1e67"]
}, Closed]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]initSCF\[RightFloor]", "CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"47863608-2fc9-4fd3-af2b-ef3d47c22342"],

Cell[BoxData[{
 RowBox[{"initSCF", "//", "Clear"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"initSCF", "[", "\n", "\t", 
    RowBox[{
    "wfConstructor_", ",", "\n", "\t", "potGrid_", ",", "\n", "\t", "grids_", 
     ",", "\n", "\t", "state_"}], "\n", "\t", "]"}], ":=", "\n", "\t", 
   RowBox[{"Module", "[", "\n", "\t\t", 
    RowBox[{
     RowBox[{"{", "\n", "\t\t\t", 
      RowBox[{"minPos", ",", "\n", "\t\t\t", "potSlices"}], "\n", "\t\t\t", 
      "}"}], ",", "\n", "\t\t", 
     RowBox[{
      RowBox[{"minPos", "=", "\n", "\t\t\t", 
       RowBox[{"FirstPosition", "[", 
        RowBox[{"potGrid", ",", " ", 
         RowBox[{"Min", "@", "potGrid"}]}], "]"}]}], ";", "\n", "\t\t\t", 
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
          "Might", " ", "be", " ", "able", " ", "to", " ", "do", " ", "this", 
           " ", "faster"}], "..."}], "?", " ", "Somewhat"}], " ", "annoying", 
        " ", "that", " ", "Min", " ", 
        RowBox[{"won", "'"}], "t", " ", "also", " ", "return", " ", "the", 
        " ", "pos", " ", "but", " ", "ah", " ", "well"}], " ", "*)"}], "\n", 
      "\t\t", 
      RowBox[{"potSlices", "=", "\n", "\t\t\t", 
       RowBox[{
        RowBox[{
         RowBox[{"potGrid", "[", 
          RowBox[{"[", 
           RowBox[{"Sequence", "@@", 
            RowBox[{"ReplacePart", "[", 
             RowBox[{"minPos", ",", " ", 
              RowBox[{"#", "\[Rule]", "All"}]}], "]"}]}], "]"}], "]"}], "&"}],
         "/@", "\n", "\t\t\t\t", 
        RowBox[{"Range", "[", 
         RowBox[{"Length", "@", "grids"}], "]"}]}]}], ";", "\n", "\t\t", 
      RowBox[{"scfWfnsFromPots", "[", "\n", "\t\t\t", 
       RowBox[{
       "wfConstructor", ",", "\n", "\t\t\t", "grids", ",", "\n", "\t\t\t", 
        "potSlices", ",", "\n", "\t\t\t", "state"}], "\n", "\t\t\t", 
       "]"}]}]}], "\n", "\t\t", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"initSCF", "[", 
    RowBox[{"Automatic", ",", " ", "bleh___"}], "]"}], ":=", "\n", "\t", 
   RowBox[{"initSCF", "[", "bleh", "]"}]}], 
  ";"}]}], "CodeInput",ExpressionUUID->"c882ad7f-0196-4f35-ac4a-2b425830ae0e"]\

}, Open  ]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]normalizeConstructors\[RightFloor]", "CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"73f593e5-ba37-4c86-aa1b-d32452f3298f"],

Cell["\<\
\[LeftCeiling]
\tIt would be nice to provide the grid directly and potential to avoid \
recomputation but this might be unfeasible given the different type of grids \
the DVR might require.
\tLikely we\[CloseCurlyQuote]ll have to simply provide the Points, Range, and \
some Interpolation over the potential and provided grid...
\tThis can be optimized if the KE will not depend on the grid at all... If \
that\[CloseCurlyQuote]s the case we\[CloseCurlyQuote]ll be able to just \
change up the potential we add to the DVR KE. Actually since the number of \
points and grid elements shouldn\[CloseCurlyQuote]t change this can be done \
cleaner...
\[RightFloor]\
\>", "Text",
 Evaluatable->True,ExpressionUUID->"b2fbb1f7-6f25-4266-abaa-67360b4ca222"],

Cell[BoxData[{
 RowBox[{"normalizeConstructors", "//", "Clear"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"normalizeConstructors", "[", 
    RowBox[{"{", 
     RowBox[{"dvr_ChemDVRObject", ",", " ", 
      RowBox[{"ops", ":", 
       RowBox[{"OptionsPattern", "[", "]"}]}]}], "}"}], "]"}], ":=", "\n", 
   "\t", 
   RowBox[{"Module", "[", "\n", "\t\t", 
    RowBox[{
     RowBox[{"{", "\n", "\t\t\t", 
      RowBox[{
       RowBox[{"opts", "=", 
        RowBox[{"Association", "[", "ops", "]"}]}], ",", "\n", "\t\t\t", 
       "pointNum", ",", "\n", "\t\t\t", 
       RowBox[{"keMat", "=", "None"}], ",", "\n", "\t\t\t", "points", ",", 
       "\n", "\t\t\t", "range", ",", "\n", "\t\t\t", "grid", ",", "\n", 
       "\t\t\t", "pot", ",", "\n", "\t\t\t", "res"}], "\n", "\t\t\t", "}"}], 
     ",", "\n", "\t\t", 
     RowBox[{"Function", "[", "\n", "\t\t\t", 
      RowBox[{
       RowBox[{"{", "\n", "\t\t\t\t", 
        RowBox[{
        "grid1D", ",", "\n", "\t\t\t\t", "potential", ",", "\n", "\t", 
         "\t\t\t", "n"}], "\n", "\t\t\t\t", "}"}], ",", "\n", "\t\t\t", 
       RowBox[{
        RowBox[{"pot", "=", "\n", "\t\t\t\t", 
         RowBox[{"Interpolation", "[", 
          RowBox[{"Transpose", "@", 
           RowBox[{"{", 
            RowBox[{"grid1D", ",", " ", "potential"}], "}"}]}], "]"}]}], ";", 
        "\n", "\t\t\t", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"keMat", "===", "None"}], ",", "\n", "\t\t\t\t", 
          RowBox[{"(*", " ", "\n", "\t\t\t\t", 
           RowBox[{
            RowBox[{
             RowBox[{
             "we", " ", "set", " ", "it", " ", "up", " ", "so", " ", "that", 
              " ", "we", " ", "never", " ", "recompute", " ", "the", " ", 
              "KE", " ", "or", " ", "anything"}], "..."}], "\n", "\t\t\t\t", 
            "the", " ", "overhead", " ", "might", " ", "still", " ", "get", 
            " ", "us", " ", "so", " ", 
            RowBox[{"it", "'"}], "s", " ", "probably", " ", "worth", " ", 
            "optimizing", " ", "further", " ", "after", " ", "the", " ", 
            "first", " ", "call", " ", "but", " ", "for", " ", "now", " ", 
            "we", "\n", "\t\t\t\t", "can", " ", "roll", " ", "with", " ", 
            "this"}], "\n", "\t\t\t", "*)"}], "\n", "\t\t\t\t", 
          RowBox[{
           RowBox[{"points", "=", 
            RowBox[{"{", 
             RowBox[{"Length", "@", "grid1D"}], "}"}]}], ";", "\n", 
           "\t\t\t\t", 
           RowBox[{"range", "=", 
            RowBox[{"{", 
             RowBox[{"MinMax", "@", "grid1D"}], "}"}]}], ";", "\n", 
           "\t\t\t\t", 
           RowBox[{"res", "=", "\n", "\t\t\t\t\t", 
            RowBox[{"dvr", "[", "\n", "\t\t\t\t\t\t", 
             RowBox[{
              RowBox[{"\"\<Points\>\"", "\[Rule]", "points"}], ",", "\n", 
              "\t\t\t\t\t\t", 
              RowBox[{"\"\<Range\>\"", "\[Rule]", "range"}], ",", "\n", 
              "\t\t\t\t\t\t", 
              RowBox[{"\"\<PotentialFunction\>\"", "\[Rule]", "pot"}], ",", 
              "\n", "\t\t\t\t\t\t", 
              RowBox[{"\"\<WavefunctionSelection\>\"", "\[Rule]", 
               RowBox[{"{", "n", "}"}]}]}], "\n", "\t\t\t\t\t\t", "]"}]}], 
           ";", "\n", "\t\t\t\t", 
           RowBox[{"keMat", "=", 
            RowBox[{"res", "[", "\"\<KineticEnergy\>\"", "]"}]}], ";", "\n", 
           "\t\t\t\t", 
           RowBox[{"grid", "=", 
            RowBox[{"res", "[", "\"\<Grid\>\"", "]"}]}], ";", "\n", 
           "\t\t\t\t", "res"}], ",", "\n", "\t\t\t\t", 
          RowBox[{"dvr", "[", "\n", "\t\t\t\t\t", 
           RowBox[{
            RowBox[{"\"\<Points\>\"", "\[Rule]", "points"}], ",", "\n", 
            "\t\t\t\t\t", 
            RowBox[{"\"\<Range\>\"", "\[Rule]", "range"}], ",", "\n", 
            "\t\t\t\t\t", 
            RowBox[{"\"\<Grid\>\"", "\[Rule]", "grid"}], ",", "\n", 
            "\t\t\t\t\t", 
            RowBox[{"\"\<KineticEnergy\>\"", "\[Rule]", "keMat"}], ",", "\n", 
            "\t\t\t\t\t", 
            RowBox[{"\"\<PotentialFunction\>\"", "\[Rule]", "pot"}], ",", 
            "\n", "\t\t\t\t\t", 
            RowBox[{"\"\<WavefunctionSelection\>\"", "\[Rule]", 
             RowBox[{"{", "n", "}"}]}]}], "\n", "\t\t\t\t\t", "]"}]}], "\n", 
         "\t\t\t\t", "]"}]}]}], "\n", "\t\t\t", "]"}]}], "\n", "\t\t", 
    "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"normalizeConstructors", "[", "dvr_ChemDVRObject", "]"}], ":=", 
   "\n", "\t", 
   RowBox[{"normalizeConstructors", "[", 
    RowBox[{"{", 
     RowBox[{"dvr", ",", " ", 
      RowBox[{"{", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{
         "at", " ", "some", " ", "point", " ", "this", " ", "will", " ", 
          "become", " ", "options", " ", "for", " ", "real"}], "..."}], " ", 
        "*)"}], "}"}]}], "}"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"normalizeConstructors", "[", 
    RowBox[{"{", 
     RowBox[{"s_String", ",", " ", 
      RowBox[{"ops", ":", 
       RowBox[{"OptionsPattern", "[", "]"}]}]}], "}"}], "]"}], ":=", "\n", 
   "\t", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"res", "=", 
       RowBox[{"ChemDVRObject", "[", 
        RowBox[{"s", ",", " ", "ops"}], "]"}]}], "}"}], ",", "\n", "\t\t", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", 
         RowBox[{"ChemDVRObjectQ", "@", "res"}]}], ",", "\n", "\t\t\t", 
        RowBox[{"PackageRaiseException", "[", "\n", "\t\t\t\t", 
         RowBox[{
         "Automatic", ",", "\n", "\t\t\t\t", 
          "\"\<Don't know how to handle wavefunction constructor ``\>\"", ",",
           "\n", "\t\t\t\t", "s"}], "\n", "\t\t\t\t", "]"}]}], "\n", "\t\t\t",
        "]"}], ";", "\n", "\t\t", "res"}]}], "\n", "\t\t", "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"normalizeConstructors", "[", "s_String", "]"}], ":=", "\n", "\t", 
   
   RowBox[{"normalizeConstructors", "[", 
    RowBox[{"{", 
     RowBox[{"s", ",", " ", 
      RowBox[{"{", "}"}]}], "}"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"normalizeConstructors", "[", "e_", "]"}], ":=", "\n", "\t", "e"}],
   ";"}]}], "CodeInput",ExpressionUUID->"dd3cdfe9-5d4b-40ed-b3c7-562934889b2d"]
}, Closed]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]iSCFWavefunction\[RightFloor]", "CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"ed076662-2f89-4813-b951-dba10d1b46e1"],

Cell["\<\
\[LeftCeiling]
\tWavefunction constructors need to be same length as pot.
\tNeed to perform some type of potential check to make sure that it\
\[CloseCurlyQuote]s a valid potential that can truly be used to generate \
wavefunctions....?
\[RightFloor]\
\>", "Text",
 Evaluatable->True,ExpressionUUID->"7547f21e-40f3-454c-98e5-e7e65e450b9f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"iSCFWavefunction", "[", "\n", "\t", 
   RowBox[{
   "wfConstructors_", ",", "\n", "\t", "pot_GridFunctionObject", ",", "\n", 
    "\t", 
    RowBox[{"stateVec", ":", 
     RowBox[{"{", "___Integer", "}"}]}], ",", "\n", "\t", 
    RowBox[{"init", ":", 
     RowBox[{
     "_WavefunctionsObject", "|", "_GridFunctionObject", "|", "Automatic"}]}],
     ",", "\n", "\t", "maxIts_Integer", ",", "\n", "\t", 
    RowBox[{"converge", ":", 
     RowBox[{"_Real", "?", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"0", "<", "#", "<=", "1"}], "&"}], ")"}]}]}]}], "\n", "\t", 
   "]"}], ":=", "\n", "\t", 
  RowBox[{"Catch", "@", "\n", "\t\t", 
   RowBox[{"Module", "[", "\n", "\t\t\t", 
    RowBox[{
     RowBox[{"{", "\n", "\t\t\t\t", 
      RowBox[{
      "grid", ",", "\n", "\t\t\t\t", "subGrids", ",", "\n", "\t\t\t\t", 
       "potGrid", ",", "\n", "\t\t\t\t", "dim", ",", "\n", "\t\t\t\t", "pots",
        ",", "\n", "\t\t\t\t", 
       RowBox[{"iter", "=", "0"}], ",", "\n", "\t\t\t\t", "opro", ",", "\n", 
       "\t\t\t\t", "vecs", ",", "\n", "\t\t\t\t", "old", ",", "\n", 
       "\t\t\t\t", 
       RowBox[{"new", "=", "None"}], ",", "\n", "\t\t\t\t", 
       RowBox[{"states", "=", "stateVec"}], ",", "\n", "\t\t\t\t", 
       RowBox[{"constructors", "=", "wfConstructors"}], ",", "\n", "\t\t\t\t",
        "engs"}], "\n", "\t\t\t\t", "}"}], ",", "\n", "\t\t\t", 
     RowBox[{
      RowBox[{"grid", "=", 
       RowBox[{"Normal", "@", 
        RowBox[{"pot", "[", "\"\<Grid\>\"", "]"}]}]}], ";", "\n", "\t\t\t", 
      RowBox[{"potGrid", "=", 
       RowBox[{"Normal", "@", 
        RowBox[{"pot", "[", "\"\<Values\>\"", "]"}]}]}], ";", "\n", "\t\t\t", 
      
      RowBox[{"subGrids", "=", 
       RowBox[{"GridSubgrids", "@", 
        RowBox[{"pot", "[", "\"\<Grid\>\"", "]"}]}]}], ";", "\n", "\t\t\t", 
      RowBox[{"dim", "=", 
       RowBox[{"Length", "@", "subGrids"}]}], ";", "\n", "\t\t\t", 
      RowBox[{"Which", "[", "\n", "\t\t\t\t", 
       RowBox[{
        RowBox[{"!", 
         RowBox[{"ListQ", "@", "states"}]}], ",", "\n", "\t\t\t\t\t", 
        RowBox[{"states", "=", 
         RowBox[{"ConstantArray", "[", 
          RowBox[{"1", ",", " ", "dim"}], "]"}]}], ",", "\n", "\t\t\t\t", 
        RowBox[{
         RowBox[{"Length", "@", "states"}], "<", "dim"}], ",", "\n", 
        "\t\t\t\t\t", 
        RowBox[{
         RowBox[{"states", "=", 
          RowBox[{"PadRight", "[", 
           RowBox[{"states", ",", " ", "dim", ",", " ", "1"}], "]"}]}], 
         ";"}]}], "\n", "\t\t\t\t", "]"}], ";", "\n", "\t\t\t", 
      RowBox[{"Which", "[", "\n", "\t\t\t\t", 
       RowBox[{
        RowBox[{"!", 
         RowBox[{"ListQ", "@", "constructors"}]}], ",", "\n", "\t\t\t\t\t", 
        RowBox[{"constructors", "=", 
         RowBox[{"ConstantArray", "[", 
          RowBox[{"constructors", ",", " ", "dim"}], "]"}]}], ",", "\n", 
        "\t\t\t\t", 
        RowBox[{
         RowBox[{"Length", "@", "constructors"}], "<", "dim"}], ",", "\n", 
        "\t\t\t\t\t", 
        RowBox[{"PackageRaiseException", "[", "\n", "\t\t\t\t\t\t", 
         RowBox[{
         "Automatic", ",", "\n", "\t\t\t\t\t\t", 
          "\"\<Too few wavefunction constructors (``) for SCF dimension \
(``)\>\"", ",", "\n", "\t\t\t\t\t\t", 
          RowBox[{"Length", "@", "constructors"}], ",", "\n", "\t\t\t\t\t\t", 
          "dim"}], "\n", "\t\t\t\t\t\t", "]"}]}], "\n", "\t\t\t\t", "]"}], 
      ";", "\n", "\t\t\t", 
      RowBox[{"constructors", "=", 
       RowBox[{"normalizeConstructors", "/@", "constructors"}]}], ";", "\n", 
      "\t\t\t", 
      RowBox[{"old", "=", 
       RowBox[{"initSCF", "[", 
        RowBox[{
        "init", ",", " ", "constructors", ",", " ", "potGrid", ",", " ", 
         "subGrids", ",", " ", "states"}], "]"}]}], ";", "\n", "\t\t\t", 
      RowBox[{"engs", "=", 
       RowBox[{"old", "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", " ", "1"}], "]"}], "]"}]}], ";", "\n", "\t\t\t", 
      
      RowBox[{"old", "=", 
       RowBox[{"old", "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", " ", "2"}], "]"}], "]"}]}], ";", "\n", "\t\t\t", 
      
      RowBox[{"vecs", "=", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"Flatten", "@", 
            RowBox[{"#", "[", "\"\<Values\>\"", "]"}]}], "&"}], "/@", "old"}],
          ")"}], "^", "2"}]}], ";", "\n", "\t\t\t", 
      RowBox[{"pots", "=", 
       RowBox[{"scfAveragePots", "[", 
        RowBox[{"potGrid", ",", " ", "vecs"}], "]"}]}], ";", "\n", "\t\t\t", 
      RowBox[{"While", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{"opro", "=", 
            RowBox[{"scfOverlapFactor", "[", 
             RowBox[{"old", ",", " ", "new"}], "]"}]}], ")"}], "<", 
          "converge"}], "&&", 
         RowBox[{"iter", "<", "maxIts"}]}], ",", "\n", "\t\t\t\t", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"new", "=!=", "None"}], ",", " ", "\n", "\t\t\t\t\t", 
           RowBox[{"old", "=", "new"}], ",", "\n", "\t\t\t\t\t", 
           RowBox[{
            RowBox[{"new", "=", "old"}], ";"}]}], "\n", "\t\t\t\t\t", "]"}], 
         ";", "\n", "\t\t\t\t", 
         RowBox[{"Do", "[", "\n", "\t\t\t\t\t", 
          RowBox[{"(*", " ", "\n", "\t\t\t\t\t", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"Probably", " ", "right"}], "..."}], "?", " ", "\n", 
             "\t\t\t\t\t", "For"}], " ", "the", " ", "first", " ", "loop", 
            " ", "we", " ", "compute", " ", "one", " ", "excessive", " ", 
            "wfn", " ", "but", " ", 
            RowBox[{"everything", "'"}], "s", " ", "clean", " ", "beyond", 
            " ", "that"}], "\n", "\t\t\t\t", "*)"}], "\n", "\t\t\t\t\t", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"pots", "[", 
              RowBox[{"[", "i", "]"}], "]"}], "=", "\n", "\t\t\t\t\t\t", 
             RowBox[{"scfAveragePot", "[", 
              RowBox[{"potGrid", ",", " ", "vecs", ",", " ", "i"}], "]"}]}], 
            ";", "\n", "\t\t\t\t\t", 
            RowBox[{
             RowBox[{"new", "[", 
              RowBox[{"[", "i", "]"}], "]"}], "=", "\n", "\t\t\t\t\t\t", 
             RowBox[{"constructSCFWfn", "[", "\n", "\t\t\t\t\t\t\t", 
              RowBox[{
               RowBox[{"constructors", "[", 
                RowBox[{"[", "i", "]"}], "]"}], ",", "\n", "\t\t\t\t\t\t\t", 
               RowBox[{"subGrids", "[", 
                RowBox[{"[", "i", "]"}], "]"}], ",", "\n", "\t\t\t\t\t\t\t", 
               RowBox[{"pots", "[", 
                RowBox[{"[", "i", "]"}], "]"}], ",", "\n", "\t\t\t\t\t\t\t", 
               RowBox[{"states", "[", 
                RowBox[{"[", "i", "]"}], "]"}]}], "\n", "\t\t\t\t\t\t\t", 
              "]"}]}], ";", "\n", "\t\t\t\t\t", 
            RowBox[{
             RowBox[{"engs", "[", 
              RowBox[{"[", "i", "]"}], "]"}], "=", 
             RowBox[{"new", "[", 
              RowBox[{"[", 
               RowBox[{"i", ",", " ", "1"}], "]"}], "]"}]}], ";", "\n", 
            "\t\t\t\t\t", 
            RowBox[{
             RowBox[{"new", "[", 
              RowBox[{"[", "i", "]"}], "]"}], "=", 
             RowBox[{"new", "[", 
              RowBox[{"[", 
               RowBox[{"i", ",", " ", "2"}], "]"}], "]"}]}], ";", "\n", 
            "\t\t\t\t\t", 
            RowBox[{
             RowBox[{"vecs", "[", 
              RowBox[{"[", "i", "]"}], "]"}], "=", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"Flatten", "@", 
                RowBox[{
                 RowBox[{"new", "[", 
                  RowBox[{"[", "i", "]"}], "]"}], "[", "\"\<Values\>\"", 
                 "]"}]}], ")"}], "^", "2"}]}]}], ",", "\n", "\t\t\t\t\t", 
           RowBox[{"{", 
            RowBox[{"i", ",", " ", 
             RowBox[{"Length", "@", "pots"}]}], "}"}]}], "\n", "\t\t\t\t\t", 
          "]"}], ";", "\n", "\t\t\t\t", 
         RowBox[{"iter", "++"}]}]}], "\n", "\t\t\t\t", "]"}], ";", "\n", 
      "\t\t\t", 
      RowBox[{"<|", "\n", "\t\t\t\t", 
       RowBox[{
        RowBox[{"\"\<Energies\>\"", "\[Rule]", "engs"}], ",", "\n", 
        "\t\t\t\t", 
        RowBox[{"\"\<Wavefunctions\>\"", "\[Rule]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"!", 
            RowBox[{"ListQ", "@", "new"}]}], ",", " ", "old", ",", " ", 
           "new"}], "]"}]}], ",", "\n", "\t\t\t\t", 
        RowBox[{"\"\<OverlapProduct\>\"", "->", "opro"}], ",", "\n", 
        "\t\t\t\t", 
        RowBox[{"\"\<Potentials\>\"", ":>", "\n", "\t\t\t\t\t", 
         RowBox[{"MapThread", "[", 
          RowBox[{"GridFunctionObject", ",", " ", 
           RowBox[{"{", 
            RowBox[{"subGrids", ",", " ", "pots"}], "}"}]}], "]"}]}], ",", 
        "\n", "\t\t\t\t", 
        RowBox[{"\"\<Iterations\>\"", "\[Rule]", "iter"}]}], "\n", "\t\t\t\t",
        "|>"}]}]}], "\n", "\t\t\t", "]"}]}]}]], "CodeInput",
 CellLabel->
  "In[1329]:=",ExpressionUUID->"844f81b9-71b8-4198-91de-95a4be0dac35"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]iSelfConsistentWavefunctions\[RightFloor]", \
"CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"8a490e33-7c7c-4f43-8f0d-f9834101700d"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "iSelfConsistentWavefunctions", "]"}], "=", "\n", 
   "\t", 
   RowBox[{"{", "\n", "\t\t", 
    RowBox[{
     RowBox[{"\"\<StateVectors\>\"", "\[Rule]", "Automatic"}], ",", "\n", 
     "\t\t", 
     RowBox[{"\"\<InitialWavefunctions\>\"", "\[Rule]", "Automatic"}], ",", 
     "\n", "\t\t", 
     RowBox[{"\"\<ConvergenceGoal\>\"", "\[Rule]", "Automatic"}], ",", "\n", 
     "\t\t", 
     RowBox[{"\"\<MaxIterations\>\"", "\[Rule]", "Automatic"}]}], "\n", 
    "\t\t", "}"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"iSelfConsistentWavefunctions", "[", "\n", "\t", 
   RowBox[{
   "wfConstructors_", ",", "\n", "\t", "pot_GridFunctionObject", ",", "\n", 
    "\t", 
    RowBox[{"ops", ":", 
     RowBox[{"OptionsPattern", "[", "]"}]}]}], "\n", "\t", "]"}], ":=", "\n", 
  "\t", 
  RowBox[{"catchSCFException", "@", "\n", "\t\t", 
   RowBox[{"Module", "[", "\n", "\t\t\t", 
    RowBox[{
     RowBox[{"{", "\n", "\t\t\t\t", 
      RowBox[{
      "stateVec", ",", "\n", "\t\t\t\t", "init", ",", "\n", "\t", "\t\t\t", 
       "maxIts", ",", "\n", "\t\t\t\t", "converge", ",", "\n", "\t\t\t\t", 
       "res"}], "\n", "\t\t\t\t", "}"}], ",", "\n", "\t\t\t", 
     RowBox[{
      RowBox[{"stateVec", "=", 
       RowBox[{"OptionValue", "[", "\"\<StateVectors\>\"", "]"}]}], ";", "\n",
       "\t\t\t", 
      RowBox[{"init", "=", 
       RowBox[{"OptionValue", "[", "\"\<InitialWavefunctions\>\"", "]"}]}], 
      ";", "\n", "\t\t\t", 
      RowBox[{"converge", "=", 
       RowBox[{"OptionValue", "[", "\"\<ConvergenceGoal\>\"", "]"}]}], ";", 
      "\n", "\t\t\t", 
      RowBox[{"maxIts", "=", 
       RowBox[{"OptionValue", "[", "\"\<MaxIterations\>\"", "]"}]}], ";", 
      "\n", "\t\t\t", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", 
         RowBox[{"TrueQ", "[", 
          RowBox[{"0", "<", "converge", "<", "1"}], "]"}]}], ",", "\n", 
        "\t\t\t\t", 
        RowBox[{"converge", "=", ".99999"}]}], "\n", "\t\t\t\t", "]"}], ";", 
      "\n", "\t\t\t", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"IntegerQ", "[", "maxIts", "]"}], "&&", 
           RowBox[{"maxIts", "\[GreaterEqual]", "0"}]}], ")"}]}], ",", "\n", 
        "\t\t\t\t", 
        RowBox[{"maxIts", "=", "15"}]}], "\n", "\t\t\t\t", "]"}], ";", "\n", 
      "\t\t\t", 
      RowBox[{"res", "=", "\n", "\t\t\t\t", 
       RowBox[{"Which", "[", "\n", "\t\t\t\t\t", 
        RowBox[{
         RowBox[{"stateVec", "===", "Automatic"}], ",", "\n", "\t", 
         "\t\t\t\t\t", 
         RowBox[{
          RowBox[{"stateVec", "=", 
           RowBox[{"{", "}"}]}], ";", "\n", "\t", "\t\t\t\t\t", 
          RowBox[{"iSCFWavefunction", "[", "\n", "\t", "\t\t\t\t\t\t", 
           RowBox[{
           "wfConstructors", ",", "\n", "\t", "\t\t\t\t\t\t", "pot", ",", 
            "\n", "\t", "\t\t\t\t\t\t", "stateVec", ",", "\n", "\t", 
            "\t\t\t\t\t\t", "init", ",", "\n", "\t", "\t\t\t\t\t\t", "maxIts",
             ",", "\n", "\t", "\t\t\t\t\t\t", "converge"}], "\n", "\t", 
           "\t\t\t\t\t\t", "]"}]}], ",", "\n", "\t", "\t\t\t\t", 
         RowBox[{"MatrixQ", "[", 
          RowBox[{"stateVec", ",", " ", "IntegerQ"}], "]"}], ",", "\n", "\t", 
         "\t\t\t\t\t", 
         RowBox[{
          RowBox[{
           RowBox[{"iSCFWavefunction", "[", "\n", "\t", "\t\t\t\t\t\t", 
            RowBox[{
            "wfConstructors", ",", "\n", "\t", "\t\t\t\t\t\t", "pot", ",", 
             "\n", "\t", "\t\t\t\t\t\t", "#", ",", "\n", "\t", "\t\t\t\t\t\t",
              "init", ",", "\n", "\t", "\t\t\t\t\t\t", "maxIts", ",", "\n", 
             "\t", "\t\t\t\t\t\t", "converge"}], "\n", "\t", "\t\t\t\t\t\t", 
            "]"}], "&"}], "/@", "stateVec"}], ",", "\n", "\t\t\t\t\t", "True",
          ",", "\n", "\t\t\t\t\t\t", 
         RowBox[{"iSCFWavefunction", "[", "\n", "\t\t\t\t\t\t\t", 
          RowBox[{
          "wfConstructors", ",", "\n", "\t\t\t\t\t\t\t", "pot", ",", "\n", 
           "\t", "\t\t\t\t\t\t", "stateVec", ",", "\n", "\t", "\t\t\t\t\t\t", 
           "init", ",", "\n", "\t", "\t\t\t\t\t\t", "maxIts", ",", "\n", "\t",
            "\t\t\t\t\t\t", "converge"}], "\n", "\t\t\t\t\t\t\t", "]"}]}], 
        "\n", "\t\t\t\t\t", "]"}]}], ";", "\n", "\t\t\t\t", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"!", 
         RowBox[{"MatchQ", "[", 
          RowBox[{"res", ",", " ", 
           RowBox[{"_Association", "|", 
            RowBox[{"{", "__Association", "}"}]}]}], "]"}]}], ",", "\n", 
        "\t\t\t\t\t", 
        RowBox[{"PackageRaiseException", "[", "\n", "\t\t\t\t\t\t", 
         RowBox[{
         "Automatic", ",", "\n", "\t\t\t\t\t\t", 
          "\"\<Failed to generate SCF wavefunctions, got ``\>\"", 
          RowBox[{"(*", "\"\<...and that's all I have to say\>\"", "*)"}], 
          ",", "\n", "\t\t\t\t\t\t", 
          RowBox[{"Short", "@", "res"}]}], "\n", "\t\t\t\t\t\t", "]"}]}], 
       "\n", "\t\t\t\t\t", "]"}], ";", "\n", "\t\t\t\t", "res"}]}], "\n", 
    "\t\t\t", 
    "]"}]}]}]}], \
"CodeInput",ExpressionUUID->"ff83c00a-a539-49e3-8821-a663234c9c69"]
}, Open  ]],

Cell[CellGroupData[{

Cell["\[LeftCeiling]SelfConsistentWavefunctions\[RightFloor]", \
"CodeSubsubsection",
 Evaluatable->True,ExpressionUUID->"adda52c3-e6c3-4180-95b2-58944ea8c742"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "SelfConsistentWavefunctions", "]"}], "=", "\n", 
   "\t", 
   RowBox[{"Options", "[", "iSelfConsistentWavefunctions", "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"SelfConsistentWavefunctions", "[", "\n", "\t", 
    RowBox[{
    "wfConstructors_", ",", "\n", "\t", "pot_GridFunctionObject", ",", "\n", 
     "\t", 
     RowBox[{"ops", ":", 
      RowBox[{"OptionsPattern", "[", "]"}]}]}], "\n", "\t", "]"}], ":=", "\n",
    "\t", 
   RowBox[{"iSelfConsistentWavefunctions", "[", "\n", "\t\t", 
    RowBox[{
    "wfConstructors", ",", "\n", "\t\t", "pot", ",", "\n", "\t\t", "ops"}], 
    "\n", "\t\t", "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"SelfConsistentWavefunctions", "[", "\n", "\t", 
   RowBox[{"constructor_", ",", "\n", "\t", "grid_", ",", "\n", "\t", 
    RowBox[{"potential_List", "?", "VectorQ"}], ",", "\n", "\t", 
    RowBox[{"ops", ":", 
     RowBox[{"OptionsPattern", "[", "]"}]}]}], "\n", "\t", "]"}], ":=", "\n", 
  "\t", 
  RowBox[{"catchSCFException", "@", "\n", "\t\t", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"pot", "=", 
       RowBox[{"GridFunctionObject", "[", 
        RowBox[{"grid", ",", " ", "potential"}], "]"}]}], "}"}], ",", "\n", 
     "\t", "\t\t", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"!", 
        RowBox[{"GridFunctionObjectQ", "@", "pot"}]}], ",", "\n", "\t", 
       "\t\t\t", 
       RowBox[{
        RowBox[{"PackageRaiseException", "[", "\n", "\t", "\t\t\t\t", 
         RowBox[{
         "Automatic", ",", "\n", "\t", "\t\t\t\t", 
          "\"\<Potential could not be constructed from grid and values passed\
\>\""}], "\n", "\t", "\t\t\t\t", "]"}], ";"}]}], "\n", "\t", "\t\t\t", 
      "]"}]}], "\n", "\t", "\t\t", 
    "]"}]}]}]}], \
"CodeInput",ExpressionUUID->"3d622df2-2993-4a8a-ba0b-e9cb3d2fc1d8"]
}, Open  ]]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"End", "[", "]"}], 
  ";"}]], "InputSection",ExpressionUUID->"07b32dc5-8759-49c0-8fd1-\
21dac08e936a"]
}, Open  ]],

Cell["", "SectionSeparator",ExpressionUUID->"9b890501-c575-45aa-bf6b-\
4a602a09f246"]
},
WindowSize->{808, 755},
WindowMargins->{{Automatic, 202}, {41, Automatic}},
FrontEndVersion->"11.3 for Mac OS X x86 (32-bit, 64-bit Kernel) (March 5, \
2018)",
StyleDefinitions->FrontEnd`FileName[{"BTools"}, "CodePackage.nb", 
  CharacterEncoding -> "UTF-8"]
]

