Notebook[
 {Cell[CellGroupData[{Cell["\[LeftCeiling]Wavefunction Tools\[RightFloor]", 
      "CodeSection", Evaluatable -> True], 
     Cell[CellGroupData[{Cell["\[LeftCeiling]Constructor\[RightFloor]", 
         "CodeSubsubsection", Evaluatable -> True], 
        Cell[BoxData[{RowBox[{RowBox[{RowBox[{"ConstructWavefunctions", "::", 
                 "usage"}], "=", "\"\""}], ";"}], "\n", 
           RowBox[{RowBox[{RowBox[{"WavefunctionsObjectQ", "::", "usage"}], 
               "=", "\"\""}], ";"}]}], "CodeInput"]}, Open]], 
     Cell[CellGroupData[{Cell["\[LeftCeiling]Parts\[RightFloor]", 
         "CodeSubsubsection", Evaluatable -> True], 
        Cell[BoxData[{RowBox[{RowBox[{RowBox[{"WFPart", "::", "usage"}], "=", 
               "\n", "\t", "\"Applies part to a wavefunction\""}], ";"}], 
           "\n", RowBox[{RowBox[{RowBox[{"WFKeyPart", "::", "usage"}], "=", 
               "\n", "\t", "\"Applies key lookup to a wavefunction\""}], 
             ";"}]}], "CodeInput"]}, Open]], 
     Cell[CellGroupData[{Cell["\[LeftCeiling]Meh\[RightFloor]", 
         "CodeSubsubsection", Evaluatable -> True], 
        Cell[BoxData[RowBox[{RowBox[{RowBox[{"WFGrid", "::", "usage"}], "=", 
              "\"\""}], ";"}]], "CodeInput"]}, Open]], 
     Cell[CellGroupData[{Cell["\[LeftCeiling]Creation\[RightFloor]", 
         "CodeSubsubsection", Evaluatable -> True], 
        Cell[BoxData[RowBox[{RowBox[{RowBox[{"SelfConsistentWavefunctions", 
                "::", "usage"}], "=", "\n", "\t", "\"Function for doing 1D \
SCF averaging of a potential with a DVR\""}], ";"}]], "CodeInput"], 
        Cell[BoxData[RowBox[{RowBox[{RowBox[{"WFEigensystem", "::", 
                "usage"}], "=", "\n", "\t", "\"Generates wavefunctions from a \
Hamiltonian in a smart way\""}], ";"}]], "CodeInput"]}, Open]], 
     Cell[CellGroupData[{Cell["\[LeftCeiling]Combination\[RightFloor]", 
         "CodeSubsubsection", Evaluatable -> True], 
        Cell[BoxData[{RowBox[{RowBox[{RowBox[{"WFProduct", "::", "usage"}], 
               "=", "\n", "\t", 
               "\"Creates product wavefunctions out of 1D wavefunctions\""}], 
             ";"}], "\n", RowBox[{RowBox[{RowBox[{"WFMerge", "::", "usage"}], 
               "=", "\n", "\t", "\"Joins sets of wavefunctions\""}], ";"}]}], 
         "CodeInput"]}, Open]], Cell[CellGroupData[
       {Cell["\[LeftCeiling]ExpectationValues\[RightFloor]", 
         "CodeSubsubsection", Evaluatable -> True], 
        Cell[BoxData[{RowBox[{RowBox[{RowBox[{"WFExpectationValues", "::", 
                 "usage"}], "=", "\n", "\t", "\"Expectation values over a \
normalized, discretized set of wavefunctions\""}], ";"}], "\n", 
           RowBox[{RowBox[{RowBox[{"WFOperatorMatrix", "::", "usage"}], "=", 
               "\n", "\t", "\"Operator matrix over a normalized, discretized \
set of wavefunctions\""}], ";"}], "\n", RowBox[
            {RowBox[{RowBox[{"WFOperatorMatrixElements", "::", "usage"}], 
               "=", "\n", "\t", "\"Operator matrix elements over a \
normalized, discretized set of wavefunctions\""}], ";"}], "\n", 
           RowBox[{RowBox[{RowBox[{"WFOverlap", "::", "usage"}], "=", "\n", 
               "\t", 
               "\"Takes the overlap between two sets of wavefunctions\""}], 
             ";"}]}], "CodeInput"]}, Open]], 
     Cell[CellGroupData[{Cell["\[LeftCeiling]Interface\[RightFloor]", 
         "CodeSubsubsection", Evaluatable -> True], 
        Cell[BoxData[{RowBox[{RowBox[{RowBox[{"WFNormal", "::", "usage"}], 
               "=", "\"\""}], ";"}], "\n", RowBox[
            {RowBox[{RowBox[{"WFLength", "::", "usage"}], "=", "\"\""}], 
             ";"}]}], "CodeInput"]}, Open]], 
     Cell[CellGroupData[{Cell["\[LeftCeiling]Phases\[RightFloor]", 
         "CodeSubsubsection", Evaluatable -> True], 
        Cell[BoxData[{RowBox[{RowBox[{RowBox[{"WFScale", "::", "usage"}], 
               "=", "\n", "\t", "\"Scales every wf...basically here until we \
get a good GridMultifunctionObject\""}], ";"}], "\n", 
           RowBox[{RowBox[{RowBox[{"WFRephase", "::", "usage"}], "=", "\n", 
               "\t", "\"Rephases wavefunctions by doing full overlap matrix \
and then ordering\""}], ";"}], "\n", RowBox[
            {RowBox[{RowBox[{"WFCorrectPhase", "::", "usage"}], "=", "\n", 
               "\t", "\"Tries to get smooth phasing\""}], ";"}]}], 
         "CodeInput"]}, Open]], Cell[CellGroupData[
       {Cell["\[LeftCeiling]Spectra\[RightFloor]", "CodeSubsubsection", 
         Evaluatable -> True], Cell[BoxData[
          {RowBox[{RowBox[{RowBox[{"WFFrequencies", "::", "usage"}], "=", 
               "\"\""}], ";"}], "\n", RowBox[
            {RowBox[{RowBox[{"WFTransitionMoments", "::", "usage"}], "=", 
               "\"\""}], ";"}], "\n", RowBox[
            {RowBox[{RowBox[{"WFOscillatorStrengths", "::", "usage"}], "=", 
               "\"\""}], ";"}], "\n", RowBox[
            {RowBox[{RowBox[{"WFIntensities", "::", "usage"}], "=", "\"\""}], 
             ";"}]}], "CodeInput"]}, Open]], 
     Cell[BoxData[RowBox[{RowBox[{"Begin", "[", "\"`Private`\"", "]"}], 
         ";"}]], "InputSection"], 
     Cell[CellGroupData[{Cell["\[LeftCeiling]Constructor\[RightFloor]", 
         "CodeSubsection", Evaluatable -> True], 
        Cell[CellGroupData[
          {Cell["\[LeftCeiling]validateWavefunctionData\[RightFloor]", 
            "CodeSubsubsection", Evaluatable -> True], 
           Cell[BoxData[RowBox[{RowBox[{"validateWavefunctionData", "[", 
                 RowBox[{"{", RowBox[{"energies_", ",", " ", "wfns_"}], 
                   "}"}], "]"}], ":=", "\n", "\t", RowBox[
                {RowBox[{"If", "[", RowBox[{RowBox[{"!", RowBox[
                        {"Developer`PackedArrayQ", "@", "energies"}]}], ",", 
                     "\n", "\t\t", RowBox[{"PackageRaiseException", "[", 
                       RowBox[{"Automatic", ",", "\n", "\t\t\t", 
                         "\"Failed to pack wavefunction energies ``\"", ",", 
                         "\n", "\t\t\t", "energies"}], "\n", "\t\t\t", "]"}], 
                     ",", "\n", "\t\t", "True"}], "\n", "\t\t", "]"}], "&&", 
                 "\n", "\t\t", RowBox[{"If", "[", RowBox[{RowBox[{"!", 
                       RowBox[{"AllTrue", "[", RowBox[{"wfns", ",", " ", 
                          "GridFunctionObjectQ"}], "]"}]}], ",", "\n", 
                     "\t\t\t", RowBox[{"PackageRaiseException", "[", 
                       RowBox[{"Automatic", ",", "\n", "\t\t\t\t", "\"Some \
wavefunctions could not be turned into GridFunctionObjects\""}], "\n", 
                       "\t\t\t\t", "]"}], ",", "\n", "\t\t\t", "True"}], 
                   "\n", "\t\t\t", "]"}]}]}]], "CodeInput"]}, Open]], 
        Cell[CellGroupData[
          {Cell["\[LeftCeiling]constructWavefunctionData\[RightFloor]", 
            "CodeSubsubsection", Evaluatable -> True], 
           Cell[BoxData[RowBox[{RowBox[{"constructWavefunctionData", "[", 
                 RowBox[{"erg_", ",", " ", "wf_", ",", " ", "grid_"}], "]"}], 
               ":=", "\n", "\t", RowBox[{"Module", "[", "\n", "\t\t", 
                 RowBox[{RowBox[{"{", "\n", "\t\t\t", RowBox[{RowBox[{"engs", 
                         "=", RowBox[{"Developer`ToPackedArray", "@", RowBox[
                          {"N", "[", "erg", "]"}]}]}], ",", "\n", "\t\t\t", 
                       RowBox[{"wfns", "=", "\n", "\t\t\t\t", RowBox[{"If", 
                          "[", RowBox[{RowBox[{"!", RowBox[
                          {"GridFunctionObjectQ", "@", RowBox[{"wf", "[", 
                          RowBox[{"[", "1", "]"}], "]"}]}]}], ",", "\n", 
                          "\t", "\t\t\t\t", RowBox[{
                          "Developer`ToPackedArray", "@", RowBox[{"N", "[", 
                          "wf", "]"}]}], ",", "\n", "\t\t\t\t\t", "wf"}], 
                          "\n", "\t\t\t\t\t", "]"}]}], ",", "\n", "\t\t\t", 
                       RowBox[{"gr", "=", RowBox[{"CoordinateGridObject", 
                          "[", "grid", "]"}]}]}], "\n", "\t\t\t", "}"}], ",", 
                   "\n", "\t\t", RowBox[{RowBox[{"If", "[", RowBox[
                        {RowBox[{"!", RowBox[{"GridFunctionObjectQ", "@", 
                          RowBox[{"wfns", "[", RowBox[{"[", "1", "]"}], 
                          "]"}]}]}], ",", "\n", "\t\t\t", RowBox[{"wfns", 
                          "=", RowBox[{RowBox[{RowBox[{"GridFunctionObject", 
                          "[", RowBox[{"gr", ",", " ", "#"}], "]"}], "&"}], 
                          "/@", "wfns"}]}]}], "\n", "\t\t\t", "]"}], ";", 
                     "\n", "\t\t", RowBox[{"{", RowBox[{"engs", ",", " ", 
                         "wfns"}], "}"}]}]}], "\n", "\t\t", "]"}]}]], 
            "CodeInput"]}, Open]], Cell[CellGroupData[
          {Cell["\[LeftCeiling]ConstructWavefunctions\[RightFloor]", 
            "CodeSubsubsection", Evaluatable -> True], 
           Cell[BoxData[{RowBox[{RowBox[{"ConstructWavefunctions", "//", 
                  "Clear"}], ";"}], "\n", RowBox[{RowBox[
                 {RowBox[{"ConstructWavefunctions", "[", "\n", "\t", 
                    RowBox[{RowBox[{"{", "\n", "\t\t", RowBox[{"energies_", 
                          ",", "\n", "\t\t", "wfns_"}], "\n", "\t\t", "}"}], 
                      ",", "\n", "\t", "grid_"}], "\n", "\t", "]"}], ":=", 
                  "\n", "\t", RowBox[{"With", "[", "\n", "\t\t", RowBox[
                     {RowBox[{"{", "\n", "\t\t\t", RowBox[{"data", "=", 
                          RowBox[{"constructWavefunctionData", "[", RowBox[
                          {"energies", ",", " ", "wfns", ",", " ", "grid"}], 
                          "]"}]}], "\n", "\t\t\t", "}"}], ",", "\n", "\t\t", 
                      RowBox[{"If", "[", RowBox[{RowBox[
                          {"validateWavefunctionData", "[", "data", "]"}], 
                          ",", "\n", "\t\t\t", RowBox[{"<|", "\n", 
                          "\t\t\t\t", RowBox[{RowBox[{"\"Wavefunctions\"", 
                          "\[Rule]", RowBox[{"data", "[", RowBox[{"[", "2", 
                          "]"}], "]"}]}], ",", "\n", "\t\t\t\t", RowBox[
                          {"\"Energies\"", "\[Rule]", RowBox[{"data", "[", 
                          RowBox[{"[", "1", "]"}], "]"}]}]}], "\n", 
                          "\t\t\t\t", "|>"}], ",", "\n", "\t\t\t", RowBox[
                          {"<|", RowBox[{"$Failed", "\[Rule]", "True"}], 
                          "|>"}]}], " ", RowBox[{"(*", " ", RowBox[
                          {"requires", " ", "Association", " ", "return", 
                          " ", "to", " ", "throw", " ", "the", " ", 
                          "error"}], " ", "*)"}], "\n", "\t\t\t", "]"}]}], 
                    "\n", "\t\t", "]"}]}], ";"}], "\n", RowBox[{
                RowBox[{RowBox[{"ConstructWavefunctions", "[", "\n", "\t", 
                    RowBox[{"\"SCF\"", ",", "\n", "\t", "args___"}], "\n", 
                    "\t", "]"}], ":=", "\n", "\t", RowBox[{"Module", "[", 
                    "\n", "\t\t", RowBox[{RowBox[{"{", RowBox[{"res", ",", 
                          " ", "energies", ",", " ", "wfns", ",", " ", 
                          "grid"}], "}"}], ",", "\n", "\t\t", RowBox[
                       {RowBox[{"res", "=", RowBox[{"Flatten", "@", RowBox[
                          {"{", RowBox[{"SelfConsistentWavefunctions", "[", 
                          "args", "]"}], "}"}]}]}], ";", "\n", "\t\t", 
                        RowBox[{"If", "[", RowBox[{RowBox[{"!", RowBox[
                          {"MatchQ", "[", RowBox[{"res", ",", " ", RowBox[
                          {"{", "__Association", "}"}]}], "]"}]}], ",", "\n", 
                          "\t\t\t", RowBox[{"PackageRaiseException", "[", 
                          "\n", "\t\t\t\t", RowBox[{"Automatic", ",", "\n", 
                          "\t\t\t\t", 
                          "\"Failed to generate valid SCF wavefunctions\""}], 
                          "\n", "\t\t\t\t", "]"}], ",", "\n", "\t\t\t", 
                          RowBox[{RowBox[{"energies", "=", "\n", "\t\t\t\t", 
                          RowBox[{"Map", "[", RowBox[{RowBox[{RowBox[{"Plus", 
                          "@@", "#Energies"}], "&"}], ",", " ", "res"}], 
                          "]"}]}], ";", "\n", "\t\t\t", RowBox[{"wfns", "=", 
                          "\n", "\t\t\t\t", RowBox[{"Map", "[", RowBox[
                          {RowBox[{RowBox[{"GFKroneckerProduct", "@@", 
                          "#Wavefunctions"}], "&"}], ",", " ", "res"}], 
                          "]"}]}], ";", "\n", "\t", "\t\t", RowBox[{"grid", 
                          "=", "\n", "\t", "\t\t\t", RowBox[{RowBox[{"wfns", 
                          "[", RowBox[{"[", "1", "]"}], "]"}], "[", 
                          "\"Grid\"", "]"}]}], ";", " ", "\n", "\t", "\t\t", 
                          RowBox[{"ConstructWavefunctions", "[", "\n", "\t", 
                          "\t\t\t", RowBox[{RowBox[{"{", "\n", "\t", 
                          "\t\t\t\t", RowBox[{"energies", ",", "\n", "\t", 
                          "\t\t\t\t", "wfns"}], "\n", "\t", "\t\t\t\t", 
                          "}"}], ",", "\n", "\t\t\t\t", "grid"}], "\n", 
                          "\t\t\t\t", "]"}]}]}], "\n", "\t\t\t", "]"}]}]}], 
                    "\n", "\t\t", "]"}]}], ";"}], "\n", RowBox[{
                RowBox[{RowBox[{"ConstructWavefunctions", "[", "\n", "\t", 
                    RowBox[{"\"Diagonalize\"", ",", "\n", "\t", RowBox[
                       {"t_", "?", "SquareMatrixQ"}], ",", "\n", "\t", 
                      RowBox[{"v_", "?", "SquareMatrixQ"}], ",", "\n", "\t", 
                      RowBox[{"grid", ":", RowBox[{"Except", "[", RowBox[
                          {"_", "?", "OptionQ"}], "]"}]}], ",", "\n", "\t", 
                      RowBox[{"ops", ":", RowBox[{"OptionsPattern", "[", 
                          "]"}]}]}], "\n", "\t", "]"}], ":=", "\n", "\t", 
                  RowBox[{"Module", "[", "\n", "\t\t", RowBox[
                     {RowBox[{"{", "\n", "\t\t\t", RowBox[{RowBox[{"g", "=", 
                          RowBox[{"CoordinateGridObject", "[", "grid", 
                          "]"}]}], ",", "\n", "\t\t\t", "ret"}], "\n", 
                        "\t\t\t", "}"}], ",", "\n", "\t\t", RowBox[{"If", 
                        "[", RowBox[{RowBox[{"CoordinateGridObjectQ", "[", 
                          "g", "]"}], ",", "\n", "\t\t\t", RowBox[{RowBox[
                          {"ret", "=", RowBox[{"WFEigensystem", "[", RowBox[
                          {"t", ",", " ", "v", ",", " ", "ops"}], "]"}]}], 
                          ";", "\n", "\t\t\t", RowBox[
                          {"ConstructWavefunctions", "[", RowBox[{"ret", ",", 
                          " ", "grid"}], "]"}]}]}], "\n", "\t\t\t", "]"}]}], 
                    "\n", "\t\t", "]"}]}], ";"}], "\n", RowBox[{
                RowBox[{RowBox[{"ConstructWavefunctions", "[", "\n", "\t", 
                    RowBox[{"\"Diagonalize\"", ",", "\n", "\t", RowBox[
                       {"t_", "?", "SquareMatrixQ"}], ",", "\n", "\t", 
                      RowBox[{"grid_", "?", RowBox[{"(", RowBox[{RowBox[
                          {"Not", "@", RowBox[{"SquareMatrixQ", "[", "#", 
                          "]"}]}], "&"}], ")"}]}], ",", "\n", "\t", 
                      RowBox[{"ops", ":", RowBox[{"OptionsPattern", "[", 
                          "]"}]}]}], "\n", "\t", "]"}], ":=", "\n", "\t", 
                  RowBox[{"ConstructWavefunctions", "[", RowBox[
                     {"\"Diagonalize\"", ",", "\n", "\t\t", "t", ",", "\n", 
                      "\t\t", RowBox[{"SparseArray", "[", RowBox[{RowBox[
                          {"{", "}"}], ",", " ", RowBox[{"Dimensions", "[", 
                          "t", "]"}]}], "]"}], ",", "\n", "\t\t", "grid", 
                      ",", " ", "\n", "\t\t", "ops"}], "\n", "\t\t", "]"}]}], 
                ";"}], "\n", RowBox[{RowBox[{RowBox[
                   {"ConstructWavefunctions", "[", "a_Association", "]"}], 
                  ":=", "\n", "\t", "a"}], ";"}]}], "CodeInput"]}, Open]]}, 
       Open]], Cell[CellGroupData[
       {Cell["\[LeftCeiling]WFNormal\[RightFloor]", "CodeSubsection", 
         Evaluatable -> True], Cell[BoxData[RowBox[
           {RowBox[{"WFNormal", "[", "wfns_", "]"}], ":=", "\n", "\t", 
            RowBox[{"{", "\n", "\t\t", RowBox[{RowBox[{"wfns", "[", 
                  "\"Energies\"", "]"}], ",", "\n", "\t\t", RowBox[
                 {RowBox[{RowBox[{RowBox[{"Flatten", "@", RowBox[{"#", "[", 
                          "\"Values\"", "]"}]}], "&"}], "/@", RowBox[
                     {"wfns", "[", "\"Wavefunctions\"", "]"}]}], "//", 
                  "Developer`ToPackedArray"}], ",", "\n", "\t\t", 
                RowBox[{RowBox[{RowBox[{RowBox[{"wfns", "[", 
                        "\"Wavefunctions\"", "]"}], "[", RowBox[{"[", "1", 
                        "]"}], "]"}], "[", "\"Grid\"", "]"}], "//", 
                  "Normal"}]}], "\n", "\t\t", "}"}]}]], "CodeInput"]}, 
       Open]], Cell[CellGroupData[
       {Cell["\[LeftCeiling]Mindless\[RightFloor]", "CodeSubsection", 
         Evaluatable -> True], Cell[CellGroupData[
          {Cell["\[LeftCeiling]WFGrid\[RightFloor]", "CodeSubsubsection", 
            Evaluatable -> True], Cell[BoxData[RowBox[{RowBox[
                {RowBox[{"WFGrid", "[", "wfns_", "]"}], ":=", RowBox[
                  {RowBox[{RowBox[{"wfns", "[", "\"Wavefunctions\"", "]"}], 
                     "[", RowBox[{"[", "1", "]"}], "]"}], "[", "\"Grid\"", 
                   "]"}]}], ";"}]], "CodeInput"]}, Open]], 
        Cell[CellGroupData[{Cell["\[LeftCeiling]WFLength\[RightFloor]", 
            "CodeSubsubsection", Evaluatable -> True], 
           Cell[BoxData[RowBox[{RowBox[{RowBox[{"WFLength", "[", "wf_", 
                   "]"}], ":=", "\n", "\t", RowBox[{"Length", "@", 
                   RowBox[{"wf", "[", "\"Wavefunctions\"", "]"}]}]}], ";"}]], 
            "CodeInput"]}, Open]]}, Open]], 
     Cell[CellGroupData[
       {Cell["\[LeftCeiling]Wavefunction Parts\[RightFloor]", 
         "CodeSubsection", Evaluatable -> True], 
        Cell[CellGroupData[{Cell["\[LeftCeiling]WFPart\[RightFloor]", 
            "CodeSubsubsection", Evaluatable -> True], 
           Cell[BoxData[{RowBox[{RowBox[{"WFPart", "[", RowBox[
                   {RowBox[{"WavefunctionsObject", "[", "c_", "]"}], ",", 
                    " ", "sel_"}], "]"}], ":=", "\n", "\t", RowBox[
                 {RowBox[{"If", "[", RowBox[{RowBox[{"IntegerQ", "@", 
                        "sel"}], ",", " ", "\n", "\t\t", RowBox[
                       {RowBox[{"Lookup", "[", RowBox[{"#", ",", " ", RowBox[
                          {"{", RowBox[{"\"Energies\"", ",", " ", 
                          "\"Wavefunctions\""}], "}"}]}], "]"}], "&"}], ",", 
                      "\n", "\t\t", "WavefunctionsObject"}], "\n", "\t\t", 
                    "]"}], "@", "\n", "\t\t", RowBox[{"MapAt", "[", "\n", 
                    "\t\t\t", RowBox[{RowBox[{RowBox[{"Part", "[", RowBox[
                          {"#", ",", " ", "sel"}], "]"}], "&"}], ",", "\n", 
                      "\t\t\t", "c", ",", "\n", "\t\t\t", RowBox[{"{", 
                        RowBox[{RowBox[{"{", "\"Energies\"", "}"}], ",", " ", 
                          RowBox[{"{", "\"Wavefunctions\"", "}"}]}], "}"}]}], 
                    "\n", "\t\t\t", "]"}]}]}], "\n", RowBox[{RowBox[
                 {RowBox[{"WFPart", "[", RowBox[{RowBox[
                       {"WavefunctionsObject", "[", "c_", "]"}], ",", " ", 
                      "All", ",", " ", "p__"}], "]"}], ":=", "\n", "\t", 
                  RowBox[{"WavefunctionsObject", "@", "\n", "\t\t", 
                    RowBox[{"MapAt", "[", "\n", "\t\t\t", RowBox[
                       {RowBox[{"Map", "[", RowBox[{RowBox[{"#", "[", RowBox[
                          {"[", "p", "]"}], "]"}], "&"}], "]"}], ",", "\n", 
                        "\t\t\t", "c", ",", "\n", "\t\t\t", 
                        "\"Wavefunctions\""}], "\n", "\t\t\t", "]"}]}]}], 
                ";"}], "\n", RowBox[{RowBox[{"WFPart", "[", RowBox[
                   {RowBox[{"WavefunctionsObject", "[", "c_", "]"}], ",", 
                    " ", "sel_", ",", " ", "p__"}], "]"}], ":=", "\n", "\t", 
                RowBox[{RowBox[{"If", "[", RowBox[{RowBox[{"IntegerQ", "@", 
                        "sel"}], ",", " ", "\n", "\t\t", RowBox[
                       {RowBox[{"Lookup", "[", "\n", "\t\t\t", RowBox[
                          {RowBox[{"MapAt", "[", RowBox[{RowBox[{RowBox[
                          {"#", "[", RowBox[{"[", "p", "]"}], "]"}], "&"}], 
                          ",", " ", "#", ",", " ", "\"Wavefunctions\""}], 
                          "]"}], ",", " ", "\n", "\t\t\t", RowBox[{"{", 
                          RowBox[{"\"Energies\"", ",", " ", 
                          "\"Wavefunctions\""}], "}"}]}], "\n", "\t\t\t", 
                          "]"}], "&"}], ",", "\n", "\t\t", RowBox[
                       {RowBox[{"WavefunctionsObject", "@", "\n", "\t\t\t", 
                          RowBox[{"MapAt", "[", RowBox[{RowBox[{"Map", "[", 
                          RowBox[{RowBox[{"#", "[", RowBox[{"[", "p", "]"}], 
                          "]"}], "&"}], "]"}], ",", " ", "#", ",", " ", 
                          "\"Wavefunctions\""}], "]"}]}], "&"}]}], "\n", 
                    "\t\t", "]"}], "@", "\n", "\t\t", RowBox[{"MapAt", "[", 
                    "\n", "\t\t\t", RowBox[{RowBox[{RowBox[{"Part", "[", 
                          RowBox[{"#", ",", " ", "sel"}], "]"}], "&"}], ",", 
                      "\n", "\t\t\t", "c", ",", "\n", "\t\t\t", RowBox[
                       {"{", RowBox[{RowBox[{"{", "\"Energies\"", "}"}], ",", 
                          " ", RowBox[{"{", "\"Wavefunctions\"", "}"}]}], 
                        "}"}]}], "\n", "\t\t\t", "]"}]}]}]}], "CodeInput"]}, 
          Open]], Cell[CellGroupData[
          {Cell["\[LeftCeiling]WFKeyPart\[RightFloor]", "CodeSubsubsection", 
            Evaluatable -> True], Cell[BoxData[RowBox[{RowBox[{"WFKeyPart", 
                 "[", RowBox[{RowBox[{"c", ":", RowBox[
                      {"WavefunctionsObject", "[", "a_", "]"}]}], ",", " ", 
                   "sel__"}], "]"}], ":=", "\n", "\t", RowBox[{"a", "[", 
                 "sel", "]"}]}]], "CodeInput"]}, Open]]}, Open]], 
     Cell[CellGroupData[{Cell["\[LeftCeiling]Eigensystems\[RightFloor]", 
         "CodeSubsection", Evaluatable -> True], 
        Cell[CellGroupData[
          {Cell["\[LeftCeiling]WFPrepareHamiltonian\[RightFloor]", 
            "CodeSubsubsection", Evaluatable -> True], 
           Cell[BoxData[{RowBox[{RowBox[{RowBox[{"Options", "[", 
                    "WFPrepareHamiltonian", "]"}], "=", "\n", "\t", 
                  RowBox[{"{", "\n", "\t\t", RowBox[{RowBox[
                       {"\"ValidateHamiltonian\"", "\[Rule]", "True"}], ",", 
                      "\n", "\t\t", RowBox[{"\"PruningEnergy\"", "\[Rule]", 
                        "None"}], ",", "\n", "\t\t", RowBox[
                       {"\"HamiltonianRounding\"", "\[Rule]", "None"}]}], 
                    "\n", "\t\t", "}"}]}], ";"}], "\n", RowBox[{
                RowBox[{"WFPrepareHamiltonian", "[", RowBox[{"T_", ",", " ", 
                    "V_", ",", " ", RowBox[{"ops", ":", RowBox[
                       {"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", "\n", 
                "\t", RowBox[{"Module", "[", "\n", "\t\t", RowBox[
                   {RowBox[{"{", "\n", "\t\t\t", RowBox[{RowBox[{"prune", 
                          "=", RowBox[{"OptionValue", "[", 
                          "\"PruningEnergy\"", "]"}]}], ",", "\n", "\t\t\t", 
                        "vDiag", ",", "\n", "\t\t\t", "prunePos", ",", "\n", 
                        "\t\t\t", "fullLen", ",", "\n", "\t\t\t", RowBox[
                         {"round", "=", RowBox[{"OptionValue", "[", 
                          "\"HamiltonianRounding\"", "]"}]}], ",", "\n", 
                        "\t\t\t", RowBox[{"keMat", "=", RowBox[
                          {"ReleaseHold", "@", "T"}]}], ",", "\n", "\t\t\t", 
                        RowBox[{"peMat", "=", RowBox[{"ReleaseHold", "@", 
                          "V"}]}], ",", "\n", "\t\t\t", "ham", ",", "\n", 
                        "\t\t\t", RowBox[{"validate", "=", RowBox[{RowBox[
                          {"OptionValue", "[", "\"ValidateHamiltonian\"", 
                          "]"}], "=!=", "False"}]}], ",", "\n", "\t\t\t", 
                        "hermCut"}], "\n", "\t\t\t", "}"}], ",", "\n", 
                    "\t\t", RowBox[{RowBox[{"If", "[", RowBox[{RowBox[
                          {RowBox[{"!", RowBox[{"SquareMatrixQ", "[", 
                          "keMat", "]"}]}], "||", "\n", "\t\t\t", RowBox[
                          {"(", RowBox[{"validate", "&&", RowBox[{"!", RowBox[
                          {"MatrixQ", "[", RowBox[{"keMat", ",", " ", 
                          "Internal`RealValuedNumericQ"}], "]"}]}]}], 
                          ")"}]}], ",", "\n", "\t\t\t", RowBox[
                          {"PackageRaiseException", "[", "\n", "\t\t\t\t", 
                          RowBox[{"Automatic", ",", "\n", "\t\t\t\t", "\"The \
kinetic energy is not a square numerical matrix\""}], "\n", "\t\t\t\t", 
                          "]"}]}], "\n", "\t\t\t", "]"}], ";", "\n", "\t\t", 
                      RowBox[{"If", "[", RowBox[{RowBox[{RowBox[{"!", RowBox[
                          {"SquareMatrixQ", "[", "peMat", "]"}]}], "||", 
                          "\n", "\t\t\t", RowBox[{"(", RowBox[{"validate", 
                          "&&", RowBox[{"!", RowBox[{"MatrixQ", "[", RowBox[
                          {"peMat", ",", " ", 
                          "Internal`RealValuedNumericQ"}], "]"}]}]}], 
                          ")"}]}], ",", "\n", "\t\t\t", RowBox[
                          {"PackageRaiseException", "[", "\n", "\t\t\t\t", 
                          RowBox[{"Automatic", ",", "\n", "\t\t\t\t", "\"The \
potential energy is not a square numerical matrix\""}], "\n", "\t\t\t\t", 
                          "]"}]}], "\n", "\t\t\t", "]"}], ";", "\n", "\t\t", 
                      RowBox[{"ham", "=", RowBox[{"keMat", "+", "peMat"}]}], 
                      ";", "\n", "\t\t", RowBox[{"fullLen", "=", RowBox[
                         {"Length", "@", "ham"}]}], ";", "\n", "\t\t", 
                      RowBox[{"If", "[", RowBox[{RowBox[{RowBox[{"!", RowBox[
                          {"SquareMatrixQ", "[", "ham", "]"}]}], "||", "\n", 
                          "\t\t\t", RowBox[{"(", RowBox[{"validate", "&&", 
                          RowBox[{"!", RowBox[{"MatrixQ", "[", RowBox[{"ham", 
                          ",", " ", "Internal`RealValuedNumericQ"}], 
                          "]"}]}]}], ")"}]}], ",", "\n", "\t\t\t", RowBox[
                          {"PackageRaiseException", "[", "\n", "\t\t\t\t", 
                          RowBox[{"Automatic", ",", "\n", "\t\t\t\t", "\"The \
Hamiltonian is not a square numerical matrix\""}], "\n", "\t\t\t\t", "]"}]}], 
                        "\n", "\t\t\t", "]"}], ";", " ", "\n", "\t\t", 
                      RowBox[{"If", "[", RowBox[{RowBox[{RowBox[{"NumericQ", 
                          "@", "prune"}], "||", RowBox[{"MatchQ", "[", 
                          RowBox[{"prune", ",", " ", RowBox[{"Scaled", "[", 
                          RowBox[{"_", "?", "NumericQ"}], "]"}]}], "]"}]}], 
                          ",", "\n", "\t\t\t", RowBox[{RowBox[{"vDiag", "=", 
                          RowBox[{"Normal", "@", RowBox[{"Diagonal", "[", 
                          RowBox[{"ReleaseHold", "@", "V"}], "]"}]}]}], ";", 
                          "\n", "\t\t\t", RowBox[{"prune", "=", "\n", 
                          "\t\t\t\t", RowBox[{"Replace", "[", RowBox[
                          {"prune", ",", " ", "\n", "\t", "\t\t\t\t", RowBox[
                          {"{", "\n", "\t", "\t\t\t\t\t", RowBox[{RowBox[
                          {RowBox[{"i_", "?", "NumericQ"}], "\[RuleDelayed]", 
                          RowBox[{"Rescale", "[", RowBox[{"i", ",", " ", 
                          RowBox[{"MinMax", "@", "vDiag"}]}], "]"}]}], ",", 
                          "\n", "\t", "\t\t\t\t\t", RowBox[{RowBox[{"Scaled", 
                          "[", "s_", "]"}], "\[RuleDelayed]", "s"}]}], "\n", 
                          "\t\t\t\t\t\t", "}"}]}], "\n", "\t\t\t\t\t", 
                          "]"}]}], ";", "\n", "\t\t\t", RowBox[{"vDiag", "=", 
                          RowBox[{"Rescale", "[", "vDiag", "]"}]}], ";", 
                          "\n", "\t\t\t", RowBox[{"prunePos", "=", RowBox[
                          {"Flatten", "@", RowBox[{"Position", "[", RowBox[
                          {"vDiag", ",", " ", RowBox[{"_", "?", RowBox[{"(", 
                          RowBox[{RowBox[{"#", ">", "prune"}], "&"}], 
                          ")"}]}], ",", " ", "1"}], "]"}]}]}], ";", "\n", 
                          "\t\t\t", RowBox[{"ham", "=", "\n", "\t\t\t\t", 
                          RowBox[{"ham", "[", RowBox[{"[", "\n", 
                          "\t\t\t\t\t", RowBox[{RowBox[{"Complement", "[", 
                          RowBox[{RowBox[{"Range", "[", RowBox[{"Length", 
                          "@", "ham"}], "]"}], ",", " ", "prunePos"}], "]"}], 
                          ",", " ", "\n", "\t\t\t\t\t", RowBox[{"Complement", 
                          "[", RowBox[{RowBox[{"Range", "[", RowBox[
                          {"Length", "@", "ham"}], "]"}], ",", " ", 
                          "prunePos"}], "]"}]}], "\n", "\t\t\t\t\t", "]"}], 
                          "]"}]}], ";"}]}], "\n", "\t\t\t", "]"}], ";", "\n", 
                      "\t\t", RowBox[{"If", "[", RowBox[{RowBox[{"round", 
                          ">", "1"}], ",", " ", RowBox[{"round", "=", RowBox[
                          {"10", "^", RowBox[{"-", "round"}]}]}]}], "]"}], 
                      ";", "\n", "\t\t", RowBox[{"If", "[", RowBox[
                         {RowBox[{"NumericQ", "@", "round"}], ",", " ", 
                          RowBox[{"ham", "=", RowBox[{"Round", "[", RowBox[
                          {"ham", ",", " ", RowBox[{"N", "@", "round"}]}], 
                          "]"}]}]}], "]"}], ";", "\n", "\t\t", RowBox[
                       {"If", "[", RowBox[{RowBox[{"validate", "&&", RowBox[
                          {"!", RowBox[{"HermitianMatrixQ", "@", "ham"}]}]}], 
                          ",", " ", "\n", "\t\t\t", RowBox[{"If", "[", 
                          RowBox[{RowBox[{"HermitianMatrixQ", "[", RowBox[
                          {"ham", ",", " ", RowBox[{"Tolerance", "\[Rule]", 
                          RowBox[{"10", "^", RowBox[{"-", "7"}]}]}]}], "]"}], 
                          ",", "\n", "\t\t\t\t", RowBox[{RowBox[{"hermCut", 
                          "=", "\n", "\t\t\t\t\t", RowBox[{"SelectFirst", 
                          "[", "\n", "\t\t\t\t\t\t", RowBox[{RowBox[{"Range", 
                          "[", "\n", "\t\t\t\t\t\t\t", RowBox[{RowBox[
                          {"Floor", "@", "$MachinePrecision"}], ",", "\n", 
                          "\t\t\t\t\t\t\t", "7", ",", "\n", "\t\t\t\t\t\t\t", 
                          RowBox[{"-", "1"}]}], "\n", "\t\t\t\t\t\t\t", 
                          "]"}], ",", "\n", "\t\t\t\t\t\t", RowBox[{RowBox[
                          {"HermitianMatrixQ", "[", RowBox[{"ham", ",", " ", 
                          RowBox[{"Tolerance", "\[Rule]", RowBox[{"10", "^", 
                          RowBox[{"-", "#"}]}]}]}], "]"}], "&"}]}], "\n", 
                          "\t\t\t\t\t\t", "]"}]}], ";", "\n", "\t\t\t\t", 
                          RowBox[{"PackageRaiseException", "[", "\n", 
                          "\t\t\t\t\t", RowBox[{"Automatic", ",", "\n", "\t", 
                          "\t\t\t\t", "\"Hamiltonian isn't Hermitian. \
\\\nNumerical instability may have introduced lack of hermiticity. \\\nTry \
passing \\\"HamiltonianRounding\\\"->``.\"", ",", "\n", "\t\t\t\t\t", RowBox[
                          {"With", "[", RowBox[{RowBox[{"{", RowBox[{"c", 
                          "=", "hermCut"}], "}"}], ",", " ", RowBox[
                          {"HoldForm", "[", RowBox[{"10", "^", RowBox[{"-", 
                          "c"}]}], "]"}]}], "]"}]}], "\n", "\t\t\t\t\t", 
                          "]"}]}], ",", "\n", "\t\t\t\t", RowBox[
                          {"PackageRaiseException", "@", "\n", "\t\t\t\t\t", 
                          "\"Hamiltonian is neither Hermitian nor \
approximately Hermitian\""}]}], "\n", "\t\t\t\t", "]"}]}], "\n", "\t\t\t", 
                        "]"}], ";", " ", "\n", "\t\t", RowBox[{"{", RowBox[
                         {"ham", ",", " ", RowBox[{"{", RowBox[{RowBox[{"If", 
                          "[", RowBox[{RowBox[{"ListQ", "@", "prunePos"}], 
                          ",", " ", "prunePos", ",", " ", RowBox[{"{", 
                          "}"}]}], "]"}], ",", " ", "fullLen"}], "}"}]}], 
                        "}"}]}]}], "\n", "\t\t", "]"}]}]}], "CodeInput"]}, 
          Open]], Cell[CellGroupData[
          {Cell["\[LeftCeiling]WFDecomposeHamiltonian\[RightFloor]", 
            "CodeSubsubsection", Evaluatable -> True], 
           Cell[BoxData[RowBox[{RowBox[{"WFDecomposeHamiltonian", "[", 
                 "ham_", "]"}], ":=", "\n", "\t", RowBox[{"Module", "[", 
                 "\n", "\t\t", RowBox[{RowBox[{"{", "\n", "\t\t\t", 
                     RowBox[{"hamDiag", ",", "\n", "\t\t\t", "rowSums", ",", 
                       "\n", "\t\t\t", "disks", ",", "\n", "\t\t\t", 
                       "diskIntersections"}], "\n", "\t\t\t", "}"}], ",", 
                   "\n", "\t\t", RowBox[{"(*", RowBox[{"do", " ", 
                       "Gerschgorin"}], "*)"}], "\n", "\t\t", "Null"}], "\n", 
                 "\t\t", "]"}]}]], "CodeInput"]}, Open]], 
        Cell[CellGroupData[{Cell["\[LeftCeiling]WFEigensystem\[RightFloor]", 
            "CodeSubsubsection", Evaluatable -> True], 
           Cell[CellGroupData[{Cell["\[LeftCeiling]getWFSel\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                RowBox[{RowBox[{"getWFSel", "[", RowBox[{"nwfs_", ",", " ", 
                      "len_", ",", " ", "head_", ",", " ", "solver_"}], 
                    "]"}], ":=", "\n", "\t", RowBox[{"Replace", "[", 
                    RowBox[{"nwfs", ",", "\n", "\t\t", RowBox[{"{", "\n", 
                        "\t\t\t", RowBox[{RowBox[{"Automatic", ":>", "\n", 
                          "\t\t\t\t", RowBox[{"If", "[", RowBox[{RowBox[
                          {"head", "===", "SparseArray"}], ",", " ", "\n", 
                          "\t\t\t\t\t", RowBox[{"-", RowBox[{"Abs", "[", 
                          RowBox[{"Max", "@", RowBox[{"{", RowBox[{RowBox[
                          {"Min", "@", RowBox[{"{", RowBox[{RowBox[{"Floor", 
                          "[", RowBox[{"len", "/", "10"}], "]"}], ",", " ", 
                          "25"}], "}"}]}], ",", " ", "3"}], "}"}]}], "]"}]}], 
                          ",", "\n", "\t\t\t\t\t", RowBox[{"If", "[", RowBox[
                          {RowBox[{"solver", "===", "Eigenvalues"}], ",", 
                          "\n", "\t\t\t\t\t\t", RowBox[{"-", RowBox[{"Abs", 
                          "[", RowBox[{"Max", "@", RowBox[{"{", RowBox[
                          {RowBox[{"Min", "@", RowBox[{"{", RowBox[{RowBox[
                          {"Floor", "[", RowBox[{"len", "/", "10"}], "]"}], 
                          ",", " ", "25"}], "}"}]}], ",", " ", "3"}], 
                          "}"}]}], "]"}]}], ",", "\n", "\t\t\t\t\t\t", RowBox[
                          {"Sequence", "@@", RowBox[{"{", "}"}]}]}], "\n", 
                          "\t\t\t\t\t\t", "]"}]}], "\n", "\t\t\t\t\t", 
                          "]"}]}], ",", "\n", "\t\t\t", RowBox[{"i_Integer", 
                          "\[RuleDelayed]", "\n", "\t\t\t\t", RowBox[{"-", 
                          "i"}]}], ",", "\n", "\t\t\t", RowBox[{"_", ":>", 
                          RowBox[{"Sequence", "@@", RowBox[{"{", "}"}]}]}]}], 
                        "\n", "\t\t\t", "}"}]}], "\n", "\t\t", "]"}]}]], 
               "CodeInput"]}, Open]], Cell[CellGroupData[
             {Cell["\[LeftCeiling]getWFEigSysMethod\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                RowBox[{RowBox[{"getWFEigSysMethod", "[", RowBox[{"hamType_", 
                      ",", " ", "ops_", ",", " ", "arnops_"}], "]"}], ":=", 
                  "\n", "\t", RowBox[{"Replace", "[", RowBox[{RowBox[
                       {"OptionValue", "[", RowBox[{"WFEigensystem", ",", 
                          " ", "ops", ",", " ", "Method"}], "]"}], ",", " ", 
                      "\n", "\t\t", RowBox[{"Automatic", ":>", "\n", 
                        "\t\t\t", RowBox[{"If", "[", RowBox[{RowBox[
                          {"hamType", "===", "SparseArray"}], ",", " ", "\n", 
                          "\t\t\t\t", RowBox[{RowBox[{"arnops", "=", "\n", 
                          "\t\t\t\t\t", RowBox[{"KeyValueMap", "[", "\n", 
                          "\t\t\t\t\t\t", RowBox[{RowBox[{RowBox[{"Switch", 
                          "[", RowBox[{"#", ",", "\n", "\t\t\t\t\t\t\t", 
                          "\"MaxIterations\"", ",", "\n", "\t\t\t\t\t\t\t\t", 
                          RowBox[{"If", "[", RowBox[{RowBox[{RowBox[
                          {"IntegerQ", "@", "#2"}], "&&", RowBox[{"Positive", 
                          "[", "#2", "]"}]}], ",", "\n", 
                          "\t\t\t\t\t\t\t\t\t", RowBox[{"#", "\[Rule]", 
                          "#2"}], ",", "\n", "\t\t\t\t\t\t\t\t\t", 
                          "Nothing"}], "\n", "\t\t\t\t\t\t\t\t\t", "]"}], 
                          ",", "\n", "\t\t\t\t\t\t\t", "\"BasisSize\"", ",", 
                          "\n", "\t\t\t\t\t\t\t\t", RowBox[{"If", "[", RowBox[
                          {RowBox[{RowBox[{"IntegerQ", "@", "#2"}], "&&", 
                          RowBox[{"Positive", "[", "#2", "]"}]}], ",", "\n", 
                          "\t\t\t\t\t\t\t\t\t", RowBox[{"#", "\[Rule]", 
                          "#2"}], ",", "\n", "\t\t\t\t\t\t\t\t\t", 
                          "Nothing"}], "\n", "\t\t\t\t\t\t\t\t\t", "]"}], 
                          ",", "\n", "\t\t\t\t\t\t\t", "\"Tolerance\"", ",", 
                          "\n", "\t\t\t\t\t\t\t\t", RowBox[{"If", "[", RowBox[
                          {RowBox[{RowBox[{"NumericQ", "@", "#2"}], "&&", 
                          RowBox[{"Positive", "[", "#2", "]"}]}], ",", "\n", 
                          "\t\t\t\t\t\t\t\t\t", RowBox[{"#", "\[Rule]", 
                          "#2"}], ",", "\n", "\t\t\t\t\t\t\t\t\t", 
                          "Nothing"}], "\n", "\t\t\t\t\t\t\t\t\t", "]"}], 
                          ",", "\n", "\t\t\t\t\t\t\t", "\"StartingVector\"", 
                          ",", "\n", "\t\t\t\t\t\t\t\t", RowBox[{"If", "[", 
                          RowBox[{RowBox[{"VectorQ", "[", RowBox[{"#2", ",", 
                          " ", "Internal`RealValuedNumericQ"}], "]"}], ",", 
                          "\n", "\t\t\t\t\t\t\t\t\t", RowBox[{"#", "\[Rule]", 
                          "#2"}], ",", "\n", "\t\t\t\t\t\t\t\t\t", 
                          "Nothing"}], "\n", "\t\t\t\t\t\t\t\t\t", "]"}]}], 
                          "\n", "\t\t\t\t\t\t\t", "]"}], "&"}], ",", " ", 
                          "\n", "\t\t\t\t\t\t", RowBox[{"AssociationThread", 
                          "[", "\n", "\t\t\t\t\t\t\t", RowBox[{RowBox[{"{", 
                          "\n", "\t\t\t\t\t\t\t\t", RowBox[{
                          "\"MaxIterations\"", ",", "\n", "\t\t\t\t\t\t\t\t", 
                          "\"BasisSize\"", ",", "\n", "\t\t\t\t\t\t\t\t", 
                          "\"Tolerance\"", ",", "\n", "\t\t\t\t\t\t\t\t", 
                          "\"StartingVector\""}], "\n", "\t\t\t\t\t\t\t\t", 
                          "}"}], ",", "\n", "\t\t\t\t\t\t\t", RowBox[
                          {"OptionValue", "[", "\n", "\t\t\t\t\t\t\t\t", 
                          RowBox[{"WFEigensystem", ",", " ", "ops", ",", 
                          "\n", "\t\t\t\t\t\t\t\t", RowBox[{"{", "\n", 
                          "\t\t\t\t\t\t\t\t\t", RowBox[{
                          "\"ArnoldiIterations\"", ",", " ", "\n", 
                          "\t\t\t\t\t\t\t\t\t", "\"ArnoldiBasisSize\"", ",", 
                          " ", "\n", "\t\t\t\t\t\t\t\t\t", 
                          "\"ArnoldiTolerance\"", ",", "\n", 
                          "\t\t\t\t\t\t\t\t\t", 
                          "\"ArnoldiGuessWavefunction\""}], "\n", 
                          "\t\t\t\t\t\t\t\t\t", "}"}]}], "\n", 
                          "\t\t\t\t\t\t\t\t", "]"}]}], "\n", 
                          "\t\t\t\t\t\t\t", "]"}]}], "\n", "\t\t\t\t\t\t", 
                          "]"}]}], ";", "\n", "\t\t\t\t", RowBox[{"Flatten", 
                          "@", RowBox[{"{", RowBox[{"\"Arnoldi\"", ",", " ", 
                          "arnops"}], "}"}]}]}], ",", "\n", "\t\t\t\t", 
                          "Automatic"}], "\n", "\t\t\t\t", "]"}]}]}], "\n", 
                    "\t\t", "]"}]}]], "CodeInput"]}, Open]], 
           Cell[CellGroupData[{Cell["\[LeftCeiling]getWFEigSys\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                {RowBox[{RowBox[{RowBox[{"getWFEigSys", "[", RowBox[
                        {"solver_", ",", " ", "ham_", ",", " ", "wfnSel_", 
                         ",", " ", "realify_", ",", " ", "arnops_", ",", " ", 
                         "ops_"}], "]"}], ":=", "\n", "\t", RowBox[
                      {RowBox[{"If", "[", RowBox[{RowBox[{"TrueQ", "[", 
                          "realify", "]"}], ",", " ", "Re", ",", " ", 
                          "Identity"}], "]"}], "@", "\n", "\t\t", RowBox[
                        {"solver", "[", "\n", "\t\t\t", RowBox[{"ham", ",", 
                          "\n", "\t\t\t", "wfnSel", ",", "\n", "\t\t\t", 
                          RowBox[{"Sequence", "@@", RowBox[{"Flatten", "@", 
                          RowBox[{"{", "\n", "\t\t\t\t", RowBox[{RowBox[
                          {"Method", "\[Rule]", "\n", "\t\t\t\t\t", RowBox[
                          {"getWFEigSysMethod", "[", RowBox[{RowBox[{"Head", 
                          "@", "ham"}], ",", " ", "ops", ",", " ", 
                          "arnops"}], "]"}]}], ",", "\n", "\t\t\t\t", RowBox[
                          {"FilterRules", "[", "\n", "\t\t\t\t\t", RowBox[
                          {RowBox[{"FilterRules", "[", RowBox[{"ops", ",", 
                          "\n", "\t", "\t\t\t\t\t", RowBox[{"Alternatives", 
                          "@@", "\n", "\t", "\t\t\t\t\t\t", RowBox[{"Keys", 
                          "@", RowBox[{"Options", "@", "solver"}]}]}]}], 
                          "\n", "\t", "\t\t\t\t\t", "]"}], ",", "\n", "\t", 
                          "\t\t\t\t", RowBox[{"Except", "[", "Method", 
                          "]"}]}], "\n", "\t\t\t\t\t", "]"}]}], "\n", 
                          "\t\t\t\t", "}"}]}]}]}], "\n", "\t\t\t", "]"}]}]}], 
                   ";"}], "\n", RowBox[{"getWFEigSys", "~", "SetAttributes", 
                   "~", "HoldAll"}]}], "CodeInput"]}, Open]], 
           Cell[CellGroupData[
             {Cell["\[LeftCeiling]getHamAdjPars\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                RowBox[{RowBox[{"getHamAdjPars", "[", RowBox[{"ham_", ",", 
                      " ", RowBox[{"{", RowBox[{"hamDiag_", ",", " ", 
                          "hamDiagMax_", ",", " ", "rowSums_", ",", " ", 
                          "hamEigMax_"}], "}"}]}], "]"}], ":=", "\n", "\t", 
                  RowBox[{"Module", "[", "\n", "\t\t", RowBox[
                     {RowBox[{"{", "rowBounds", "}"}], ",", "\n", "\t\t", 
                      RowBox[{"(*", "\n", "\t\t", RowBox[{"If", " ", 
                          "things", " ", "are", " ", "pruned", " ", "I", " ", 
                          "want", " ", "the", " ", "maximum", " ", 
                          "possible", " ", "eigenvalue", " ", "to", " ", 
                          "return", " ", "by", " ", RowBox[{"Gerschgorin", 
                          "--"}], "\n", "\t\t\t", "this", " ", "is", " ", 
                          "what", " ", RowBox[{"I", "'"}], "ll", " ", "give", 
                          " ", "for", " ", "all", " ", "the", " ", "pruned", 
                          " ", "positions"}], "\n", "\t\t", "*)"}], "\n", 
                      "\t\t", RowBox[{RowBox[{"hamDiag", "=", RowBox[
                          {"Diagonal", "[", "ham", "]"}]}], ";", "\n", 
                        "\t\t", RowBox[{"hamDiagMax", "=", RowBox[{"Max", 
                          "[", "hamDiag", "]"}]}], ";", "\n", "\t\t", 
                        RowBox[{"rowSums", "=", RowBox[{RowBox[{"Total", 
                          "@*", "Abs"}], "/@", "ham"}]}], ";", "\n", "\t\t", 
                        RowBox[{"rowBounds", "=", RowBox[{RowBox[{"2", "*", 
                          RowBox[{"Abs", "[", "hamDiag", "]"}]}], "-", 
                          "rowSums"}]}], ";", "\n", "\t\t", RowBox[
                         {"hamEigMax", "=", RowBox[{RowBox[{"Max", "@", 
                          "hamDiag"}], "+", RowBox[{"Max", "@", RowBox[
                          {"Abs", "@", "rowBounds"}]}]}]}], ";"}]}], "\n", 
                    "\t\t", "]"}]}]], "CodeInput"]}, Open]], 
           Cell[CellGroupData[{Cell["\[LeftCeiling]adjustHam\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                {RowBox[{RowBox[{RowBox[{"adjustHam", "[", RowBox[{"ham_", 
                         ",", " ", "shift_", ",", " ", "hamDiag_", ",", " ", 
                         "hamDiagMax_", ",", " ", "rowSums_", ",", " ", 
                         RowBox[{"{", "rowShift_", "}"}]}], "]"}], ":=", 
                     "\n", "\t", RowBox[{"Module", "[", "\n", "\t\t", 
                       RowBox[{RowBox[{"{", "\n", "\t\t\t", RowBox[{"rowMin", 
                          ",", "\n", "\t\t\t", "rowBounds"}], "\n", "\t\t\t", 
                          "}"}], ",", "\n", "\t\t", RowBox[{"(*", "\n", 
                          "\t\t", RowBox[{RowBox[{"If", " ", "there", " ", 
                          "is", " ", "no", " ", "shift"}], ",", " ", RowBox[
                          {"I", " ", "force", " ", "all", " ", "eigenvalues", 
                          " ", "to", " ", "be", " ", "negative", " ", "then", 
                          " ", "pick", " ", "the", " ", "largest", " ", 
                          RowBox[{"ones", ".", " ", "This"}], " ", "is", " ", 
                          "faster", " ", "with", " ", "the", " ", "\n", 
                          "\t\t", "Arnoldi", " ", RowBox[{"algorithm", ".", 
                          "\n", "\t\t", "\n", "\t\t", "By"}], " ", RowBox[
                          {"Gerschgorin", "'"}], "s", " ", "theorm", " ", 
                          "this", " ", "means", " ", "I", " ", "need", " ", 
                          "to", " ", "push", " ", "the", " ", "diagonal", 
                          " ", "large", " ", "enough", "\n", "\t\t\t", 
                          "such", " ", "that", " ", "all", " ", "of", " ", 
                          "the", " ", "eigenvalue", " ", "disks", " ", "are", 
                          " ", "wholly", " ", "negative", "\n", "\t\t", "\n", 
                          "\t\t", "If", " ", "there", " ", "is", " ", "a", 
                          " ", "shift"}], ",", " ", RowBox[{"I", " ", 
                          "shift", " ", "so", " ", "that", " ", "the", " ", 
                          "minimum", " ", RowBox[{"abs", ".", " ", "value"}], 
                          " ", "eigenvalue", " ", "may", " ", "be", " ", 
                          "expected", " ", "to", " ", "be", " ", "around", 
                          " ", "there"}]}], " ", "\n", "\t\t", "*)"}], "\n", 
                         "\t\t", RowBox[{RowBox[{"If", "[", RowBox[{RowBox[
                          {"shift", "===", "Automatic"}], ",", "\n", 
                          "\t\t\t", RowBox[{RowBox[{"hamDiag", "-=", 
                          "hamDiagMax"}], ";", "\n", "\t\t\t", RowBox[{"(*", 
                          " ", RowBox[{"row", " ", "sums", " ", "computed", 
                          " ", "previously"}], " ", "*)"}], "\n", "\t\t\t", 
                          RowBox[{"rowBounds", "=", RowBox[{RowBox[{"2", "*", 
                          RowBox[{"Abs", "[", "hamDiag", "]"}]}], "-", 
                          "rowSums"}]}], ";", "\n", "\t\t\t", RowBox[
                          {"rowMin", "=", RowBox[{"Min", "@", 
                          "rowBounds"}]}], ";", " ", RowBox[{"(*", " ", 
                          RowBox[{"Pick", " ", "largest", " ", 
                          "displacement", " ", "in", " ", "negative", " ", 
                          "sense"}], " ", "*)"}], "\n", "\t\t\t", RowBox[
                          {"rowShift", "=", RowBox[{"-", RowBox[{"(", RowBox[
                          {RowBox[{"2", "*", RowBox[{"Abs", "[", "rowMin", 
                          "]"}]}], "+", "hamDiagMax"}], ")"}]}]}], ";"}], 
                          " ", RowBox[{"(*", " ", RowBox[{"Shift", " ", "by", 
                          " ", "twice", " ", "this", " ", "to", " ", 
                          "wholly", " ", "avoid", " ", "zero"}], "*)"}], ",", 
                          "\n", "\t\t\t", RowBox[{"rowShift", "=", RowBox[
                          {"-", RowBox[{"(", RowBox[{"shift", "+", RowBox[
                          {"Min", "[", "hamDiag", "]"}]}], ")"}]}]}]}], "\n", 
                          "\t\t\t", "]"}], ";", "\n", "\t\t", RowBox[{"ham", 
                          "=", RowBox[{"ham", "+", RowBox[{"SparseArray", 
                          "[", RowBox[{RowBox[{RowBox[{"Band", "[", RowBox[
                          {"{", RowBox[{"1", ",", "1"}], "}"}], "]"}], 
                          "\[Rule]", "rowShift"}], ",", " ", RowBox[{"{", 
                          RowBox[{RowBox[{"Length", "@", "ham"}], ",", " ", 
                          RowBox[{"Length", "@", "ham"}]}], "}"}]}], 
                          "]"}]}]}]}]}], "\n", "\t\t", "]"}]}], ";"}], "\n", 
                 RowBox[{RowBox[{"adjustHam", "~", "SetAttributes", "~", 
                     "HoldAll"}], ";"}]}], "CodeInput"]}, Open]], 
           Cell[CellGroupData[{Cell["\[LeftCeiling]reshiftWfns\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                {RowBox[{RowBox[{RowBox[{"reshiftWfns", "[", RowBox[{"wfns_", 
                         ",", " ", "rowShift_"}], "]"}], ":=", "\n", "\t", 
                     RowBox[{"If", "[", RowBox[{RowBox[{"TrueQ", "[", RowBox[
                          {"NumericQ", "@", "rowShift"}], "]"}], ",", "\n", 
                         "\t\t", RowBox[{RowBox[{RowBox[{"wfns", "[", RowBox[
                          {"[", "1", "]"}], "]"}], "=", "\n", "\t\t\t", 
                          RowBox[{RowBox[{"wfns", "[", RowBox[{"[", "1", 
                          "]"}], "]"}], "-", "rowShift"}]}], ";"}]}], "\n", 
                       "\t\t", "]"}]}], ";"}], "\n", RowBox[{"reshiftWfns", 
                   "~", "SetAttributes", "~", "HoldFirst"}]}], "CodeInput"]}, 
             Open]], Cell[CellGroupData[
             {Cell["\[LeftCeiling]reshiftEngs\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                {RowBox[{RowBox[{RowBox[{"reshiftEngs", "[", RowBox[{"engs_", 
                         ",", " ", "rowShift_"}], "]"}], ":=", "\n", "\t", 
                     RowBox[{"If", "[", RowBox[{RowBox[{"TrueQ", "[", RowBox[
                          {"NumericQ", "@", "rowShift"}], "]"}], ",", "\n", 
                         "\t\t\t", RowBox[{"engs", "-", "rowShift"}], ",", 
                         "\n", "\t\t\t", "engs"}], "\n", "\t\t\t", "]"}]}], 
                   ";"}], "\n", RowBox[{"reshiftEngs", "~", "SetAttributes", 
                   "~", "HoldFirst"}]}], "CodeInput"]}, Open]], 
           Cell[CellGroupData[{Cell["\[LeftCeiling]rephaseWfns\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                {RowBox[{RowBox[{RowBox[{"rephaseWfns", "[", RowBox[{"wfns_", 
                         ",", " ", "True"}], "]"}], ":=", "\n", "\t", 
                     RowBox[{"Module", "[", RowBox[{RowBox[{"{", "phase", 
                          "}"}], ",", "\n", "\t\t", RowBox[{RowBox[{"phase", 
                          "=", RowBox[{"Sign", "@", RowBox[{"wfns", "[", 
                          RowBox[{"[", RowBox[{"2", ",", " ", "1"}], "]"}], 
                          "]"}]}]}], ";", "\n", "\t\t", RowBox[{"wfns", "=", 
                          RowBox[{"{", RowBox[{RowBox[{"wfns", "[", RowBox[
                          {"[", "1", "]"}], "]"}], ",", " ", RowBox[{RowBox[
                          {RowBox[{"phase", "*", "#"}], "&"}], "/@", RowBox[
                          {"wfns", "[", RowBox[{"[", "2", "]"}], "]"}]}]}], 
                          "}"}]}]}]}], "\n", "\t\t", "]"}]}], ";"}], "\n", 
                 RowBox[{RowBox[{RowBox[{"rephaseWfns", "[", RowBox[{"wfns_", 
                         ",", " ", "_"}], "]"}], ":=", "\n", "\t", RowBox[
                      {"Module", "[", RowBox[{RowBox[{"{", "phase", "}"}], 
                         ",", "\n", "\t\t", RowBox[{RowBox[{"phase", "=", 
                          RowBox[{"If", "[", RowBox[{RowBox[{RowBox[{"Total", 
                          "@", RowBox[{"wfns", "[", RowBox[{"[", RowBox[{"2", 
                          ",", " ", "1"}], "]"}], "]"}]}], "<", "0"}], ",", 
                          " ", RowBox[{"-", "1"}], ",", " ", "1"}], "]"}]}], 
                          ";", "\n", "\t\t", RowBox[{"wfns", "=", RowBox[
                          {"{", RowBox[{RowBox[{"wfns", "[", RowBox[{"[", 
                          "1", "]"}], "]"}], ",", " ", RowBox[{"phase", "*", 
                          RowBox[{"wfns", "[", RowBox[{"[", "2", "]"}], 
                          "]"}]}]}], "}"}]}]}]}], "\n", "\t\t", "]"}]}], 
                   ";"}], "\n", RowBox[{"rephaseWfns", "~", "SetAttributes", 
                   "~", "HoldFirst"}]}], "CodeInput"]}, Open]], 
           Cell[CellGroupData[
             {Cell["\[LeftCeiling]revertPruning\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                {RowBox[{RowBox[{RowBox[{"revertPruning", "[", RowBox[
                        {"wfns_", ",", " ", "wfnSel_", ",", " ", 
                         "hamEigMax_", ",", " ", "prunePos_", ",", " ", 
                         "origLen_"}], "]"}], ":=", "\n", "\t", RowBox[
                      {"(", "\n", "\t\t", RowBox[{RowBox[{"If", "[", RowBox[
                          {RowBox[{"wfnSel", "===", "All"}], ",", "\n", 
                          "\t\t\t", RowBox[{RowBox[{"wfns", "[", RowBox[
                          {"[", "1", "]"}], "]"}], "=", "\n", "\t\t\t\t", 
                          RowBox[{"Join", "[", "\n", "\t\t\t\t\t", RowBox[
                          {RowBox[{"wfns", "[", RowBox[{"[", "1", "]"}], 
                          "]"}], ",", " ", "\n", "\t\t\t\t\t", RowBox[
                          {"ConstantArray", "[", RowBox[{"hamEigMax", ",", 
                          " ", RowBox[{"Length", "@", "prunePos"}]}], 
                          "]"}]}], "\n", "\t\t\t\t\t", "]"}]}]}], "\n", 
                          "\t\t\t", "]"}], ";", "\n", "\t\t", RowBox[
                          {RowBox[{"wfns", "[", RowBox[{"[", "2", "]"}], 
                          "]"}], "=", "\n", "\t\t\t", RowBox[{"Map", "[", 
                          "\n", "\t\t\t\t", RowBox[{RowBox[{RowBox[{RowBox[
                          {"Join", "[", "\n", "\t\t\t\t\t", RowBox[{"#", ",", 
                          " ", "\n", "\t", "\t\t\t\t", RowBox[{
                          "ConstantArray", "[", RowBox[{"0.", ",", " ", 
                          RowBox[{"Length", "@", "prunePos"}]}], "]"}]}], 
                          "\n", "\t", "\t\t\t\t", "]"}], "[", RowBox[{"[", 
                          " ", RowBox[{"getPrunePosOrder", "[", RowBox[
                          {"prunePos", ",", " ", "origLen"}], "]"}], " ", 
                          "]"}], "]"}], "&"}], ",", "\n", "\t\t\t\t", RowBox[
                          {"wfns", "[", RowBox[{"[", "2", "]"}], "]"}]}], 
                          "\n", "\t\t\t\t", "]"}]}]}], "\n", "\t\t\t", 
                       ")"}]}], ";"}], "\n", RowBox[{RowBox[{"revertPruning", 
                     "~", "SetAttributes", "~", "HoldFirst"}], ";"}]}], 
               "CodeInput"]}, Open]], Cell[CellGroupData[
             {Cell["\[LeftCeiling]revertEngPruning\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                {RowBox[{RowBox[{RowBox[{"revertEngPruning", "[", RowBox[
                        {"engs_", ",", " ", "wfnSel_", ",", " ", 
                         "hamEigMax_", ",", " ", "prunePos_"}], "]"}], ":=", 
                     "\n", "\t", RowBox[{"If", "[", RowBox[{RowBox[{"wfnSel", 
                          "===", "All"}], ",", "\n", "\t\t", RowBox[{"engs", 
                          "=", RowBox[{"Join", "[", "\n", "\t\t\t", RowBox[
                          {"engs", ",", " ", "\n", "\t\t\t\t", RowBox[
                          {"ConstantArray", "[", RowBox[{"hamEigMax", ",", 
                          " ", RowBox[{"Length", "@", "prunePos"}]}], 
                          "]"}]}], "\n", "\t\t\t", "]"}]}]}], "\n", "\t\t", 
                       "]"}]}], ";"}], "\n", RowBox[{RowBox[
                    {"revertEngPruning", "~", "SetAttributes", "~", 
                     "HoldFirst"}], ";"}]}], "CodeInput"]}, Open]], 
           Cell[CellGroupData[
             {Cell["\[LeftCeiling]getPrunePosOrder\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                RowBox[{RowBox[{"getPrunePosOrder", "[", RowBox[{"prunePos_", 
                      ",", " ", "origLen_"}], "]"}], ":=", "\n", "\t", 
                  RowBox[{"(*", "\n", "\t\t", RowBox[{"Will", " ", "need", 
                      " ", "to", " ", "reconstruct", " ", "the", " ", 
                      "wavefunctions", " ", "to", " ", "resample", " ", 
                      "the", " ", "grid", " ", "properly", "\n", "\t", "\t", 
                      "The", " ", "first", " ", "entries", " ", "will", " ", 
                      "be", " ", "the", " ", "pruned", " ", RowBox[
                       {"positions", ".", "\n", "\t", "\t", "The"}], " ", 
                      "last", " ", "entries", " ", "will", " ", "be", " ", 
                      RowBox[{"fill", ".", "\n", "\t", "\t", "Need"}], " ", 
                      "to", " ", "resort", " ", "so", " ", "that", " ", 
                      "the", " ", "fill", " ", "is", " ", "in", " ", "the", 
                      " ", "right", " ", RowBox[{"spot", "."}]}], "\n", "\t", 
                    "\t", "*)"}], "\n", "\t", RowBox[{"Ordering", "@", 
                    RowBox[{"Join", "[", RowBox[{RowBox[{"Complement", "[", 
                          RowBox[{RowBox[{"Range", "[", "origLen", "]"}], 
                          ",", " ", "prunePos"}], "]"}], ",", " ", 
                        "prunePos"}], "]"}]}]}]], "CodeInput"]}, Open]], 
           Cell[CellGroupData[
             {Cell["\[LeftCeiling]sortWfnsThings\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                {RowBox[{RowBox[{RowBox[{"sortWfnsThings", "[", "wfns_", 
                       "]"}], ":=", "\n", "\t", RowBox[{"wfns", "=", 
                       RowBox[{"wfns", "[", RowBox[{"[", RowBox[{RowBox[
                          {"{", RowBox[{"1", ",", "2"}], "}"}], ",", " ", 
                          RowBox[{"Ordering", "[", RowBox[{"First", "@", 
                          "wfns"}], "]"}]}], "]"}], "]"}]}]}], ";"}], "\n", 
                 RowBox[{"sortWfnsThings", "~", "SetAttributes", "~", 
                   "HoldFirst"}]}], "CodeInput"]}, Open]], 
           Cell[CellGroupData[
             {Cell["\[LeftCeiling]WFEigensystem\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], 
              Cell["\[LeftCeiling]\n\tI should write something using \
Gerschgorin to reduce initial Hamiltonian size for the first whatever number \
of eigenvalues.\n\[RightFloor]", "Text", Evaluatable -> True], 
              Cell[BoxData[{RowBox[{RowBox[{RowBox[{"Options", "[", 
                       "WFEigensystem", "]"}], "=", "\n", "\t", RowBox[
                      {"Join", "[", "\n", "\t\t", RowBox[{RowBox[{"Options", 
                          "@", "Eigensystem"}], ",", "\n", "\t\t", RowBox[
                          {"{", "\n", "\t\t\t", RowBox[{RowBox[
                          {"\"NumberOfWavefunctions\"", "\[Rule]", 
                          "Automatic"}], ",", "\n", "\t\t\t", RowBox[
                          {"\"CorrectPhase\"", "\[Rule]", "True"}], ",", 
                          "\n", "\t\t\t", RowBox[{"\"NodelessGroundState\"", 
                          "\[Rule]", "False"}], ",", "\n", "\t\t\t", RowBox[
                          {"\"SortEnergies\"", "\[Rule]", "True"}], ",", 
                          "\n", "\t\t\t", RowBox[{
                          "\"WavefunctionEigensolver\"", "\[Rule]", 
                          "Eigensystem"}], ",", "\n", "\t\t\t", RowBox[
                          {"\"PreadjustHamiltonian\"", "\[Rule]", "True"}], 
                          ",", "\n", "\t\t\t", RowBox[
                          {"\"HamiltonianPreprocessor\"", "\[Rule]", 
                          "None"}], ",", "\n", "\t\t\t", RowBox[
                          {"\"RealValued\"", "\[Rule]", "True"}], ",", "\n", 
                          "\t\t\t", RowBox[{"\"ArnoldiIterations\"", 
                          "\[Rule]", "Automatic"}], ",", "\n", "\t\t\t", 
                          RowBox[{"\"ArnoldiBasisSize\"", "\[Rule]", 
                          "Automatic"}], ",", "\n", "\t\t\t", RowBox[
                          {"\"ArnoldiTolerance\"", "\[Rule]", "Automatic"}], 
                          ",", "\n", "\t\t\t", RowBox[
                          {"\"ArnoldiGuessWavefunction\"", "\[Rule]", 
                          "Automatic"}], ",", "\n", "\t\t\t", RowBox[
                          {"\"TargetEigenvalue\"", "\[Rule]", 
                          "Automatic"}]}], "\n", "\t\t\t", "}"}], ",", "\n", 
                         "\t\t", RowBox[{"Options", "[", 
                          "WFPrepareHamiltonian", "]"}]}], "\n", "\t\t", 
                       "]"}]}], ";"}], "\n", RowBox[{RowBox[{RowBox[
                      {"WFEigensystem", "[", RowBox[{"T_", ",", " ", "V_", 
                         ",", " ", RowBox[{"ops", ":", RowBox[
                          {"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
                     "\n", "\t", RowBox[{"Module", "[", "\n", "\t\t", 
                       RowBox[{RowBox[{"{", "\n", "\t\t\t", RowBox[
                          {"useFlags", ",", "\n", "\t\t\t", "ham", ",", "\n", 
                          "\t\t\t", "wfnSel", ",", "\n", "\t\t\t", "hamAdj", 
                          ",", "\n", "\t\t\t", "shift", ",", "\n", "\t\t\t", 
                          "hamDiag", ",", "\n", "\t\t\t", "hamDiagMax", ",", 
                          "\n", "\t\t\t", "rowSums", ",", "\n", "\t\t\t", 
                          "rowBounds", ",", "\n", "\t\t\t", "rowMin", ",", 
                          "\n", "\t\t\t", "rowShift", ",", "\n", "\t\t\t", 
                          "hamEigMax", ",", "\n", "\t\t\t", RowBox[{"nwfs", 
                          "=", RowBox[{"OptionValue", "[", 
                          "\"NumberOfWavefunctions\"", "]"}]}], ",", "\n", 
                          "\t", "\t\t", RowBox[{"sort", "=", RowBox[{RowBox[
                          {"OptionValue", "[", "\"SortEnergies\"", "]"}], 
                          "=!=", "False"}]}], ",", "\n", "\t", "\t\t", 
                          RowBox[{"rephase", "=", RowBox[{RowBox[
                          {"OptionValue", "[", "\"CorrectPhase\"", "]"}], 
                          "=!=", "False"}]}], ",", "\n", "\t\t\t", RowBox[
                          {"prepper", "=", RowBox[{"OptionValue", "[", 
                          "\"HamiltonianPreprocessor\"", "]"}]}], ",", "\n", 
                          "\t\t\t", "wfns", ",", "\n", "\t\t\t", RowBox[
                          {"solver", "=", "\n", "\t\t\t\t", RowBox[
                          {"Replace", "[", RowBox[{RowBox[{"OptionValue", 
                          "[", "\"WavefunctionEigensolver\"", "]"}], ",", 
                          "\n", "\t\t\t\t\t", RowBox[{"Eigenvectors", 
                          "\[Rule]", "Eigensystem"}]}], "\n", "\t\t\t\t\t", 
                          "]"}]}], ",", "\n", "\t\t\t", "origLen", ",", "\n", 
                          "\t\t\t", "prunePos", ",", "\n", "\t\t\t", 
                          "hamPruned", ",", "\n", "\t\t\t", "arnops", ",", 
                          "\n", "\t\t\t", RowBox[{"nodeless", "=", RowBox[
                          {"TrueQ", "@", RowBox[{"OptionValue", "[", 
                          "\"NodelessGroundState\"", "]"}]}]}]}], "\n", 
                          "\t\t\t", "}"}], ",", "\n", "\t\t", RowBox[
                          {RowBox[{"Internal`WithLocalSettings", "[", "\n", 
                          "\t\t\t", RowBox[{RowBox[{RowBox[{"useFlags", "=", 
                          "\n", "\t\t\t\t", RowBox[{"Quiet", "@", "\n", 
                          "\t\t\t\t\t", RowBox[{"Fold", "[", "\n", 
                          "\t\t\t\t\t\t", RowBox[{"Lookup", ",", "\n", "\t", 
                          "\t\t\t\t\t", RowBox[{"SystemOptions", "[", RowBox[
                          {"\"LinearAlgebraOptions\"", "->", 
                          "\"UseMatrixPropertyFlags\""}], "]"}], ",", "\n", 
                          "\t", "\t\t\t\t\t", RowBox[{"{", RowBox[
                          {"\"LinearAlgebraOptions\"", ",", " ", 
                          "\"UseMatrixPropertyFlags\""}], "}"}]}], "\n", 
                          "\t", "\t\t\t\t\t", "]"}]}]}], ";", "\n", "\t\t\t", 
                          RowBox[{"Quiet", "@", RowBox[{"SetSystemOptions", 
                          "[", RowBox[{"\"LinearAlgebraOptions\"", "->", 
                          RowBox[{"\"UseMatrixPropertyFlags\"", "\[Rule]", 
                          "True"}]}], "]"}]}]}], ",", "\n", "\t\t\t", RowBox[
                          {RowBox[{RowBox[{"{", RowBox[{"ham", ",", " ", 
                          RowBox[{"{", RowBox[{"prunePos", ",", " ", 
                          "origLen"}], "}"}]}], "}"}], "=", "\n", "\t\t\t\t", 
                          RowBox[{"WFPrepareHamiltonian", "[", "\n", 
                          "\t\t\t\t\t", RowBox[{"T", ",", " ", "V", ",", " ", 
                          "\n", "\t", "\t\t\t\t", RowBox[{"FilterRules", "[", 
                          RowBox[{RowBox[{"{", "ops", "}"}], ",", " ", RowBox[
                          {"Options", "[", "WFPrepareHamiltonian", "]"}]}], 
                          "]"}]}], "\n", "\t\t\t\t\t", "]"}]}], ";", "\n", 
                          "\t\t\t", RowBox[{"shift", "=", RowBox[{"Replace", 
                          "[", RowBox[{RowBox[{"OptionValue", "[", 
                          "\"TargetEigenvalue\"", "]"}], ",", " ", RowBox[
                          {RowBox[{"Except", "[", RowBox[{"_", "?", 
                          "NumericQ"}], "]"}], "\[Rule]", "Automatic"}]}], 
                          "]"}]}], ";", "\n", "\t\t\t", RowBox[{"hamPruned", 
                          "=", RowBox[{RowBox[{"Length", "@", "prunePos"}], 
                          ">", "0"}]}], ";", "\n", "\t\t\t", RowBox[
                          {"wfnSel", "=", "\n", "\t\t\t\t", RowBox[
                          {"getWFSel", "[", RowBox[{"nwfs", ",", " ", RowBox[
                          {"Length", "@", "ham"}], ",", " ", RowBox[{"Head", 
                          "@", "ham"}], ",", " ", "solver"}], "]"}]}], ";", 
                          "\n", "\t\t\t", RowBox[{"hamAdj", "=", RowBox[
                          {RowBox[{RowBox[{"Length", "@", RowBox[{"{", 
                          "wfnSel", "}"}]}], ">", "0"}], "&&", RowBox[
                          {"TrueQ", "@", RowBox[{"OptionValue", "[", 
                          "\"PreadjustHamiltonian\"", "]"}]}]}]}], ";", "\n", 
                          "\t\t\t", RowBox[{"If", "[", RowBox[{RowBox[
                          {"hamAdj", "&&", RowBox[{"shift", "===", 
                          "Automatic"}]}], ",", " ", RowBox[{"wfnSel", "=", 
                          RowBox[{"-", "wfnSel"}]}]}], "]"}], ";", "\n", 
                          "\t\t\t", RowBox[{"If", "[", RowBox[{RowBox[
                          {"hamAdj", "||", "hamPruned"}], ",", "\n", 
                          "\t\t\t\t", RowBox[{RowBox[{"getHamAdjPars", "[", 
                          RowBox[{"ham", ",", " ", "\n", "\t\t\t\t\t", RowBox[
                          {"{", RowBox[{"hamDiag", ",", " ", "hamDiagMax", 
                          ",", " ", "rowSums", ",", " ", "hamEigMax"}], 
                          "}"}]}], "\n", "\t\t\t\t\t", "]"}], ";"}]}], "\n", 
                          "\t\t\t\t", "]"}], ";", "\n", "\t\t\t", RowBox[
                          {"If", "[", RowBox[{"hamAdj", ",", " ", "\n", 
                          "\t\t\t\t", RowBox[{"adjustHam", "[", RowBox[
                          {"ham", ",", " ", "shift", ",", " ", "hamDiag", 
                          ",", " ", "hamDiagMax", ",", " ", "rowSums", ",", 
                          " ", RowBox[{"{", "rowShift", "}"}]}], "]"}]}], 
                          "\n", "\t\t\t\t", "]"}], ";", "\n", "\t\t\t", 
                          RowBox[{"If", "[", RowBox[{RowBox[{"prepper", 
                          "=!=", "None"}], ",", "\n", "\t\t\t\t", RowBox[
                          {"With", "[", RowBox[{RowBox[{"{", RowBox[{"h", 
                          "=", RowBox[{"prepper", "[", "ham", "]"}]}], "}"}], 
                          ",", "\n", "\t\t\t\t\t", RowBox[{"If", "[", RowBox[
                          {RowBox[{RowBox[{"Head", "[", "h", "]"}], "===", 
                          RowBox[{"Head", "[", "ham", "]"}]}], ",", " ", 
                          RowBox[{"ham", "=", "h"}]}], "]"}]}], "\n", 
                          "\t\t\t\t\t", "]"}]}], "\n", "\t\t\t\t", "]"}], 
                          ";", "\n", "\t\t\t", RowBox[{"wfns", "=", "\n", 
                          "\t\t\t\t", RowBox[{"getWFEigSys", "[", RowBox[
                          {"solver", ",", " ", "ham", ",", " ", "wfnSel", 
                          ",", " ", RowBox[{"TrueQ", "[", "\"RealValued\"", 
                          "]"}], ",", " ", "arnops", ",", " ", RowBox[{"{", 
                          "ops", "}"}]}], "]"}]}], ";", "\n", "\t\t\t", 
                          RowBox[{"Which", "[", "\n", "\t\t\t\t", RowBox[
                          {RowBox[{"VectorQ", "[", RowBox[{"wfns", ",", " ", 
                          "Internal`RealValuedNumberQ"}], "]"}], ",", "\n", 
                          "\t\t\t\t\t", RowBox[{"(*", " ", RowBox[{RowBox[
                          {"just", " ", "energies"}], ",", " ", RowBox[{"so", 
                          " ", "just", " ", "return", " ", "them"}]}], " ", 
                          "*)"}], "\n", "\t\t\t\t\t", RowBox[{RowBox[
                          {"reshiftEngs", "[", RowBox[{"wfns", ",", " ", 
                          "rowShift"}], "]"}], ";", "\n", "\t\t\t\t\t", 
                          RowBox[{"If", "[", RowBox[{"hamPruned", ",", "\n", 
                          "\t\t\t\t\t\t", RowBox[{"revertPruning", "[", 
                          RowBox[{"wfns", ",", " ", "wfnSel", ",", " ", 
                          "hamEigMax", ",", " ", "prunePos", ",", " ", 
                          "origLen"}], "]"}]}], "\n", "\t\t\t\t\t\t", "]"}], 
                          ";", "\n", "\t\t\t\t\t", RowBox[{"If", "[", RowBox[
                          {"sort", ",", " ", "\n", "\t\t\t\t\t\t", RowBox[
                          {"sortWfnsThings", "[", "wfns", "]"}]}], "\n", 
                          "\t\t\t\t\t\t", "]"}], ";"}], ",", "\n", 
                          "\t\t\t\t", RowBox[{RowBox[{RowBox[{"Length", "@", 
                          "wfns"}], "\[Equal]", "2"}], "&&", "\n", 
                          "\t\t\t\t\t", RowBox[{"VectorQ", "[", RowBox[
                          {RowBox[{"wfns", "[", RowBox[{"[", "1", "]"}], 
                          "]"}], ",", " ", "Internal`RealValuedNumberQ"}], 
                          "]"}], "&&", "\n", "\t\t\t\t\t", RowBox[{"MatrixQ", 
                          "[", RowBox[{RowBox[{"wfns", "[", RowBox[{"[", "2", 
                          "]"}], "]"}], ",", " ", 
                          "Internal`RealValuedNumberQ"}], "]"}]}], ",", "\n", 
                          "\t\t\t\t\t", RowBox[{"(*", " ", RowBox[{"full", 
                          " ", "eigensystem"}], " ", "*)"}], "\n", 
                          "\t\t\t\t\t", RowBox[{RowBox[{"reshiftWfns", "[", 
                          RowBox[{"wfns", ",", " ", "rowShift"}], "]"}], ";", 
                          "\n", "\t\t\t\t\t", RowBox[{"If", "[", RowBox[
                          {"hamPruned", ",", "\n", "\t\t\t\t\t\t", RowBox[
                          {"revertPruning", "[", RowBox[{"wfns", ",", " ", 
                          "wfnSel", ",", " ", "hamEigMax", ",", " ", 
                          "prunePos", ",", " ", "origLen"}], "]"}]}], "\n", 
                          "\t\t\t\t\t\t", "]"}], ";", "\n", "\t\t\t\t\t", 
                          RowBox[{"If", "[", RowBox[{"sort", ",", " ", "\n", 
                          "\t\t\t\t\t\t", RowBox[{"sortWfnsThings", "[", 
                          "wfns", "]"}]}], "\n", "\t\t\t\t\t\t", "]"}], ";", 
                          "\n", "\t\t\t\t\t", RowBox[{"If", "[", RowBox[
                          {"rephase", ",", "\n", "\t\t\t\t\t\t", RowBox[
                          {"rephaseWfns", "[", RowBox[{"wfns", ",", " ", 
                          "nodeless"}], "]"}]}], "\n", "\t\t\t\t\t\t", "]"}], 
                          ";"}], ",", "\n", "\t\t\t\t", "True", ",", "\n", 
                          "\t\t\t\t\t", "Null"}], "\n", "\t\t\t\t", "]"}]}], 
                          ",", "\n", "\t\t\t", RowBox[{"Quiet", "@", RowBox[
                          {"SetSystemOptions", "[", RowBox[{
                          "\"LinearAlgebraOptions\"", "->", RowBox[
                          {"\"UseMatrixPropertyFlags\"", "\[Rule]", 
                          "useFlags"}]}], "]"}]}]}], "\n", "\t\t\t", "]"}], 
                          ";", "\n", "\t\t", "wfns"}]}], "\n", "\t\t", 
                       "]"}]}], ";"}]}], "CodeInput"]}, Open]]}, Open]]}, 
       Open]], Cell[CellGroupData[
       {Cell["\[LeftCeiling]WavefunctionNormalize\[RightFloor]", 
         "CodeSubsection", Evaluatable -> True], 
        Cell[BoxData[{RowBox[{RowBox[{RowBox[{"WavefunctionNormalize", "[", 
                 "wfs_", "]"}], ":=", "\n", "\t", RowBox[{"wfs", "/", 
                 RowBox[{"Map", "[", RowBox[{"Norm", ",", " ", "wfs"}], 
                   "]"}]}]}], ";"}], "\n", RowBox[
            {RowBox[{RowBox[{"WFNormalize", "[", "c_WavefunctionsObject", 
                 "]"}], ":=", "\n", "\t", RowBox[{"MapAt", "[", 
                 RowBox[{"WavefunctionNormalize", ",", " ", "c", ",", " ", 
                   "\"Wavefunctions\""}], "]"}]}], ";"}]}], "CodeInput"]}, 
       Open]], Cell[CellGroupData[
       {Cell["\[LeftCeiling]NormalizedQ\[RightFloor]", "CodeSubsection", 
         Evaluatable -> True], Cell[BoxData[RowBox[
           {RowBox[{RowBox[{"WFNormalizedQ", "[", "c_WavefunctionsObject", 
                "]"}], ":=", "\n", "\t", RowBox[{"AllTrue", "[", 
                RowBox[{RowBox[{"Norm", "/@", RowBox[{"c", "[", 
                      "\"Wavefunctions\"", "]"}]}], ",", " ", RowBox[
                   {RowBox[{"#", "\[Equal]", "1"}], "&"}]}], "]"}]}], ";"}]], 
         "CodeInput"]}, Open]], Cell[CellGroupData[
       {Cell["\[LeftCeiling]WavefunctionsProduct\[RightFloor]", 
         "CodeSubsection", Evaluatable -> True], 
        Cell[BoxData[RowBox[{RowBox[{"WFProduct", "[", "\n", "\t", 
              RowBox[{"wfns1_WavefunctionsObject", ",", "\n", "\t", 
                "wfnsother__WavefunctionsObject", ",", "\n", "\t", 
                RowBox[{"n", ":", RowBox[{RowBox[{"_Integer", "?", 
                      "Positive"}], "|", "All", "|", "Automatic"}], ":", 
                  "Automatic"}]}], "\n", "\t", "]"}], ":=", "\n", "\t", 
            RowBox[{"Module", "[", "\n", "\t\t", RowBox[{RowBox[{"{", "\n", 
                  "\t\t\t", RowBox[{"numCombo", ",", "\n", "\t\t\t", 
                    RowBox[{"energies", "=", RowBox[{RowBox[{RowBox[{"#", 
                          "[", "\"Energies\"", "]"}], "&"}], "/@", RowBox[
                         {"{", RowBox[{"wfns1", ",", "  ", "wfnsother"}], 
                          "}"}]}]}], ",", "\n", "\t\t\t", RowBox[{"wfns", 
                      "=", RowBox[{RowBox[{RowBox[{"#", "[", 
                          "\"Wavefunctions\"", "]"}], "&"}], "/@", RowBox[
                         {"{", RowBox[{"wfns1", ",", " ", "wfnsother"}], 
                          "}"}]}]}], ",", "\n", "\t\t\t", "wavefunctions", 
                    ",", "\n", "\t\t\t", "indices"}], "\n", "\t\t\t", "}"}], 
                ",", "\n", "\t\t", RowBox[{RowBox[{"numCombo", "=", "\n", 
                    "\t\t\t", RowBox[{"Replace", "[", "\n", "\t\t\t\t", 
                      RowBox[{"n", ",", " ", "\n", "\t\t\t\t", RowBox[
                         {"{", "\n", "\t\t\t\t\t", RowBox[{RowBox[{"All", 
                          ":>", "\n", "\t\t\t\t\t\t", RowBox[{"Apply", "[", 
                          RowBox[{"Times", ",", " ", RowBox[{"Length", "/@", 
                          "energies"}]}], "]"}]}], ",", "\n", "\t\t\t\t\t", 
                          RowBox[{RowBox[{"i_Integer", "?", "Positive"}], 
                          ":>", "\n", "\t\t\t\t\t\t", RowBox[{"Min", "@", 
                          RowBox[{"{", RowBox[{"i", ",", " ", RowBox[
                          {"Apply", "[", RowBox[{"Times", ",", " ", RowBox[
                          {"Length", "/@", "energies"}]}], "]"}]}], 
                          "}"}]}]}], ",", "\n", "\t\t\t\t\t", RowBox[
                          {"Automatic", ":>", "\n", "\t\t\t\t\t\t", RowBox[
                          {"Min", "@", RowBox[{"{", RowBox[{"50", ",", " ", 
                          RowBox[{"Apply", "[", RowBox[{"Times", ",", " ", 
                          RowBox[{"Length", "/@", "energies"}]}], "]"}]}], 
                          "}"}]}]}]}], "\n", "\t\t\t\t\t", "}"}]}], "\n", 
                      "\t\t\t\t", "]"}]}], ";", "\n", "\t\t", RowBox[
                   {RowBox[{"{", RowBox[{"indices", ",", " ", "energies"}], 
                      "}"}], "=", RowBox[{"ChemUtilsProductEnergies", "[", 
                      RowBox[{"energies", ",", " ", "numCombo"}], "]"}]}], 
                  ";", "\n", "\t\t", RowBox[{"wavefunctions", "=", "\n", 
                    "\t\t\t", RowBox[{"Map", "[", "\n", "\t\t\t\t", 
                      RowBox[{RowBox[{RowBox[{"GFKroneckerProduct", "@@", 
                          RowBox[{"Extract", "[", RowBox[{"wfns", ",", " ", 
                          RowBox[{"MapIndexed", "[", RowBox[{RowBox[{RowBox[
                          {"{", RowBox[{RowBox[{"#2", "[", RowBox[{"[", "1", 
                          "]"}], "]"}], ",", " ", "#"}], "}"}], "&"}], ",", 
                          " ", "#"}], "]"}]}], "]"}]}], "&"}], ",", " ", 
                        "\n", "\t\t\t\t", "indices"}], "\n", "\t\t\t\t", 
                      "]"}]}], ";", "\n", "\t\t", RowBox[
                   {"WavefunctionsObject", "@", "\n", "\t\t\t", RowBox[
                     {"<|", "\n", "\t\t\t\t", RowBox[{RowBox[{"\"Energies\"", 
                          "\[Rule]", "energies"}], ",", "\n", "\t\t\t\t", 
                        RowBox[{"\"Wavefunctions\"", "\[Rule]", 
                          "wavefunctions"}]}], "\n", "\t\t\t\t", 
                      "|>"}]}]}]}], "\n", "\t\t", "]"}]}]], "CodeInput"]}, 
       Open]], Cell[CellGroupData[
       {Cell["\[LeftCeiling]State Selections\[RightFloor]", "CodeSubsection", 
         Evaluatable -> True], Cell[CellGroupData[
          {Cell["\[LeftCeiling]pullOpVals\[RightFloor]", 
            "CodeSubsubsubsection", Evaluatable -> True], 
           Cell[BoxData[RowBox[{RowBox[{"pullOpVals", "[", RowBox[{"dims_", 
                   ",", " ", "res_"}], "]"}], ":=", "\n", "\t", RowBox[
                {"With", "[", RowBox[{RowBox[{"{", RowBox[{RowBox[{"n", "=", 
                         RowBox[{"TakeWhile", "[", RowBox[{"dims", ",", " ", 
                          RowBox[{RowBox[{"#", "===", "1"}], "&"}]}], 
                          "]"}]}], ",", " ", RowBox[{"d2", "=", RowBox[
                          {"Dimensions", "[", "res", "]"}]}]}], "}"}], ",", 
                   "\n", "\t\t", RowBox[{"If", "[", RowBox[{RowBox[
                        {RowBox[{RowBox[{"Length", "@", "n"}], ">", "0"}], 
                         "&&", RowBox[{RowBox[{"Length", "[", "n", "]"}], 
                          "<=", RowBox[{"Length", "[", "d2", "]"}]}]}], ",", 
                       "\n", "\t\t\t", RowBox[{"Part", "[", RowBox[{"res", 
                          ",", " ", RowBox[{"Sequence", "@@", "n"}]}], "]"}], 
                       ",", "\n", "\t\t\t", "res"}], "\n", "\t\t\t", "]"}]}], 
                 "\n", "\t\t", "]"}]}]], "CodeInput"]}, Open]], 
        Cell[CellGroupData[
          {Cell["\[LeftCeiling]operatorMatElCalc\[RightFloor]", 
            "CodeSubsubsubsection", Evaluatable -> True], 
           Cell["\[LeftCeiling]\n\toperatorMatElCalcInner will always return \
a list?\n\[RightFloor]", "Text", Evaluatable -> True], 
           Cell[BoxData[RowBox[{RowBox[{"operatorMatElCalc", "[", 
                 RowBox[{"wfl_", ",", " ", "wfr_", ",", " ", "exfn_", ",", 
                   " ", "mul_", ",", " ", "grid_", ",", " ", "asrs_", ",", 
                   " ", "ash_"}], "]"}], ":=", "\n", "\t", RowBox[
                {"Module", "[", "\n", "\t\t", RowBox[{RowBox[{"{", "\t\t", 
                     "\n", "\t\t\t", RowBox[{RowBox[{"m", "=", RowBox[
                          {"If", "[", RowBox[{RowBox[{RowBox[{"ListQ", "@", 
                          "exfn"}], "&&", RowBox[{"!", RowBox[{"ListQ", "@", 
                          "mul"}]}]}], ",", " ", RowBox[{"ConstantArray", 
                          "[", RowBox[{"mul", ",", " ", RowBox[{"Length", 
                          "@", "exfn"}]}], "]"}], ",", " ", "mul"}], "]"}]}], 
                       ",", "\n", "\t\t\t", "res"}], "\n", "\t\t\t", "}"}], 
                   ",", "\n", "\t\t", RowBox[{"(*", " ", RowBox[{"need", " ", 
                       "another", " ", "thread", " ", "in", " ", "case", " ", 
                       "multiple", " ", "specs", " ", "were", " ", 
                       "provided", " ", "for", " ", "a", " ", "single", " ", 
                       "function"}], " ", "*)"}], "\n", "\t\t", RowBox[
                    {RowBox[{"res", "=", "\n", "\t\t\t", RowBox[{"MapThread", 
                         "[", "\n", "\t\t\t\t", RowBox[{"(*", " ", RowBox[
                          {"Thread", " ", "over", " ", "the", " ", 
                          "operators", " ", "and", " ", "multiplicativity"}], 
                          " ", "*)"}], "\n", "\t", "\t\t\t", RowBox[
                          {RowBox[{RowBox[{"pullOpVals", "[", "\n", "\t", 
                          "\t\t\t\t", RowBox[{RowBox[{"Dimensions", "[", "#", 
                          "]"}], ",", "\n", "\t", "\t\t\t\t", RowBox[
                          {"operatorMatElCalcInner", "[", RowBox[{"#", ",", 
                          " ", "#2", ",", " ", "exfn", ",", " ", "m", ",", 
                          " ", "grid", ",", " ", "asrs", ",", " ", "ash"}], 
                          "]"}]}], "\n", "\t", "\t\t\t\t", "]"}], "&"}], ",", 
                          "\n", "\t", "\t\t\t", RowBox[{"{", RowBox[{"wfl", 
                          ",", " ", "wfr"}], "}"}]}], "\n", "\t", "\t\t\t", 
                         "]"}]}], ";", "\n", "\t\t", RowBox[{"If", "[", 
                       RowBox[{RowBox[{RowBox[{"Length", "[", "wfl", "]"}], 
                          "\[Equal]", "1"}], ",", " ", RowBox[{"res", "[", 
                          RowBox[{"[", "1", "]"}], "]"}], ",", " ", "res"}], 
                       "]"}]}]}], "\n", "\t\t", "]"}]}]], "CodeInput"]}, 
          Open]], Cell[CellGroupData[
          {Cell["\[LeftCeiling]innerSpecPatQ\[RightFloor]", 
            "CodeSubsubsubsection", Evaluatable -> True], 
           Cell[BoxData[{RowBox[{RowBox[{"multiPart", "=", RowBox[{"_Span", 
                    "|", RowBox[{"{", "__Integer", "}"}]}]}], ";"}], "\n", 
              RowBox[{RowBox[{RowBox[{"innerSpecPatQ", "[", RowBox[
                     {"{", RowBox[{"_Integer", ",", " ", "_Integer"}], "}"}], 
                    "]"}], ":=", "True"}], ";"}], "\n", RowBox[{
                RowBox[{RowBox[{"innerSpecPatQ", "[", RowBox[{"{", RowBox[
                       {"_Integer", ",", " ", "multiPart"}], "}"}], "]"}], 
                  ":=", "True"}], ";"}], "\n", RowBox[{RowBox[
                 {RowBox[{"innerSpecPatQ", "[", RowBox[{"{", RowBox[
                       {"multiPart", ",", " ", "_Integer"}], "}"}], "]"}], 
                  ":=", "True"}], ";"}], "\n", RowBox[{RowBox[
                 {RowBox[{"innerSpecPatQ", "[", RowBox[{"{", RowBox[
                       {"multiPart", ",", " ", "multiPart"}], "}"}], "]"}], 
                  ":=", "True"}], ";"}]}], "CodeInput"]}, Open]], 
        Cell[CellGroupData[{Cell["\[LeftCeiling]statePairListQ\[RightFloor]", 
            "CodeSubsubsubsection", Evaluatable -> True], 
           Cell[BoxData[{RowBox[{"Clear", "[", RowBox[{"basicStatePairQ", 
                  ",", " ", "statePairListQ"}], "]"}], "\n", 
              RowBox[{RowBox[{RowBox[{"basicStatePairQ", "[", RowBox[
                     {"(", RowBox[{RowBox[{"{", RowBox[{"_", ",", " ", "_"}], 
                          "}"}], "?", "innerSpecPatQ"}], ")"}], "]"}], ":=", 
                  "True"}], ";"}], "\n", RowBox[{RowBox[
                 {RowBox[{"basicStatePairQ", "[", "_", "]"}], ":=", 
                  "False"}], ";"}], "\n", RowBox[{RowBox[
                 {RowBox[{"statePairListQ", "[", RowBox[{"{", RowBox[
                       {RowBox[{RowBox[{"{", RowBox[{"_", ",", " ", "_"}], 
                          "}"}], "?", "innerSpecPatQ"}], ".."}], "}"}], 
                    "]"}], ":=", "True"}], ";"}], "\n", RowBox[{
                RowBox[{RowBox[{"statePairListQ", "[", "_", "]"}], ":=", 
                  "False"}], ";"}]}], "CodeInput"]}, Open]], 
        Cell[CellGroupData[{Cell["\[LeftCeiling]statePairsQ\[RightFloor]", 
            "CodeSubsubsubsection", Evaluatable -> True], 
           Cell[BoxData[{RowBox[{RowBox[{RowBox[{"statePairsQ", "[", "spec_", 
                    "]"}], ":=", "\n", "\t", RowBox[{RowBox[
                     {"basicStatePairQ", "[", "spec", "]"}], "||", 
                    RowBox[{"statePairListQ", "[", "spec", "]"}]}]}], ";"}], 
              "\n", RowBox[{RowBox[{"statePairsQ", "[", "_", "]"}], ":=", 
                "False"}]}], "CodeInput"]}, Open]], 
        Cell[CellGroupData[
          {Cell["\[LeftCeiling]getStatePairSelections\[RightFloor]", 
            "CodeSubsubsubsection", Evaluatable -> True], 
           Cell[BoxData[{RowBox[{RowBox[{"getStatePairSelections", "//", 
                  "Clear"}], ";"}], "\n", RowBox[{RowBox[
                 {RowBox[{"getStatePairSelections", "[", RowBox[{"objs1_", 
                      ",", " ", "objs2_", ",", " ", "sels_"}], "]"}], ":=", 
                  "\n", "\t", RowBox[{"{", "\n", "\t\t", RowBox[
                     {RowBox[{"Map", "[", "\n", "\t\t\t", RowBox[{RowBox[
                          {RowBox[{"Map", "[", "\n", "\t\t\t\t", RowBox[
                          {RowBox[{RowBox[{"Part", "[", RowBox[{"objs1", ",", 
                          " ", "#"}], "]"}], "&"}], ",", "\n", "\t\t\t\t", 
                          RowBox[{"Replace", "[", "\n", "\t\t\t\t\t", RowBox[
                          {RowBox[{RowBox[{"If", "[", RowBox[{RowBox[
                          {"basicStatePairQ", "[", "#", "]"}], ",", " ", 
                          RowBox[{"{", "#", "}"}], ",", " ", "#"}], "]"}], 
                          "[", RowBox[{"[", RowBox[{"All", ",", " ", "1"}], 
                          "]"}], "]"}], ",", "\n", "\t\t\t\t\t", RowBox[
                          {"i_Integer", "\[RuleDelayed]", RowBox[{"{", "i", 
                          "}"}]}], ",", "\n", "\t\t\t\t\t", "1"}], "\n", 
                          "\t\t\t\t\t", "]"}]}], "\n", "\t\t\t\t", "]"}], 
                          "&"}], ",", "\n", "\t\t\t", "sels"}], "\n", 
                        "\t\t\t", "]"}], ",", "\n", "\t\t", RowBox[{"Map", 
                        "[", "\n", "\t\t\t", RowBox[{RowBox[{RowBox[{"Map", 
                          "[", "\n", "\t\t\t\t", RowBox[{RowBox[{RowBox[
                          {"Part", "[", RowBox[{"objs2", ",", " ", "#"}], 
                          "]"}], "&"}], ",", "\n", "\t\t\t\t", RowBox[
                          {"Replace", "[", "\n", "\t\t\t\t\t", RowBox[
                          {RowBox[{RowBox[{"If", "[", RowBox[{RowBox[
                          {"basicStatePairQ", "[", "#", "]"}], ",", " ", 
                          RowBox[{"{", "#", "}"}], ",", " ", "#"}], "]"}], 
                          "[", RowBox[{"[", RowBox[{"All", ",", " ", "2"}], 
                          "]"}], "]"}], ",", "\n", "\t\t\t\t\t", RowBox[
                          {"i_Integer", "\[RuleDelayed]", RowBox[{"{", "i", 
                          "}"}]}], ",", "\n", "\t\t\t\t\t", "1"}], "\n", 
                          "\t\t\t\t\t", "]"}]}], "\n", "\t\t\t\t", "]"}], 
                          "&"}], ",", "\n", "\t\t\t", "sels"}], "\n", 
                        "\t\t\t", "]"}]}], "\n", "\t\t", "}"}]}], ";"}], 
              "\n", RowBox[{RowBox[{"getStatePairSelections", "[", 
                  RowBox[{"objs1_", ",", " ", "sels_"}], "]"}], ":=", "\n", 
                "\t", RowBox[{"getStatePairSelections", "[", RowBox[
                   {"objs1", ",", " ", "objs1", ",", " ", "sels"}], 
                  "]"}]}]}], "CodeInput"]}, Open]]}, Open]], 
     Cell[CellGroupData[{Cell["\[LeftCeiling]ExpectationValues\[RightFloor]", 
         "CodeSubsection", Evaluatable -> True], 
        Cell[CellGroupData[{Cell["\[LeftCeiling]expectationValue\[RightFloor]\
", "CodeSubsubsection", Evaluatable -> True], 
           Cell[BoxData[{RowBox[{RowBox[{RowBox[{"expectationValueVec", "[", 
                    RowBox[{"func_", ",", " ", "grid_"}], "]"}], ":=", "\n", 
                  "\t", RowBox[{"Replace", "[", RowBox[{RowBox[{"func", "@", 
                        "grid"}], ",", " ", "\n", "\t\t", RowBox[
                       {RowBox[{"Except", "[", RowBox[{"_List", "?", RowBox[
                          {"(", RowBox[{RowBox[{RowBox[{"Length", "[", "#", 
                          "]"}], "\[Equal]", RowBox[{"Length", "@", 
                          "grid"}]}], "&"}], ")"}]}], "]"}], ":>", RowBox[
                         {"Map", "[", RowBox[{"func", ",", " ", "grid"}], 
                          "]"}]}]}], "\n", "\t\t", "]"}]}], ";"}], "\n", 
              RowBox[{RowBox[{RowBox[{"expectationValueVec", "[", RowBox[
                     {"func_", ",", " ", "grid_", ",", " ", "wf_"}], "]"}], 
                  ":=", "\n", "\t", RowBox[{"Replace", "[", RowBox[
                     {RowBox[{"func", "[", RowBox[{"grid", ",", " ", "wf"}], 
                        "]"}], ",", "\n", "\t\t", RowBox[{RowBox[{"Except", 
                          "[", RowBox[{"_List", "?", RowBox[{"(", RowBox[
                          {RowBox[{RowBox[{"Length", "[", "#", "]"}], 
                          "\[Equal]", RowBox[{"Length", "@", "grid"}]}], 
                          "&"}], ")"}]}], "]"}], ":>", "\n", "\t\t\t", 
                        RowBox[{"MapThread", "[", RowBox[{"func", ",", " ", 
                          RowBox[{"{", RowBox[{"grid", ",", " ", "wf"}], 
                          "}"}]}], "]"}]}]}], "\n", "\t\t", "]"}]}], ";"}]}], 
            "CodeInput"], Cell[BoxData[{RowBox[{RowBox[{RowBox[
                   {"multiplicativeOperatorQ", "[", "func_Function", "]"}], 
                  ":=", "\n", "\t", RowBox[{"!", RowBox[{"(", RowBox[
                       {RowBox[{"MemberQ", "[", RowBox[{"func", ",", " ", 
                          RowBox[{"Slot", "[", "2", "]"}], ",", " ", 
                          "\[Infinity]"}], "]"}], "||", "\n", "\t\t\t", 
                        RowBox[{"MatchQ", "[", RowBox[{"func", ",", " ", 
                          RowBox[{RowBox[{"Verbatim", "[", "Function", "]"}], 
                          "[", RowBox[{RowBox[{"{", RowBox[{"_", ",", " ", 
                          "_"}], "}"}], ",", " ", "___"}], "]"}]}], "]"}]}], 
                      ")"}]}]}], ";"}], "\n", RowBox[{RowBox[
                 {RowBox[{"multiplicativeOperatorQ", "[", "e_", "]"}], ":=", 
                  "\n", "\t", "False"}], ";"}]}], "CodeInput"], 
           Cell[BoxData[{RowBox[{RowBox[{RowBox[{"expectationValue", "[", 
                    "\n", "\t", RowBox[{"func_Function", ",", " ", "grid_", 
                      ",", " ", "wfL_", ",", " ", "wfR_", ",", "\n", "\t", 
                      "multiplicative_"}], "\n", "\t", "]"}], ":=", "\n", 
                  "\t", RowBox[{"wfL", ".", "\n", "\t\t", RowBox[{"With", 
                      "[", "\n", "\t\t\t", RowBox[{RowBox[{"{", "\n", 
                          "\t\t\t\t", RowBox[{"mult", "=", "\n", 
                          "\t\t\t\t\t", RowBox[{"If", "[", RowBox[{RowBox[
                          {"multiplicative", "===", "Automatic"}], ",", "\n", 
                          "\t\t\t\t\t\t", RowBox[{"multiplicativeOperatorQ", 
                          "[", "func", "]"}], ",", "\n", "\t\t\t\t\t\t", 
                          RowBox[{"TrueQ", "@", "multiplicative"}]}], "\n", 
                          "\t\t\t\t\t\t", "]"}]}], "\n", "\t\t\t\t", "}"}], 
                        ",", "\n", "\t\t\t", RowBox[{"If", "[", RowBox[
                          {RowBox[{"!", "mult"}], ",", "\n", "\t\t\t\t", 
                          RowBox[{"expectationValueVec", "[", RowBox[{"func", 
                          ",", " ", "grid", ",", " ", "wfR"}], "]"}], ",", 
                          "\n", "\t\t\t\t", RowBox[{"wfR", "*", RowBox[
                          {"expectationValueVec", "[", RowBox[{"func", ",", 
                          " ", "grid"}], "]"}]}]}], "\n", "\t\t\t\t", 
                          "]"}]}], "\n", "\t\t", "]"}]}]}], ";"}], "\n", 
              RowBox[{RowBox[{"expectationValue", "[", RowBox[
                   {RowBox[{"func", ":", RowBox[{"Except", "[", "_Function", 
                        "]"}]}], ",", " ", "grid_", ",", " ", "wfL_", ",", 
                    " ", "wfR_", ",", "\n", "\t", "multiplicative_"}], "\n", 
                  "\t", "]"}], ":=", "\n", "\t", RowBox[{"wfL", ".", 
                  RowBox[{"Replace", "[", RowBox[{RowBox[
                       {"expectationValueVec", "[", RowBox[{"func", ",", " ", 
                          "grid", ",", " ", "wfR"}], "]"}], ",", "\n", 
                      "\t\t", RowBox[{"{", "\n", "\t\t\t", RowBox[
                         {RowBox[{"{", RowBox[{"_func", ",", " ", "__"}], 
                          "}"}], "\[RuleDelayed]", "\n", "\t\t\t\t", RowBox[
                          {"Replace", "[", RowBox[{RowBox[
                          {"expectationValueVec", "[", RowBox[{"func", ",", 
                          " ", "grid"}], "]"}], ",", "\n", "\t\t\t\t\t", 
                          RowBox[{"{", "\n", "\t\t\t\t\t\t", RowBox[{RowBox[
                          {RowBox[{"{", RowBox[{"_func", ",", " ", "__"}], 
                          "}"}], ":>", "\n", "\t\t\t\t\t\t\t", RowBox[
                          {"PackageRaiseException", "[", "\n", 
                          "\t\t\t\t\t\t\t\t", RowBox[{"Automatic", ",", "\n", 
                          "\t\t\t\t\t\t\t\t", "\"Operator `` in matrix \
element calculation didn't evaluate\"", ",", "\n", "\t\t\t\t\t\t\t\t", 
                          "func"}], "\n", "\t\t\t\t\t\t\t\t", "]"}]}], ",", 
                          "\n", "\t\t\t\t\t\t", RowBox[{"l_", 
                          "\[RuleDelayed]", RowBox[{"wfR", "*", "l"}]}]}], 
                          "\n", "\t\t\t\t\t\t", "}"}]}], "\n", "\t\t\t\t\t", 
                          "]"}]}], "\n", "\t\t\t", "}"}]}], "\n", "\t\t", 
                    "]"}]}]}]}], "CodeInput"]}, Open]], 
        Cell[CellGroupData[{Cell["\[LeftCeiling]operatorMatrix\[RightFloor]", 
            "CodeSubsubsection", Evaluatable -> True], 
           Cell[BoxData[RowBox[{RowBox[{"operatorMatrix", "[", RowBox[
                  {"exf_", ",", " ", "grid_", ",", " ", "wfnsL_", ",", " ", 
                   "wfnsR_", ",", " ", "assumeRealSym_", ",", " ", 
                   "assumeHerm_", ",", " ", "mult_"}], "]"}], ":=", "\n", 
               "\t", RowBox[{"Block", "[", "\n", "\t\t", RowBox[
                  {RowBox[{"{", "\n", "\t\t\t", RowBox[{RowBox[{"mat", "=", 
                         RowBox[{"ConstantArray", "[", RowBox[{"0.", ",", 
                          " ", RowBox[{"{", RowBox[{RowBox[{"Length", "@", 
                          "wfnsL"}], ",", " ", RowBox[{"Length", "@", 
                          "wfnsR"}]}], "}"}]}], "]"}]}], ",", "\n", "\t\t\t", 
                       RowBox[{"asrs", "=", RowBox[{"TrueQ", "@", 
                          "assumeRealSym"}]}], ",", "\n", "\t\t\t", RowBox[
                        {"ash", "=", RowBox[{"TrueQ", "@", "assumeHerm"}]}], 
                       ",", "\n", "\t\t\t", RowBox[{"mo", "=", "mult"}]}], 
                     "\n", "\t\t\t", "}"}], ",", "\n", "\t", RowBox[
                    {RowBox[{"Which", "[", "\n", "\t\t", RowBox[{"asrs", ",", 
                         "\n", "\t\t\t", RowBox[{"Do", "[", "\n", "\t\t\t\t", 
                          RowBox[{RowBox[{"If", "[", RowBox[{RowBox[{"i", 
                          ">", "j"}], ",", " ", "\n", "\t\t\t\t\t", RowBox[
                          {RowBox[{"mat", "[", RowBox[{"[", RowBox[{"i", ",", 
                          " ", "j"}], "]"}], "]"}], "=", RowBox[{"mat", "[", 
                          RowBox[{"[", RowBox[{"j", ",", " ", "i"}], "]"}], 
                          "]"}]}], ",", "\n", "\t\t\t\t\t", RowBox[{RowBox[
                          {"mat", "[", RowBox[{"[", RowBox[{"i", ",", " ", 
                          "j"}], "]"}], "]"}], "=", "\n", "\t\t\t\t\t\t", 
                          RowBox[{"expectationValue", "[", RowBox[{"exf", 
                          ",", " ", "grid", ",", " ", RowBox[{"wfnsL", "[", 
                          RowBox[{"[", "i", "]"}], "]"}], ",", " ", RowBox[
                          {"wfnsR", "[", RowBox[{"[", "j", "]"}], "]"}], ",", 
                          " ", "mo"}], "]"}]}]}], "\n", "\t\t\t\t\t", "]"}], 
                          ",", "\n", "\t\t\t\t", RowBox[{"{", RowBox[{"i", 
                          ",", " ", RowBox[{"Length", "@", "wfnsL"}]}], 
                          "}"}], ",", "\n", "\t\t\t\t", RowBox[{"{", RowBox[
                          {"j", ",", " ", RowBox[{"Length", "@", "wfnsR"}]}], 
                          "}"}]}], "\n", "\t\t\t\t", "]"}], ",", "\n", 
                         "\t\t", "ash", ",", "\n", "\t\t\t", RowBox[{"Do", 
                          "[", "\n", "\t\t\t\t", RowBox[{RowBox[{"If", "[", 
                          RowBox[{RowBox[{"i", ">", "j"}], ",", " ", "\n", 
                          "\t\t\t\t\t", RowBox[{RowBox[{"mat", "[", RowBox[
                          {"[", RowBox[{"i", ",", " ", "j"}], "]"}], "]"}], 
                          "=", RowBox[{"Conjugate", "@", RowBox[{"mat", "[", 
                          RowBox[{"[", RowBox[{"j", ",", " ", "i"}], "]"}], 
                          "]"}]}]}], ",", "\n", "\t\t\t\t\t", RowBox[{RowBox[
                          {"mat", "[", RowBox[{"[", RowBox[{"i", ",", " ", 
                          "j"}], "]"}], "]"}], "=", "\n", "\t\t\t\t\t\t", 
                          RowBox[{"expectationValue", "[", RowBox[{"exf", 
                          ",", " ", "grid", ",", " ", RowBox[{"wfnsL", "[", 
                          RowBox[{"[", "i", "]"}], "]"}], ",", " ", RowBox[
                          {"wfnsR", "[", RowBox[{"[", "j", "]"}], "]"}], ",", 
                          " ", "mo"}], "]"}]}]}], "\n", "\t\t\t\t\t", "]"}], 
                          ",", "\n", "\t\t\t\t", RowBox[{"{", RowBox[{"i", 
                          ",", " ", RowBox[{"Length", "@", "wfnsL"}]}], 
                          "}"}], ",", "\n", "\t\t\t\t", RowBox[{"{", RowBox[
                          {"j", ",", " ", RowBox[{"Length", "@", "wfnsR"}]}], 
                          "}"}]}], "\n", "\t\t\t\t", "]"}], ",", "\n", 
                         "\t\t", "True", ",", "\n", "\t\t\t", RowBox[{"Do", 
                          "[", "\n", "\t\t\t\t", RowBox[{RowBox[{RowBox[
                          {"mat", "[", RowBox[{"[", RowBox[{"i", ",", " ", 
                          "j"}], "]"}], "]"}], "=", "\n", "\t\t\t\t\t", 
                          RowBox[{"expectationValue", "[", RowBox[{"exf", 
                          ",", " ", "grid", ",", " ", RowBox[{"wfnsL", "[", 
                          RowBox[{"[", "i", "]"}], "]"}], ",", " ", RowBox[
                          {"wfnsR", "[", RowBox[{"[", "j", "]"}], "]"}], ",", 
                          " ", "mo"}], "]"}]}], ",", "\n", "\t\t\t\t", 
                          RowBox[{"{", RowBox[{"i", ",", " ", RowBox[
                          {"Length", "@", "wfnsL"}]}], "}"}], ",", "\n", 
                          "\t\t\t\t", RowBox[{"{", RowBox[{"j", ",", " ", 
                          RowBox[{"Length", "@", "wfnsR"}]}], "}"}]}], "\n", 
                          "\t\t\t\t", "]"}]}], "\n", "\t\t", "]"}], ";", 
                     "\n", "\t", RowBox[{"Developer`ToPackedArray", "@", 
                       "mat"}]}]}], "\n", "\t", "]"}]}]], "CodeInput"]}, 
          Open]], Cell[CellGroupData[
          {Cell["\[LeftCeiling]ExpectationValues\[RightFloor]", 
            "CodeSubsubsection", Evaluatable -> True], 
           Cell[BoxData[{RowBox[{RowBox[{RowBox[{"Options", "[", 
                    "WFExpectationValues", "]"}], "=", "\n", "\t", 
                  RowBox[{"{", "\n", "\t\t", RowBox[
                     {"\"MultiplicativeOperator\"", "\[Rule]", "Automatic"}], 
                    "\n", "\t\t", "}"}]}], ";"}], "\n", RowBox[{
                RowBox[{RowBox[{"iWFExpectationValues", "[", "\n", "\t", 
                    RowBox[{RowBox[{"{", RowBox[{"grid_", ",", " ", 
                          "wfns_"}], "}"}], ",", "\n", "\t", "evs_", ",", 
                      "\n", "\t", "mul_", ",", "\n", "\t", RowBox[{"ops", 
                        ":", RowBox[{"OptionsPattern", "[", "]"}]}]}], "\n", 
                    "\t", "]"}], ":=", "\n", "\t", RowBox[{"With", "[", "\n", 
                    "\t\t", RowBox[{RowBox[{"{", "\n", "\t\t\t", RowBox[
                         {"exfns", "=", RowBox[{"Flatten", "@", RowBox[
                          {"List", "@", "evs"}]}]}], "\n", "\t\t\t", "}"}], 
                      ",", "\n", "\t\t\t", RowBox[{RowBox[{"If", "[", 
                          RowBox[{RowBox[{"Not", "@", RowBox[{"ListQ", "@", 
                          "evs"}]}], ",", " ", RowBox[{"Map", "[", "First", 
                          "]"}], ",", " ", "Identity"}], "]"}], "@", "\n", 
                        "\t\t\t\t", RowBox[{"Table", "[", "\n", "\t\t\t\t\t", 
                          RowBox[{RowBox[{"Map", "[", "\n", "\t\t\t\t\t\t", 
                          RowBox[{RowBox[{RowBox[{"expectationValue", "[", 
                          RowBox[{"#", ",", " ", "grid", ",", " ", "wf", ",", 
                          " ", "wf", ",", " ", "mul"}], "]"}], "&"}], ",", 
                          "\n", "\t\t\t\t\t\t", "exfns"}], "\n", 
                          "\t\t\t\t\t\t", "]"}], ",", "\n", "\t\t\t\t\t", 
                          RowBox[{"{", RowBox[{"wf", ",", " ", "wfns"}], 
                          "}"}]}], "\n", "\t\t\t\t\t", "]"}]}]}], "\n", 
                    "\t\t", "]"}]}], ";"}], "\n", RowBox[{RowBox[
                 {RowBox[{"WFExpectationValues", "[", "\n", "\t", RowBox[
                     {"c_WavefunctionsObject", ",", "\n", "\t", "evs_", ",", 
                      "\n", "\t", RowBox[{"ops", ":", RowBox[
                         {"OptionsPattern", "[", "]"}]}]}], "\n", "\t", 
                    "]"}], ":=", "\n", "\t", RowBox[{"iWFExpectationValues", 
                    "[", "\n", "\t\t", RowBox[{RowBox[{"{", RowBox[
                         {RowBox[{RowBox[{"c", "[", "\"Grid\"", "]"}], "[", 
                          "\"Points\"", "]"}], ",", " ", RowBox[{RowBox[
                          {RowBox[{"Flatten", "@", RowBox[{"#", "[", 
                          "\"Values\"", "]"}]}], "&"}], "/@", RowBox[{"c", 
                          "[", "\"Wavefunctions\"", "]"}]}]}], "}"}], ",", 
                      "\n", "\t\t", "evs", ",", "\n", "\t\t", RowBox[
                       {"OptionValue", "[", "\"MultiplicativeOperator\"", 
                        "]"}], ",", "\n", "\t\t", "ops"}], "\n", "\t\t", 
                    "]"}]}], ";"}]}], "CodeInput"]}, Open]], 
        Cell[CellGroupData[{Cell["\[LeftCeiling]OperatorMatrix\[RightFloor]", 
            "CodeSubsubsection", Evaluatable -> True], 
           Cell[BoxData[{RowBox[{RowBox[{RowBox[{"Options", "[", 
                    "WFOperatorMatrix", "]"}], "=", "\n", "\t", RowBox[
                   {"Join", "[", "\n", "\t\t", RowBox[{RowBox[{"Options", 
                        "@", "WFExpectationValues"}], ",", "\n", "\t\t", 
                      RowBox[{"{", "\n", "\t\t\t", RowBox[{RowBox[
                          {"\"AssumeSymmetric\"", "\[Rule]", "True"}], ",", 
                          "\n", "\t\t\t", RowBox[{"\"AssumeHermitian\"", 
                          "\[Rule]", "False"}]}], "\n", "\t\t\t", "}"}]}], 
                    "\n", "\t\t", "]"}]}], ";"}], "\n", RowBox[{
                RowBox[{RowBox[{"iWFOperatorMatrix", "[", "\n", "\t", 
                    RowBox[{RowBox[{"{", RowBox[{"grid_", ",", " ", 
                          "wfns_"}], "}"}], ",", "\n", "\t", "evs_", ",", 
                      "\n", "\t", "asrs_", ",", "\n", "\t", "ash_", ",", 
                      "\n", "\t", "mult_", ",", "\n", "\t", RowBox[{"ops", 
                        ":", RowBox[{"OptionsPattern", "[", "]"}]}]}], "\n", 
                    "\t", "]"}], ":=", "\n", "\t", RowBox[{"Module", "[", 
                    "\n", "\t\t", RowBox[{RowBox[{"{", "\n", "\t\t\t", 
                        RowBox[{RowBox[{"exfns", "=", RowBox[{"Flatten", "@", 
                          RowBox[{"List", "@", "evs"}]}]}], ",", "\n", 
                          "\t\t\t", "els", ",", "\n", "\t\t\t", "sels", ",", 
                          "\n", "\t\t\t", "mat", ",", "\n", "\t\t\t", "exf", 
                          ",", "\n", "\t\t\t", "mo", ",", "\n", "\t\t\t", 
                          RowBox[{"mul", "=", "mult"}]}], "\n", "\t\t\t", 
                        "}"}], ",", "\n", "\t\t\t", RowBox[{RowBox[{"If", 
                          "[", RowBox[{RowBox[{"!", RowBox[{"ListQ", "@", 
                          "mul"}]}], ",", " ", RowBox[{"mul", "=", RowBox[
                          {"ConstantArray", "[", RowBox[{"mul", ",", " ", 
                          RowBox[{"Length", "@", "exfns"}]}], "]"}]}]}], 
                          "]"}], ";", "\n", "\t\t\t", RowBox[{"Table", "[", 
                          "\n", "\t\t\t\t", RowBox[{RowBox[{RowBox[{"exf", 
                          "=", RowBox[{"exfns", "[", RowBox[{"[", "n", "]"}], 
                          "]"}]}], ";", "\n", "\t\t\t\t", RowBox[{"mo", "=", 
                          RowBox[{"mul", "[", RowBox[{"[", "n", "]"}], 
                          "]"}]}], ";", "\n", "\t\t\t\t", RowBox[{"mat", "=", 
                          RowBox[{"ConstantArray", "[", RowBox[{"0.", ",", 
                          " ", RowBox[{"{", RowBox[{RowBox[{"Length", "@", 
                          "wfns"}], ",", " ", RowBox[{"Length", "@", 
                          "wfns"}]}], "}"}]}], "]"}]}], ";", "\n", 
                          "\t\t\t\t", RowBox[{"operatorMatrix", "[", RowBox[
                          {"exf", ",", " ", "grid", ",", " ", "wfns", ",", 
                          " ", "wfns", ",", " ", "asrs", ",", " ", "ash", 
                          ",", " ", "mo"}], "]"}]}], ",", "\n", "\t\t\t\t", 
                          RowBox[{"{", RowBox[{"n", ",", " ", RowBox[
                          {"Length", "@", "exfns"}]}], "}"}]}], "\n", 
                          "\t\t\t\t", "]"}]}]}], "\n", "\t\t", "]"}]}], 
                ";"}], "\n", RowBox[{RowBox[{RowBox[{"WFOperatorMatrix", "[", 
                    "\n", "\t", RowBox[{"c_WavefunctionsObject", ",", "\n", 
                      "\t", "evs_", ",", "\n", "\t", RowBox[{"ops", ":", 
                        RowBox[{"OptionsPattern", "[", "]"}]}]}], "\n", "\t", 
                    "]"}], ":=", "\n", "\t", RowBox[{"iWFOperatorMatrix", 
                    "[", "\n", "\t\t", RowBox[{RowBox[{"{", RowBox[
                         {RowBox[{RowBox[{"c", "[", "\"Grid\"", "]"}], "[", 
                          "\"Points\"", "]"}], ",", " ", RowBox[{RowBox[
                          {RowBox[{"Flatten", "@", RowBox[{"#", "[", 
                          "\"Values\"", "]"}]}], "&"}], "/@", RowBox[{"c", 
                          "[", "\"Wavefunctions\"", "]"}]}]}], "}"}], ",", 
                      "\n", "\t\t", "evs", ",", "\n", "\t\t", RowBox[
                       {"TrueQ", "@", RowBox[{"OptionValue", "[", 
                          "\"AssumeSymmetric\"", "]"}]}], ",", "\n", "\t\t", 
                      RowBox[{"TrueQ", "@", RowBox[{"OptionValue", "[", 
                          "\"AssumeHermitian\"", "]"}]}], ",", "\n", "\t\t", 
                      RowBox[{"OptionValue", "[", 
                        "\"MultiplicativeOperator\"", "]"}], ",", "\n", 
                      "\t\t", "ops"}], "\n", "\t\t", "]"}]}], ";"}]}], 
            "CodeInput"]}, Open]], Cell[CellGroupData[
          {Cell["\[LeftCeiling]OperatorMatrixElements\[RightFloor]", 
            "CodeSubsubsection", Evaluatable -> True], 
           Cell[CellGroupData[
             {Cell["\[LeftCeiling]operatorMatElCalcInner\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                RowBox[{RowBox[{"operatorMatElCalcInner", "[", RowBox[
                     {"l_", ",", " ", "r_", ",", " ", "exfn_", ",", " ", 
                      "m_", ",", " ", "grid_", ",", " ", "asrs_", ",", " ", 
                      "ash_"}], "]"}], ":=", "\n", "\t", RowBox[{"If", "[", 
                    RowBox[{RowBox[{"!", RowBox[{"ListQ", "@", "exfn"}]}], 
                      ",", "\n", "\t\t", RowBox[{"If", "[", RowBox[
                         {RowBox[{RowBox[{RowBox[{"Length", "@", "l"}], ">", 
                          "1"}], "||", RowBox[{RowBox[{"Length", "@", "r"}], 
                          ">", "1"}]}], ",", "\n", "\t\t\t", RowBox[
                          {"operatorMatrix", "[", RowBox[{"exfn", ",", " ", 
                          "grid", ",", " ", "l", ",", " ", "r", ",", " ", 
                          "asrs", ",", " ", "ash", ",", " ", "m"}], "]"}], 
                          ",", "\n", "\t\t\t", RowBox[{"expectationValue", 
                          "[", RowBox[{"exfn", ",", " ", "grid", ",", " ", 
                          RowBox[{"l", "[", RowBox[{"[", "1", "]"}], "]"}], 
                          ",", " ", RowBox[{"r", "[", RowBox[{"[", "1", 
                          "]"}], "]"}], ",", " ", "m"}], "]"}]}], "\n", 
                        "\t\t\t", "]"}], ",", "\n", "\t\t", RowBox[
                       {"MapThread", "[", "\n", "\t\t\t", RowBox[{RowBox[
                          {RowBox[{"With", "[", RowBox[{RowBox[{"{", RowBox[
                          {RowBox[{"exf", "=", "#"}], ",", " ", RowBox[{"mo", 
                          "=", "#2"}]}], "}"}], ",", "\n", "\t\t\t\t", RowBox[
                          {"If", "[", RowBox[{RowBox[{RowBox[{RowBox[
                          {"Length", "@", "l"}], ">", "1"}], "||", RowBox[
                          {RowBox[{"Length", "@", "r"}], ">", "1"}]}], ",", 
                          "\n", "\t\t\t\t\t", RowBox[{"operatorMatrix", "[", 
                          RowBox[{"exf", ",", " ", "grid", ",", " ", "l", 
                          ",", " ", "r", ",", " ", "asrs", ",", " ", "ash", 
                          ",", " ", "mo"}], "]"}], ",", "\n", "\t\t\t\t\t", 
                          RowBox[{"expectationValue", "[", RowBox[{"exf", 
                          ",", " ", "grid", ",", " ", RowBox[{"l", "[", 
                          RowBox[{"[", "1", "]"}], "]"}], ",", " ", RowBox[
                          {"r", "[", RowBox[{"[", "1", "]"}], "]"}], ",", 
                          " ", "mo"}], "]"}]}], "\n", "\t\t\t\t\t", "]"}]}], 
                          "\n", "\t\t\t\t", "]"}], "&"}], ",", "\n", 
                          "\t\t\t", RowBox[{"{", "\n", "\t\t\t\t", RowBox[
                          {"exfn", ",", "\n", "\t\t\t\t", "m"}], "\n", 
                          "\t\t\t\t", "}"}]}], "\n", "\t\t\t", "]"}]}], "\n", 
                    "\t\t", "]"}]}]], "CodeInput"]}, Open]], 
           Cell[CellGroupData[
             {Cell["\[LeftCeiling]iWFOperatorMatrixElements\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                RowBox[{RowBox[{RowBox[{"iWFOperatorMatrixElements", "[", 
                      "\n", "\t", RowBox[{RowBox[{"{", RowBox[{"grid_", ",", 
                          " ", "wfns_"}], "}"}], ",", "\n", "\t", "evs_", 
                        ",", "\n", "\t", "ash_", ",", "\n", "\t", "asrs_", 
                        ",", "\n", "\t", "mult_", ",", "\n", "\t", RowBox[
                         {"ops", ":", RowBox[{"OptionsPattern", "[", 
                          "]"}]}]}], "\n", "\t", "]"}], ":=", "\n", "\t", 
                    RowBox[{"Module", "[", "\n", "\t\t", RowBox[
                       {RowBox[{"{", "\n", "\t\t\t", RowBox[{RowBox[{"exfns", 
                          "=", RowBox[{"Flatten", "@", RowBox[{"List", "@", 
                          "evs"}]}]}], ",", "\n", "\t\t\t", "els", ",", "\n", 
                          "\t\t\t", "sels", ",", "\n", "\t\t\t", "mat", ",", 
                          "\n", "\t\t\t", "wfL", ",", "\n", "\t\t\t", "wfR", 
                          ",", "\n", "\t\t\t", "res", ",", "\n", "\t\t\t", 
                          RowBox[{"mul", "=", "mult"}]}], "\n", "\t\t\t", 
                          "}"}], ",", "\n", "\t\t", RowBox[{RowBox[
                          {RowBox[{"{", RowBox[{"sels", ",", " ", "exfns"}], 
                          "}"}], "=", RowBox[{"Transpose", "[", RowBox[
                          {"List", "@@@", "exfns"}], "]"}]}], ";", "\n", 
                          "\t\t", RowBox[{"(*", " ", RowBox[{"get", " ", "a", 
                          " ", "list", " ", "of", " ", "LHS", " ", 
                          "wavefunctions", " ", "and", " ", "RHS", " ", 
                          "wavefunctions", " ", "for", " ", "each", " ", 
                          "set", " ", "of", " ", "expectation", " ", "value", 
                          " ", "functions"}], " ", "*)"}], "\n", "\t\t", 
                          RowBox[{RowBox[{"{", RowBox[{"wfL", ",", " ", 
                          "wfR"}], "}"}], "=", RowBox[
                          {"getStatePairSelections", "[", RowBox[{"wfns", 
                          ",", " ", "sels"}], "]"}]}], ";", "\n", "\t\t", 
                          RowBox[{"If", "[", RowBox[{RowBox[{"!", RowBox[
                          {"ListQ", "@", "mul"}]}], ",", " ", RowBox[{"mul", 
                          "=", RowBox[{"ConstantArray", "[", RowBox[{"mul", 
                          ",", " ", RowBox[{"Length", "@", "exfns"}]}], 
                          "]"}]}]}], "]"}], ";", "\n", "\t\t", RowBox[{"(*", 
                          " ", RowBox[{RowBox[{"Thread", " ", "over", " ", 
                          "the", " ", "right", " ", "and", " ", "left", " ", 
                          "wavefunctions"}], ",", " ", RowBox[{"the", " ", 
                          "operators"}], ",", " ", RowBox[{"and", " ", "the", 
                          " ", "multiplicativity"}]}], " ", "*)"}], "\n", 
                          "\t\t", RowBox[{"res", "=", "\n", "\t\t\t", RowBox[
                          {"MapThread", "[", "\n", "\t\t\t\t", RowBox[
                          {RowBox[{RowBox[{"operatorMatElCalc", "[", RowBox[
                          {"##", ",", " ", "grid", ",", " ", "asrs", ",", 
                          " ", "ash"}], "]"}], "&"}], ",", "\n", "\t\t\t\t", 
                          RowBox[{"{", "\n", "\t\t\t\t\t", RowBox[{"wfL", 
                          ",", " ", "wfR", ",", " ", "exfns", ",", " ", 
                          "mul"}], "\n", "\t\t\t\t\t", "}"}]}], "\n", 
                          "\t\t\t\t", "]"}]}], ";", "\n", "\t\t", RowBox[
                          {"If", "[", RowBox[{RowBox[{RowBox[{"Length", "@", 
                          "wfL"}], "\[Equal]", "1"}], ",", " ", RowBox[
                          {"res", "[", RowBox[{"[", "1", "]"}], "]"}], ",", 
                          " ", "res"}], "]"}]}]}], "\n", "\t\t", "]"}]}], 
                  ";"}]], "CodeInput"]}, Open]], Cell[CellGroupData[
             {Cell["\[LeftCeiling]opElMatchQ\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                {RowBox[{"opElMatchQ", "//", "Clear"}], "\n", RowBox[
                  {RowBox[{RowBox[{"opElMatchQ", "[", "\n", "\t", RowBox[
                        {"(", RowBox[{RowBox[{"(", RowBox[{RowBox[{RowBox[
                          {"{", RowBox[{"_", ",", " ", "_"}], "}"}], "?", 
                          "innerSpecPatQ"}], "->", "_"}], ")"}], "|", "\n", 
                          "\t", RowBox[{"(", RowBox[{RowBox[{"{", RowBox[
                          {RowBox[{RowBox[{"{", RowBox[{"_", ",", " ", "_"}], 
                          "}"}], "?", "innerSpecPatQ"}], "..."}], "}"}], 
                          "->", "_"}], ")"}], "|", "\n", "\t", RowBox[{"{", 
                          RowBox[{RowBox[{"(", RowBox[{RowBox[{"(", RowBox[
                          {RowBox[{"{", RowBox[{RowBox[{RowBox[{"{", RowBox[
                          {"_", ",", " ", "_"}], "}"}], "?", 
                          "innerSpecPatQ"}], "..."}], "}"}], "|", RowBox[
                          {RowBox[{"{", RowBox[{"_", ",", " ", "_"}], "}"}], 
                          "?", "innerSpecPatQ"}]}], ")"}], "->", "_"}], 
                          ")"}], ".."}], "}"}]}], ")"}], "\n", "\t", "]"}], 
                     ":=", "True"}], ";"}], "\n", RowBox[{RowBox[
                    {"opElMatchQ", "[", "a_", "]"}], ":=", "\n", "\t", 
                   RowBox[{"PackageThrowMessage", "[", "\n", "\t\t", 
                     RowBox[{"\"OperatorElementSpec\"", ",", "\n", "\t\t", "\
\"Operator element spec `` is invalid. \\\nA valid spec is a map from \
selection specs to functions\"", ",", "\n", "\t\t", RowBox[
                        {"\"MessageParameters\"", "\[Rule]", RowBox[{"{", 
                          "a", "}"}]}]}], "\n", "\t\t", "]"}]}]}], 
               "CodeInput"]}, Open]], Cell[CellGroupData[
             {Cell["\[LeftCeiling]WFOperatorMatrixElements\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                {RowBox[{"WFOperatorMatrixElements", "//", "Clear"}], "\n", 
                 RowBox[{RowBox[{RowBox[{"Options", "[", 
                       "WFOperatorMatrixElements", "]"}], "=", "\n", "\t", 
                     RowBox[{"Options", "@", "WFOperatorMatrix"}]}], ";"}], 
                 "\n", RowBox[{RowBox[{RowBox[{"WFOperatorMatrixElements", 
                       "[", "\n", "\t", RowBox[{"c_WavefunctionsObject", ",", 
                         "\n", "\t", RowBox[{"evs_", "?", "opElMatchQ"}], 
                         ",", "\n", "\t", RowBox[{"ops", ":", RowBox[
                          {"OptionsPattern", "[", "]"}]}]}], "\n", "\t", 
                       "]"}], ":=", "\n", "\t", RowBox[
                      {"iWFOperatorMatrixElements", "[", "\n", "\t\t", 
                       RowBox[{RowBox[{"{", "\n", "\t\t\t", RowBox[{RowBox[
                          {RowBox[{"c", "[", "\"Grid\"", "]"}], "[", 
                          "\"Points\"", "]"}], ",", " ", "\n", "\t\t\t", 
                          RowBox[{RowBox[{RowBox[{"Flatten", "@", RowBox[
                          {"#", "[", "\"Values\"", "]"}]}], "&"}], "/@", 
                          RowBox[{"c", "[", "\"Wavefunctions\"", "]"}]}]}], 
                          "\n", "\t\t\t", "}"}], ",", "\n", "\t\t", RowBox[
                          {"Map", "[", "\n", "\t\t\t", RowBox[{RowBox[
                          {RowBox[{"If", "[", RowBox[{RowBox[
                          {"statePairListQ", "[", RowBox[{"#", "[", RowBox[
                          {"[", "1", "]"}], "]"}], "]"}], ",", "\n", 
                          "\t\t\t\t", RowBox[{"Thread", "[", "#", "]"}], ",", 
                          "\n", "\t\t\t\t", "#"}], "\n", "\t\t\t\t", "]"}], 
                          "&"}], ",", "\n", "\t\t\t", RowBox[{"Flatten", "[", 
                          RowBox[{"{", "evs", "}"}], "]"}]}], "\n", "\t\t\t", 
                          "]"}], ",", "\n", "\t\t", RowBox[{"TrueQ", "@", 
                          RowBox[{"OptionValue", "[", "\"AssumeSymmetric\"", 
                          "]"}]}], ",", "\n", "\t\t", RowBox[{"TrueQ", "@", 
                          RowBox[{"OptionValue", "[", "\"AssumeHermitian\"", 
                          "]"}]}], ",", "\n", "\t\t", RowBox[{"OptionValue", 
                          "[", "\"MultiplicativeOperator\"", "]"}], ",", 
                         "\n", "\t\t", "ops"}], "\n", "\t\t", "]"}]}], 
                   ";"}]}], "CodeInput"]}, Open]]}, Open]]}, Open]], 
     Cell[CellGroupData[{Cell["\[LeftCeiling]Overlaps\[RightFloor]", 
         "CodeSubsection", Evaluatable -> True], 
        Cell[CellGroupData[{Cell["\[LeftCeiling]getWFOverlapVals\[RightFloor]\
", "CodeSubsubsection", Evaluatable -> True], 
           Cell[BoxData[{RowBox[{"getWFOverlapVals", "//", "Clear"}], "\n", 
              RowBox[{RowBox[{"getWFOverlapVals", "[", RowBox[{"wfns1_", ",", 
                    " ", "wfns2_", ",", " ", RowBox[{"checkGrid", ":", 
                      RowBox[{"True", "|", "False"}], ":", "True"}]}], "]"}], 
                ":=", "\n", "\t", RowBox[{"Module", "[", "\n", "\t\t", 
                  RowBox[{RowBox[{"{", "\n", "\t\t\t", RowBox[{RowBox[
                         {"g1", "=", RowBox[{"wfns1", "[", 
                          "\"Wavefunctions\"", "]"}]}], ",", "\n", "\t\t\t", 
                        RowBox[{"g2", "=", RowBox[{"wfns2", "[", 
                          "\"Wavefunctions\"", "]"}]}], ",", "\n", "\t\t\t", 
                        "grid1", ",", "\n", "\t\t\t", "grid2", ",", "\n", 
                        "\t\t\t", "vals1", ",", "\n", "\t\t\t", "vals2", ",", 
                        "\n", "\t\t\t", "vals"}], "\n", "\t\t\t", "}"}], ",", 
                    "\n", "\t\t", RowBox[{RowBox[{"If", "[", RowBox[
                         {"checkGrid", ",", "\n", "\t\t\t", RowBox[
                          {RowBox[{"grid1", "=", RowBox[{RowBox[{"g1", "[", 
                          RowBox[{"[", "1", "]"}], "]"}], "[", "\"Grid\"", 
                          "]"}]}], ";", "\n", "\t", "\t\t", RowBox[{"grid2", 
                          "=", RowBox[{RowBox[{"g2", "[", RowBox[{"[", "1", 
                          "]"}], "]"}], "[", "\"Grid\"", "]"}]}], ";", "\n", 
                          "\t", "\t\t", RowBox[{"If", "[", RowBox[{RowBox[
                          {"grid1", "=!=", "grid2"}], ",", "\n", "\t", 
                          "\t\t\t", RowBox[{"PackageRaiseException", "[", 
                          "\n", "\t", "\t\t\t\t", RowBox[{"Automatic", ",", 
                          "\n", "\t", "\t\t\t\t", "\"Wavefunction overlap can \
only be computed on the same grid\""}], "\n", "\t\t\t\t\t", "]"}]}], "\n", 
                          "\t\t\t\t", "]"}]}]}], "\n", "\t\t\t", "]"}], ";", 
                      "\n", "\t\t", RowBox[{"vals", "=", RowBox[{RowBox[
                          {"Map", "[", RowBox[{RowBox[{"Flatten", "[", RowBox[
                          {"#", "[", "\"Values\"", "]"}], "]"}], "&"}], 
                          "]"}], "/@", RowBox[{"{", RowBox[{"g1", ",", " ", 
                          "g2"}], "}"}]}]}], ";", "\n", "\t\t", RowBox[
                       {"If", "[", RowBox[{RowBox[{"!", "checkGrid"}], ",", 
                          "\n", "\t\t\t", RowBox[{"If", "[", RowBox[
                          {RowBox[{RowBox[{"Length", "[", RowBox[{"vals", 
                          "[", RowBox[{"[", "1", "]"}], "]"}], "]"}], "!=", 
                          RowBox[{"Length", "[", RowBox[{"vals", "[", RowBox[
                          {"[", "2", "]"}], "]"}], "]"}]}], ",", "\n", 
                          "\t\t\t\t", RowBox[{"PackageRaiseException", "[", 
                          "\n", "\t", "\t\t\t\t", RowBox[{"Automatic", ",", 
                          "\n", "\t", "\t\t\t\t", "\"Wavefunction overlap can \
only be computed for wavefunctions of same dimension\""}], "\n", 
                          "\t\t\t\t\t", "]"}]}], "\n", "\t\t\t\t", "]"}]}], 
                        "\n", "\t\t\t", "]"}], ";", "\n", "\t\t", "vals"}]}], 
                  "\n", "\t\t", "]"}]}]}], "CodeInput"]}, Open]], 
        Cell[CellGroupData[
          {Cell["\[LeftCeiling]WFOverlapMatrix\[RightFloor]", 
            "CodeSubsubsection", Evaluatable -> True], 
           Cell[BoxData[RowBox[{RowBox[{"WFOverlapMatrix", "[", 
                 RowBox[{"wfns1_", ",", " ", "wfns2_", ",", " ", 
                   "checkGrid_"}], "]"}], ":=", "\n", "\t", RowBox[
                {RowBox[{"PackageExceptionBlock", "[", "\"WFOverlapMatrix\"", 
                   "]"}], "@", "\n", "\t\t", RowBox[{"Module", "[", "\n", 
                   "\t\t\t", RowBox[{RowBox[{"{", "\n", "\t\t\t\t", RowBox[
                        {"vals1", ",", "\n", "\t\t\t\t", "vals2"}], "\n", 
                       "\t\t\t\t", "}"}], ",", "\n", "\t\t\t", RowBox[
                      {RowBox[{RowBox[{"{", RowBox[{"vals1", ",", " ", 
                          "vals2"}], "}"}], "=", RowBox[{"getWFOverlapVals", 
                          "[", RowBox[{"wfns1", ",", " ", "wfns2", ",", " ", 
                          "checkGrid"}], "]"}]}], ";", "\n", "\t\t\t", 
                       RowBox[{"vals1", ".", RowBox[{"Transpose", "[", 
                          "vals2", "]"}]}]}]}], "\n", "\t\t\t", "]"}]}]}]], 
            "CodeInput"]}, Open]], Cell[CellGroupData[
          {Cell["\[LeftCeiling]WFOverlapElements\[RightFloor]", 
            "CodeSubsubsection", Evaluatable -> True], Cell["\[LeftCeiling]\n\
\tI should write in a few special fast cases for the most common \
operations... There are a few easily optimizable patterns for \
sure.\n\[RightFloor]", "Text", Evaluatable -> True], 
           Cell[CellGroupData[
             {Cell["\[LeftCeiling]calcOverlaps\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                RowBox[{RowBox[{"calcOverlaps", "[", RowBox[{"l_", ",", " ", 
                      "r_"}], "]"}], ":=", "\n", "\t", RowBox[{"Which", "[", 
                    "\n", "\t\t", RowBox[{RowBox[{RowBox[{RowBox[{"Depth", 
                          "[", "l", "]"}], "\[Equal]", "2"}], "&&", RowBox[
                         {RowBox[{"Depth", "[", "r", "]"}], "\[Equal]", 
                          "2"}]}], ",", "\n", "\t\t\t", RowBox[{"r", ".", 
                        "l"}], ",", "\n", "\t\t", RowBox[{RowBox[{RowBox[
                          {"Depth", "[", "l", "]"}], "\[Equal]", "3"}], "&&", 
                        RowBox[{RowBox[{"Depth", "[", "r", "]"}], "\[Equal]", 
                          "3"}]}], ",", "\n", "\t\t\t", RowBox[{RowBox[
                         {"l", ".", RowBox[{"Transpose", "[", "r", "]"}]}], 
                        "//", "\n", "\t\t\t\t", RowBox[{"If", "[", RowBox[
                          {RowBox[{RowBox[{"Length", "[", "l", "]"}], 
                          "\[Equal]", "1"}], ",", " ", RowBox[{"Apply", "[", 
                          "Join", "]"}], ",", " ", "Identity"}], "]"}]}], 
                      RowBox[{"(*", " ", RowBox[{RowBox[{RowBox[{"is", " ", 
                          "this", " ", "rigorously", " ", "what", " ", "we", 
                          " ", "want"}], "..."}], "?"}], " ", "*)"}], ",", 
                      "\n", "\t\t", RowBox[{RowBox[{RowBox[{"Depth", "[", 
                          "l", "]"}], "\[Equal]", "3"}], "&&", RowBox[
                         {RowBox[{"Depth", "[", "r", "]"}], "\[Equal]", 
                          "2"}]}], ",", "\n", "\t\t\t", RowBox[{"Join", "@@", 
                        RowBox[{"(", RowBox[{"l", ".", RowBox[{"Transpose", 
                          "[", RowBox[{"{", "r", "}"}], "]"}]}], ")"}]}], 
                      ",", "\n", "\t\t", RowBox[{RowBox[{RowBox[{"Depth", 
                          "[", "l", "]"}], "\[Equal]", "2"}], "&&", RowBox[
                         {RowBox[{"Depth", "[", "r", "]"}], "\[Equal]", 
                          "3"}]}], ",", "\n", "\t\t\t", RowBox[{"Join", "@@", 
                        RowBox[{"(", RowBox[{"r", ".", RowBox[{"Transpose", 
                          "[", RowBox[{"{", "l", "}"}], "]"}]}], ")"}]}], 
                      RowBox[{"(*", " ", RowBox[{RowBox[{RowBox[{"do", " ", 
                          "I", " ", "need", " ", "a", " ", "transpose", " ", 
                          "here"}], "..."}], "?"}], " ", "*)"}], ",", "\n", 
                      "\t\t", "True", ",", "\n", "\t\t\t", RowBox[{"Map", 
                        "[", RowBox[{RowBox[{RowBox[{"calcOverlaps", "[", 
                          RowBox[{"#", ",", " ", "r"}], "]"}], "&"}], ",", 
                          " ", "l"}], "]"}]}], "\n", "\t\t", "]"}]}]], 
               "CodeInput"]}, Open]], Cell[CellGroupData[
             {Cell["\[LeftCeiling]calcOverlapElements\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                RowBox[{RowBox[{"calcOverlapElements", "[", "spec_", "]"}], 
                  ":=", "\n", "\t", RowBox[{"MapThread", "[", "\n", "\t\t", 
                    RowBox[{RowBox[{RowBox[{"pullOpVals", "[", "\n", 
                          "\t\t\t", RowBox[{"#", ",", "\n", "\t\t\t", RowBox[
                          {"calcOverlaps", "[", RowBox[{RowBox[{"#", "[", 
                          RowBox[{"[", "1", "]"}], "]"}], ",", " ", RowBox[
                          {"#2", "[", RowBox[{"[", "1", "]"}], "]"}]}], 
                          "]"}]}], "\n", "\t\t\t", "]"}], "&"}], ",", "\n", 
                      "\t\t", "spec"}], "\n", "\t\t", "]"}]}]], 
               "CodeInput"]}, Open]], Cell[CellGroupData[
             {Cell["\[LeftCeiling]WFOverlapElements\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                {RowBox[{"WFOverlapElements", "//", "Clear"}], "\n", 
                 RowBox[{RowBox[{RowBox[{"WFOverlapElements", "[", "\n", 
                       "\t", RowBox[{"wfns1_", ",", " ", "\n", "\t", 
                         "wfns2_", ",", "\n", "\t", RowBox[{"pairs_", "?", 
                          "statePairListQ"}], ",", "\n", "\t", 
                         "checkGrid_"}], "\n", "\t", "]"}], ":=", "\n", "\t", 
                     RowBox[{RowBox[{"PackageExceptionBlock", "[", 
                         "\"WFOverlapElements\"", "]"}], "@", "\n", "\t\t", 
                       RowBox[{"Module", "[", "\n", "\t\t\t", RowBox[
                          {RowBox[{"{", "\n", "\t\t\t\t", RowBox[{"vals1", 
                          ",", "\n", "\t\t\t\t", "vals2"}], "\n", "\t\t\t\t", 
                          "}"}], ",", "\n", "\t\t\t", RowBox[{RowBox[
                          {RowBox[{"{", RowBox[{"vals1", ",", " ", "vals2"}], 
                          "}"}], "=", RowBox[{"getWFOverlapVals", "[", RowBox[
                          {"wfns1", ",", " ", "wfns2", ",", " ", 
                          "checkGrid"}], "]"}]}], ";", "\n", "\t\t\t", 
                          RowBox[{"calcOverlapElements", "@", "\n", 
                          "\t\t\t\t", RowBox[{"getStatePairSelections", "[", 
                          RowBox[{"vals1", ",", " ", "vals2", ",", " ", 
                          "pairs"}], "]"}]}]}]}], "\n", "\t\t\t", "]"}]}]}], 
                   ";"}], "\n", RowBox[{RowBox[{RowBox[{"WFOverlapElements", 
                       "[", "\n", "\t", RowBox[{"wfns1_", ",", " ", "\n", 
                         "\t", "wfns2_", ",", "\n", "\t", RowBox[{"pairs_", 
                          "?", "basicStatePairQ"}], ",", "\n", "\t", 
                         "checkGrid_"}], "\n", "\t", "]"}], ":=", "\n", "\t", 
                     RowBox[{"First", "@", RowBox[{"WFOverlapElements", "[", 
                         RowBox[{"wfns1", ",", " ", "wfns2", ",", " ", 
                          RowBox[{"{", "pairs", "}"}], ",", " ", 
                          "checkGrid"}], "]"}]}]}], ";"}]}], "CodeInput"]}, 
             Open]]}, Open]], Cell[CellGroupData[
          {Cell["\[LeftCeiling]WFOverlap\[RightFloor]", "CodeSubsubsection", 
            Evaluatable -> True], Cell[BoxData[RowBox[{"WFOverlap", "//", 
               "Clear"}]], "CodeInput"], Cell[BoxData[
             {RowBox[{RowBox[{RowBox[{"Options", "[", "WFOverlap", "]"}], 
                  "=", "\n", "\t", RowBox[{"{", "\n", "\t\t", RowBox[
                     {"\"CheckGrid\"", "\[Rule]", "False"}], "\n", "\t\t", 
                    "}"}]}], ";"}], "\n", RowBox[{RowBox[
                 {RowBox[{"WFOverlap", "[", RowBox[{"wfns1_", ",", " ", 
                      "wfns2_", ",", " ", RowBox[{"Optional", "[", RowBox[
                         {"All", ",", " ", "All"}], "]"}], ",", " ", 
                      RowBox[{"ops", ":", RowBox[{"OptionsPattern", "[", 
                          "]"}]}]}], "]"}], ":=", "\n", "\t", RowBox[
                   {"WFOverlapMatrix", "[", RowBox[{"wfns1", ",", " ", 
                      "wfns2", ",", " ", RowBox[{"TrueQ", "@", RowBox[
                         {"OptionValue", "[", "\"CheckGrid\"", "]"}]}]}], 
                    "]"}]}], ";"}], "\n", RowBox[{RowBox[
                 {RowBox[{"WFOverlap", "[", RowBox[{"wfns1_", ",", " ", 
                      "wfns2_", ",", " ", "\n", "\t", RowBox[{"pairs", ":", 
                        RowBox[{RowBox[{"(", RowBox[{"_", "?", 
                          "basicStatePairQ"}], ")"}], "|", RowBox[{"(", 
                          RowBox[{"_", "?", "statePairListQ"}], ")"}]}]}], 
                      ",", " ", RowBox[{"ops", ":", RowBox[{"OptionsPattern", 
                          "[", "]"}]}]}], "\n", "\t", "]"}], ":=", "\n", 
                  "\t", RowBox[{"WFOverlapElements", "[", RowBox[{"wfns1", 
                      ",", " ", "wfns2", ",", " ", "pairs", ",", " ", 
                      RowBox[{"TrueQ", "@", RowBox[{"OptionValue", "[", 
                          "\"CheckGrid\"", "]"}]}]}], "]"}]}], ";"}]}], 
            "CodeInput"]}, Open]]}, Open]], 
     Cell[CellGroupData[{Cell["\[LeftCeiling]SCF\[RightFloor]", 
         "CodeSubsection", Evaluatable -> True], 
        Cell[BoxData[RowBox[{RowBox[{"catchSCFException", "=", 
              RowBox[{"PackageExceptionBlock", "[", "\"SCFWavefunctions\"", 
                "]"}]}], ";"}]], "CodeInput"], 
        Cell[CellGroupData[
          {Cell["\[LeftCeiling]constructSCFWfn\[RightFloor]", 
            "CodeSubsubsection", Evaluatable -> True], 
           Cell[BoxData[{RowBox[{"constructSCFWfn", "//", "Clear"}], "\n", 
              RowBox[{RowBox[{"constructSCFWfn", "[", "\n", "\t", 
                  RowBox[{"ctor_", ",", "\n", "\t", "grid_", ",", "\n", "\t", 
                    "pot_", ",", "\n", "\t", "n_"}], "\n", "\t", "]"}], ":=", 
                "\n", "\t", RowBox[{"Module", "[", "\n", "\t\t", 
                  RowBox[{RowBox[{"{", "\n", "\t\t\t", RowBox[{RowBox[
                         {"res", "=", RowBox[{"ctor", "[", RowBox[{"grid", 
                          ",", " ", "pot", ",", " ", "n"}], "]"}]}], ",", 
                        "\n", "\t\t\t", RowBox[{"energy", "=", "I"}]}], "\n", 
                      "\t\t\t", "}"}], ",", "\n", "\t\t", RowBox[
                     {RowBox[{"If", "[", RowBox[{RowBox[{"VectorQ", "[", 
                          RowBox[{"res", ",", " ", 
                          "Internal`RealValuedNumberQ"}], "]"}], ",", "\n", 
                          "\t\t\t", RowBox[{"res", "=", RowBox[
                          {"GridFunctionObject", "[", RowBox[{"grid", ",", 
                          " ", "res"}], "]"}]}]}], "\n", "\t\t\t", "]"}], 
                      ";", "\n", "\t\t", RowBox[{"If", "[", RowBox[
                         {RowBox[{"ChemDVRResultsObjectQ", "@", "res"}], ",", 
                          "\n", "\t\t\t", RowBox[{"res", "=", RowBox[{"res", 
                          "[", "\"Wavefunctions\"", "]"}]}]}], "\n", 
                        "\t\t\t", "]"}], ";", "\n", "\t\t", RowBox[{"If", 
                        "[", RowBox[{RowBox[{"WavefunctionsObjectQ", "@", 
                          "res"}], ",", "\n", "\t\t\t", RowBox[{RowBox[
                          {"energy", "=", RowBox[{"res", "[", "\"Energies\"", 
                          "]"}]}], ";", "\n", "\t\t\t", RowBox[{"res", "=", 
                          RowBox[{"res", "[", "\"Wavefunctions\"", "]"}]}], 
                          ";", "\n", "\t\t\t", RowBox[{"If", "[", RowBox[
                          {RowBox[{RowBox[{"Length", "@", "res"}], 
                          "\[Equal]", "1"}], ",", "\n", "\t\t\t\t", RowBox[
                          {RowBox[{"res", "=", RowBox[{"res", "[", RowBox[
                          {"[", "1", "]"}], "]"}]}], ";", "\n", "\t\t\t\t", 
                          RowBox[{"energy", "=", RowBox[{"energy", "[", 
                          RowBox[{"[", "1", "]"}], "]"}]}], ";"}], ",", "\n", 
                          "\t\t\t\t", RowBox[{RowBox[{"res", "=", RowBox[
                          {"res", "[", RowBox[{"[", "n", "]"}], "]"}]}], ";", 
                          "\n", "\t\t\t\t", RowBox[{"energy", "=", RowBox[
                          {"energy", "[", RowBox[{"[", "n", "]"}], "]"}]}], 
                          ";"}]}], "\n", "\t\t\t\t", "]"}]}]}], "\n", 
                        "\t\t\t", "]"}], ";", "\n", "\t\t", RowBox[{"If", 
                        "[", RowBox[{RowBox[{RowBox[{"!", RowBox[
                          {"GridFunctionObjectQ", "@", "res"}]}], "||", 
                          RowBox[{"!", RowBox[{"NumericQ", "@", 
                          "energy"}]}]}], ",", "\n", "\t\t\t", RowBox[
                          {"PackageRaiseException", "[", "\n", "\t\t\t\t", 
                          RowBox[{"Automatic", ",", "\n", "\t\t\t\t", "\"Cons\
tructed wavefunction `` is not a valid wavefunction\"", ",", "\n", 
                          "\t\t\t\t", RowBox[{"Short", "@", "res"}]}], "\n", 
                          "\t\t\t\t", "]"}]}], "\n", "\t\t\t", "]"}], ";", 
                      "\n", "\t\t", RowBox[{"{", RowBox[{"energy", ",", " ", 
                          "res"}], "}"}]}]}], "\n", "\t\t", "]"}]}]}], 
            "CodeInput"]}, Open]], Cell[CellGroupData[
          {Cell["\[LeftCeiling]scfAveragePot\[RightFloor]", 
            "CodeSubsubsection", Evaluatable -> True], Cell["\[LeftCeiling]\n\
\tThis one might be kinda tricky... Need to average over every other DOF \
somehow to get a new pot...\n\tIn general this is just a Fold-ed Dot \
operation but can we do this cleaner in n-dimensions....?\n\n\tBasically we \
reduce every element in every list by a dot operation, but we probably need \
to permute first...\n\[RightFloor]", "Text", Evaluatable -> True], 
           Cell[BoxData[{RowBox[{"scfAveragePot", "//", "Clear"}], "\n", 
              RowBox[{RowBox[{RowBox[{"scfAveragePot", "[", RowBox[
                     {"potVals_", ",", " ", RowBox[{"wfns", ":", RowBox[
                         {"{", "__List", "}"}]}]}], "]"}], ":=", "\n", "\t", 
                  RowBox[{"Fold", "[", "\n", "\t\t", RowBox[{RowBox[
                       {RowBox[{"With", "[", RowBox[{RowBox[{"{", RowBox[
                          {"vec", "=", "#2"}], "}"}], ",", "\n", "\t\t\t", 
                          RowBox[{"Map", "[", RowBox[{RowBox[{RowBox[{"Dot", 
                          "[", RowBox[{"#", ",", " ", "vec"}], "]"}], "&"}], 
                          ",", " ", "#"}], "]"}]}], "\n", "\t\t\t", "]"}], 
                        "&"}], ",", "\n", "\t\t", "potVals", ",", "\n", 
                      "\t\t", "wfns"}], "\n", "\t\t", "]"}]}], ";"}], "\n", 
              RowBox[{RowBox[{RowBox[{"scfAveragePot", "[", RowBox[
                     {"potVals_", ",", " ", RowBox[{"wfns", ":", RowBox[
                         {"{", "__List", "}"}]}], ",", " ", "i_"}], "]"}], 
                  ":=", "\n", "\t", RowBox[{"scfAveragePot", "[", "\n", 
                    "\t\t", RowBox[{RowBox[{"Transpose", "[", RowBox[
                         {"potVals", ",", " ", "\n", "\t\t\t", RowBox[{"(*", 
                          " ", "\n", "\t\t\t", RowBox[{RowBox[{RowBox[{"I", 
                          "'"}], "m", " ", "not", " ", "sure", " ", "if", 
                          " ", "this", " ", "is", " ", "justified", " ", 
                          RowBox[{"(", RowBox[{"or", " ", "how", " ", "to", 
                          " ", "justify", " ", "it"}], ")"}], "\n", "\t\t\t", 
                          "I", " ", "would", " ", "have", " ", "thought", 
                          " ", "we", " ", "wanted", " ", "to", " ", "have", 
                          " ", "the", " ", "relevant", " ", "degree", " ", 
                          "of", " ", "freedom", " ", "be", " ", "the", " ", 
                          "last", " ", "element", " ", "in", " ", "the", " ", 
                          "thing", "\n", "\t\t\t", "That", " ", "way", " ", 
                          "the", " ", "wfns", " ", "and", " ", "the", " ", 
                          "Dimensions", " ", "of", " ", "the", " ", 
                          "potVals", " ", "would", " ", "align"}], ",", " ", 
                          "\n", "\t\t\t\t", RowBox[{RowBox[{RowBox[{RowBox[
                          {"i", ".", "e", ".", " ", "Dot"}], " ", "wfn_", 
                          "1", " ", "into", " ", "the", " ", "potVals", " ", 
                          "with", " ", "matrix", " ", "arranged", " ", "so", 
                          " ", "that", " ", "dimension", " ", "1", " ", "is", 
                          " ", "at", " ", "the", " ", "outer", " ", "most", 
                          " ", RowBox[{"level", ".", "\n", "\t\t\t", 
                          "Apparently"}], " ", "not", " ", RowBox[{"though", 
                          ".", "  ", "Apparently"}], " ", "the", " ", 
                          "excluded", " ", "dimension", " ", "should", " ", 
                          "be", " ", "at", " ", "the", " ", "outer", " ", 
                          "most", " ", "level"}], "..."}], "?"}]}], "\n", 
                          "\t\t\t", "*)"}], "\n", "\t\t\t", RowBox[{"Insert", 
                          "[", RowBox[{RowBox[{"Range", "[", RowBox[{"2", 
                          ",", " ", RowBox[{"Length", "[", "wfns", "]"}]}], 
                          "]"}], ",", " ", "1", ",", " ", "i"}], "]"}]}], 
                        "\n", "\t\t\t", RowBox[{"(*", RowBox[{"Insert", "[", 
                          RowBox[{RowBox[{"Range", "[", RowBox[{"1", ",", 
                          " ", RowBox[{RowBox[{"Length", "[", "wfns", "]"}], 
                          "-", "1"}]}], "]"}], ",", " ", RowBox[{"Length", 
                          "[", "wfns", "]"}], ",", " ", "i"}], "]"}], "*)"}], 
                        "\n", "\t\t\t", "]"}], ",", "\n", "\t\t", RowBox[
                       {"Delete", "[", RowBox[{"wfns", ",", " ", "i"}], 
                        "]"}]}], "\n", "\t\t", "]"}]}], ";"}], "\n", 
              RowBox[{RowBox[{RowBox[{"scfAveragePots", "[", RowBox[
                     {"potVals_", ",", " ", RowBox[{"wfns", ":", RowBox[
                         {"{", "__List", "}"}]}]}], "]"}], ":=", "\n", "\t", 
                  RowBox[{"Table", "[", "\n", "\t\t", RowBox[{RowBox[
                       {"scfAveragePot", "[", RowBox[{"potVals", ",", " ", 
                          "wfns", ",", " ", "i"}], "]"}], ",", "\n", "\t\t", 
                      RowBox[{"{", RowBox[{"i", ",", " ", RowBox[{"Length", 
                          "@", "wfns"}]}], "}"}]}], "\n", "\t\t", "]"}]}], 
                ";"}]}], "CodeInput"]}, Open]], 
        Cell[CellGroupData[{Cell["\[LeftCeiling]scfOverlapFactor\[RightFloor]\
", "CodeSubsubsection", Evaluatable -> True], 
           Cell[BoxData[{RowBox[{RowBox[{"scfOverlapFactor", "//", "Clear"}], 
                ";"}], "\n", RowBox[{RowBox[{RowBox[{"scfOverlapFactor", "[", 
                    "\n", "\t", RowBox[{RowBox[{"old", ":", RowBox[{"{", 
                          "__GridFunctionObject", "}"}]}], ",", " ", "\n", 
                      "\t", RowBox[{"new", ":", RowBox[{"{", 
                          "__GridFunctionObject", "}"}]}]}], "\n", "\t", 
                    "]"}], ":=", "\n", "\t", RowBox[{"Times", "@@", "\n", 
                    "\t\t", RowBox[{"MapThread", "[", "\n", "\t\t\t", 
                      RowBox[{RowBox[{RowBox[{RowBox[{"Flatten", "[", RowBox[
                          {"#", "[", "\"Values\"", "]"}], "]"}], ".", RowBox[
                          {"Flatten", "[", RowBox[{"#2", "[", "\"Values\"", 
                          "]"}], "]"}]}], "&"}], ",", "\n", "\t\t\t", 
                        RowBox[{"{", "\n", "\t\t\t\t", RowBox[{"old", ",", 
                          "\n", "\t\t\t\t", "new"}], "\n", "\t\t\t\t", 
                          "}"}]}], "\n", "\t\t\t", "]"}]}]}], ";"}], "\n", 
              RowBox[{RowBox[{RowBox[{"scfOverlapFactor", "[", "___", "]"}], 
                  ":=", "0"}], ";"}]}], "CodeInput"]}, Open]], 
        Cell[CellGroupData[
          {Cell["\[LeftCeiling]scfWfnsFromPots\[RightFloor]", 
            "CodeSubsubsection", Evaluatable -> True], 
           Cell[BoxData[RowBox[{RowBox[{"scfWfnsFromPots", "[", 
                 RowBox[{"wfConstructors_", ",", " ", "grids_", ",", " ", 
                   "pots_", ",", " ", "state_"}], "]"}], ":=", "\n", "\t", 
               RowBox[{"MapThread", "[", "\n", "\t\t", RowBox[
                  {"constructSCFWfn", ",", "\n", "\t\t", RowBox[{"{", "\n", 
                     "\t\t\t", RowBox[{"wfConstructors", ",", "\n", "\t\t\t", 
                       "grids", ",", "\n", "\t\t\t", "pots", ",", "\n", 
                       "\t\t\t", "state"}], "\n", "\t\t\t", "}"}]}], "\n", 
                 "\t\t", "]"}]}]], "CodeInput"]}, Open]], 
        Cell[CellGroupData[{Cell["\[LeftCeiling]initSCF\[RightFloor]", 
            "CodeSubsubsection", Evaluatable -> True], 
           Cell[BoxData[{RowBox[{"initSCF", "//", "Clear"}], "\n", 
              RowBox[{RowBox[{RowBox[{"initSCF", "[", "\n", "\t", RowBox[
                     {"wfConstructor_", ",", "\n", "\t", "potGrid_", ",", 
                      "\n", "\t", "grids_", ",", "\n", "\t", "state_"}], 
                    "\n", "\t", "]"}], ":=", "\n", "\t", RowBox[{"Module", 
                    "[", "\n", "\t\t", RowBox[{RowBox[{"{", "\n", "\t\t\t", 
                        RowBox[{"minPos", ",", "\n", "\t\t\t", "potSlices"}], 
                        "\n", "\t\t\t", "}"}], ",", "\n", "\t\t", RowBox[
                       {RowBox[{"minPos", "=", "\n", "\t\t\t", RowBox[
                          {"FirstPosition", "[", RowBox[{"potGrid", ",", " ", 
                          RowBox[{"Min", "@", "potGrid"}]}], "]"}]}], ";", 
                        "\n", "\t\t\t", RowBox[{"(*", " ", RowBox[{RowBox[
                          {RowBox[{RowBox[{"Might", " ", "be", " ", "able", 
                          " ", "to", " ", "do", " ", "this", " ", "faster"}], 
                          "..."}], "?", " ", "Somewhat"}], " ", "annoying", 
                          " ", "that", " ", "Min", " ", RowBox[{"won", "'"}], 
                          "t", " ", "also", " ", "return", " ", "the", " ", 
                          "pos", " ", "but", " ", "ah", " ", "well"}], " ", 
                          "*)"}], "\n", "\t\t", RowBox[{"potSlices", "=", 
                          "\n", "\t\t\t", RowBox[{RowBox[{RowBox[{"potGrid", 
                          "[", RowBox[{"[", RowBox[{"Sequence", "@@", RowBox[
                          {"ReplacePart", "[", RowBox[{"minPos", ",", " ", 
                          RowBox[{"#", "\[Rule]", "All"}]}], "]"}]}], "]"}], 
                          "]"}], "&"}], "/@", "\n", "\t\t\t\t", RowBox[
                          {"Range", "[", RowBox[{"Length", "@", "grids"}], 
                          "]"}]}]}], ";", "\n", "\t\t", RowBox[
                         {"scfWfnsFromPots", "[", "\n", "\t\t\t", RowBox[
                          {"wfConstructor", ",", "\n", "\t\t\t", "grids", 
                          ",", "\n", "\t\t\t", "potSlices", ",", "\n", 
                          "\t\t\t", "state"}], "\n", "\t\t\t", "]"}]}]}], 
                    "\n", "\t\t", "]"}]}], ";"}], "\n", RowBox[{
                RowBox[{RowBox[{"initSCF", "[", RowBox[{"Automatic", ",", 
                      " ", "bleh___"}], "]"}], ":=", "\n", "\t", 
                  RowBox[{"initSCF", "[", "bleh", "]"}]}], ";"}]}], 
            "CodeInput"]}, Open]], Cell[CellGroupData[
          {Cell["\[LeftCeiling]normalizeConstructors\[RightFloor]", 
            "CodeSubsubsection", Evaluatable -> True], Cell["\[LeftCeiling]\n\
\tIt would be nice to provide the grid directly and potential to avoid \
recomputation but this might be unfeasible given the different type of grids \
the DVR might require.\n\tLikely we\[CloseCurlyQuote]ll have to simply \
provide the Points, Range, and some Interpolation over the potential and \
provided grid...\n\tThis can be optimized if the KE will not depend on the \
grid at all... If that\[CloseCurlyQuote]s the case we\[CloseCurlyQuote]ll be \
able to just change up the potential we add to the DVR KE. Actually since the \
number of points and grid elements shouldn\[CloseCurlyQuote]t change this can \
be done cleaner...\n\[RightFloor]", "Text", Evaluatable -> True], 
           Cell[BoxData[{RowBox[{"normalizeConstructors", "//", "Clear"}], 
              "\n", RowBox[{RowBox[{RowBox[{"normalizeConstructors", "[", 
                    RowBox[{"{", RowBox[{"dvr_ChemDVRObject", ",", " ", 
                        RowBox[{"ops", ":", RowBox[{"OptionsPattern", "[", 
                          "]"}]}]}], "}"}], "]"}], ":=", "\n", "\t", 
                  RowBox[{"Module", "[", "\n", "\t\t", RowBox[
                     {RowBox[{"{", "\n", "\t\t\t", RowBox[{RowBox[{"opts", 
                          "=", RowBox[{"Association", "[", "ops", "]"}]}], 
                          ",", "\n", "\t\t\t", "pointNum", ",", "\n", 
                          "\t\t\t", RowBox[{"keMat", "=", "None"}], ",", 
                          "\n", "\t\t\t", "points", ",", "\n", "\t\t\t", 
                          "range", ",", "\n", "\t\t\t", "grid", ",", "\n", 
                          "\t\t\t", "pot", ",", "\n", "\t\t\t", "res"}], 
                        "\n", "\t\t\t", "}"}], ",", "\n", "\t\t", RowBox[
                       {"Function", "[", "\n", "\t\t\t", RowBox[{RowBox[
                          {"{", "\n", "\t\t\t\t", RowBox[{"grid1D", ",", 
                          "\n", "\t\t\t\t", "potential", ",", "\n", "\t", 
                          "\t\t\t", "n"}], "\n", "\t\t\t\t", "}"}], ",", 
                          "\n", "\t\t\t", RowBox[{RowBox[{"pot", "=", "\n", 
                          "\t\t\t\t", RowBox[{"Interpolation", "[", RowBox[
                          {"Transpose", "@", RowBox[{"{", RowBox[{"grid1D", 
                          ",", " ", "potential"}], "}"}]}], "]"}]}], ";", 
                          "\n", "\t\t\t", RowBox[{"If", "[", RowBox[{RowBox[
                          {"keMat", "===", "None"}], ",", "\n", "\t\t\t\t", 
                          RowBox[{"(*", " ", "\n", "\t\t\t\t", RowBox[
                          {RowBox[{RowBox[{"we", " ", "set", " ", "it", " ", 
                          "up", " ", "so", " ", "that", " ", "we", " ", 
                          "never", " ", "recompute", " ", "the", " ", "KE", 
                          " ", "or", " ", "anything"}], "..."}], "\n", 
                          "\t\t\t\t", "the", " ", "overhead", " ", "might", 
                          " ", "still", " ", "get", " ", "us", " ", "so", 
                          " ", RowBox[{"it", "'"}], "s", " ", "probably", 
                          " ", "worth", " ", "optimizing", " ", "further", 
                          " ", "after", " ", "the", " ", "first", " ", 
                          "call", " ", "but", " ", "for", " ", "now", " ", 
                          "we", "\n", "\t\t\t\t", "can", " ", "roll", " ", 
                          "with", " ", "this"}], "\n", "\t\t\t", "*)"}], 
                          "\n", "\t\t\t\t", RowBox[{RowBox[{"points", "=", 
                          RowBox[{"{", RowBox[{"Length", "@", "grid1D"}], 
                          "}"}]}], ";", "\n", "\t\t\t\t", RowBox[{"range", 
                          "=", RowBox[{"{", RowBox[{"MinMax", "@", 
                          "grid1D"}], "}"}]}], ";", "\n", "\t\t\t\t", RowBox[
                          {"res", "=", "\n", "\t\t\t\t\t", RowBox[{"dvr", 
                          "[", "\n", "\t\t\t\t\t\t", RowBox[{RowBox[
                          {"\"Points\"", "\[Rule]", "points"}], ",", "\n", 
                          "\t\t\t\t\t\t", RowBox[{"\"Range\"", "\[Rule]", 
                          "range"}], ",", "\n", "\t\t\t\t\t\t", RowBox[
                          {"\"PotentialFunction\"", "\[Rule]", "pot"}], ",", 
                          "\n", "\t\t\t\t\t\t", RowBox[{
                          "\"WavefunctionSelection\"", "\[Rule]", RowBox[
                          {"{", "n", "}"}]}]}], "\n", "\t\t\t\t\t\t", 
                          "]"}]}], ";", "\n", "\t\t\t\t", RowBox[{"keMat", 
                          "=", RowBox[{"res", "[", "\"KineticEnergy\"", 
                          "]"}]}], ";", "\n", "\t\t\t\t", RowBox[{"grid", 
                          "=", RowBox[{"res", "[", "\"Grid\"", "]"}]}], ";", 
                          "\n", "\t\t\t\t", "res"}], ",", "\n", "\t\t\t\t", 
                          RowBox[{"dvr", "[", "\n", "\t\t\t\t\t", RowBox[
                          {RowBox[{"\"Points\"", "\[Rule]", "points"}], ",", 
                          "\n", "\t\t\t\t\t", RowBox[{"\"Range\"", "\[Rule]", 
                          "range"}], ",", "\n", "\t\t\t\t\t", RowBox[
                          {"\"Grid\"", "\[Rule]", "grid"}], ",", "\n", 
                          "\t\t\t\t\t", RowBox[{"\"KineticEnergy\"", 
                          "\[Rule]", "keMat"}], ",", "\n", "\t\t\t\t\t", 
                          RowBox[{"\"PotentialFunction\"", "\[Rule]", 
                          "pot"}], ",", "\n", "\t\t\t\t\t", RowBox[
                          {"\"WavefunctionSelection\"", "\[Rule]", RowBox[
                          {"{", "n", "}"}]}]}], "\n", "\t\t\t\t\t", "]"}]}], 
                          "\n", "\t\t\t\t", "]"}]}]}], "\n", "\t\t\t", 
                        "]"}]}], "\n", "\t\t", "]"}]}], ";"}], "\n", 
              RowBox[{RowBox[{RowBox[{"normalizeConstructors", "[", 
                    "dvr_ChemDVRObject", "]"}], ":=", "\n", "\t", 
                  RowBox[{"normalizeConstructors", "[", RowBox[{"{", 
                      RowBox[{"dvr", ",", " ", RowBox[{"{", RowBox[{"(*", 
                          " ", RowBox[{RowBox[{"at", " ", "some", " ", 
                          "point", " ", "this", " ", "will", " ", "become", 
                          " ", "options", " ", "for", " ", "real"}], "..."}], 
                          " ", "*)"}], "}"}]}], "}"}], "]"}]}], ";"}], "\n", 
              RowBox[{RowBox[{RowBox[{"normalizeConstructors", "[", 
                    RowBox[{"{", RowBox[{"s_String", ",", " ", RowBox[
                         {"ops", ":", RowBox[{"OptionsPattern", "[", 
                          "]"}]}]}], "}"}], "]"}], ":=", "\n", "\t", 
                  RowBox[{"With", "[", RowBox[{RowBox[{"{", RowBox[{"res", 
                          "=", RowBox[{"ChemDVRObject", "[", RowBox[{"s", 
                          ",", " ", "ops"}], "]"}]}], "}"}], ",", "\n", 
                      "\t\t", RowBox[{RowBox[{"If", "[", RowBox[{RowBox[
                          {"!", RowBox[{"ChemDVRObjectQ", "@", "res"}]}], 
                          ",", "\n", "\t\t\t", RowBox[
                          {"PackageRaiseException", "[", "\n", "\t\t\t\t", 
                          RowBox[{"Automatic", ",", "\n", "\t\t\t\t", "\"Don'\
t know how to handle wavefunction constructor ``\"", ",", "\n", "\t\t\t\t", 
                          "s"}], "\n", "\t\t\t\t", "]"}]}], "\n", "\t\t\t", 
                          "]"}], ";", "\n", "\t\t", "res"}]}], "\n", "\t\t", 
                    "]"}]}], ";"}], "\n", RowBox[{RowBox[
                 {RowBox[{"normalizeConstructors", "[", "s_String", "]"}], 
                  ":=", "\n", "\t", RowBox[{"normalizeConstructors", "[", 
                    RowBox[{"{", RowBox[{"s", ",", " ", RowBox[{"{", "}"}]}], 
                      "}"}], "]"}]}], ";"}], "\n", RowBox[{RowBox[
                 {RowBox[{"normalizeConstructors", "[", "e_", "]"}], ":=", 
                  "\n", "\t", "e"}], ";"}]}], "CodeInput"]}, Open]], 
        Cell[CellGroupData[
          {Cell["\[LeftCeiling]iSCFWavefunction\[RightFloor]", 
            "CodeSubsubsection", Evaluatable -> True], Cell["\[LeftCeiling]\n\
\tWavefunction constructors need to be same length as pot.\n\tNeed to perform \
some type of potential check to make sure that it\[CloseCurlyQuote]s a valid \
potential that can truly be used to generate \
wavefunctions....?\n\[RightFloor]", "Text", Evaluatable -> True], 
           Cell[BoxData[RowBox[{RowBox[{"iSCFWavefunction", "[", "\n", "\t", 
                 RowBox[{"wfConstructors_", ",", "\n", "\t", 
                   "pot_GridFunctionObject", ",", "\n", "\t", RowBox[
                    {"stateVec", ":", RowBox[{"{", "___Integer", "}"}]}], 
                   ",", "\n", "\t", RowBox[{"init", ":", RowBox[
                      {"_WavefunctionsObject", "|", "_GridFunctionObject", 
                       "|", "Automatic"}]}], ",", "\n", "\t", 
                   "maxIts_Integer", ",", "\n", "\t", RowBox[{"converge", 
                     ":", RowBox[{"_Real", "?", RowBox[{"(", RowBox[
                          {RowBox[{"0", "<", "#", "<=", "1"}], "&"}], 
                         ")"}]}]}]}], "\n", "\t", "]"}], ":=", "\n", "\t", 
               RowBox[{"Catch", "@", "\n", "\t\t", RowBox[{"Module", "[", 
                   "\n", "\t\t\t", RowBox[{RowBox[{"{", "\n", "\t\t\t\t", 
                       RowBox[{"grid", ",", "\n", "\t\t\t\t", "subGrids", 
                         ",", "\n", "\t\t\t\t", "potGrid", ",", "\n", 
                         "\t\t\t\t", "dim", ",", "\n", "\t\t\t\t", "pots", 
                         ",", "\n", "\t\t\t\t", RowBox[{"iter", "=", "0"}], 
                         ",", "\n", "\t\t\t\t", "opro", ",", "\n", 
                         "\t\t\t\t", "vecs", ",", "\n", "\t\t\t\t", "old", 
                         ",", "\n", "\t\t\t\t", RowBox[{"new", "=", "None"}], 
                         ",", "\n", "\t\t\t\t", RowBox[{"states", "=", 
                          "stateVec"}], ",", "\n", "\t\t\t\t", RowBox[
                          {"constructors", "=", "wfConstructors"}], ",", 
                         "\n", "\t\t\t\t", "engs"}], "\n", "\t\t\t\t", "}"}], 
                     ",", "\n", "\t\t\t", RowBox[{RowBox[{"grid", "=", 
                         RowBox[{"Normal", "@", RowBox[{"pot", "[", 
                          "\"Grid\"", "]"}]}]}], ";", "\n", "\t\t\t", 
                       RowBox[{"potGrid", "=", RowBox[{"Normal", "@", RowBox[
                          {"pot", "[", "\"Values\"", "]"}]}]}], ";", "\n", 
                       "\t\t\t", RowBox[{"subGrids", "=", RowBox[
                          {"GridSubgrids", "@", RowBox[{"pot", "[", 
                          "\"Grid\"", "]"}]}]}], ";", "\n", "\t\t\t", 
                       RowBox[{"dim", "=", RowBox[{"Length", "@", 
                          "subGrids"}]}], ";", "\n", "\t\t\t", RowBox[
                        {"Which", "[", "\n", "\t\t\t\t", RowBox[{RowBox[
                          {"!", RowBox[{"ListQ", "@", "states"}]}], ",", 
                          "\n", "\t\t\t\t\t", RowBox[{"states", "=", RowBox[
                          {"ConstantArray", "[", RowBox[{"1", ",", " ", 
                          "dim"}], "]"}]}], ",", "\n", "\t\t\t\t", RowBox[
                          {RowBox[{"Length", "@", "states"}], "<", "dim"}], 
                          ",", "\n", "\t\t\t\t\t", RowBox[{RowBox[{"states", 
                          "=", RowBox[{"PadRight", "[", RowBox[{"states", 
                          ",", " ", "dim", ",", " ", "1"}], "]"}]}], ";"}]}], 
                         "\n", "\t\t\t\t", "]"}], ";", "\n", "\t\t\t", 
                       RowBox[{"Which", "[", "\n", "\t\t\t\t", RowBox[
                          {RowBox[{"!", RowBox[{"ListQ", "@", 
                          "constructors"}]}], ",", "\n", "\t\t\t\t\t", 
                          RowBox[{"constructors", "=", RowBox[
                          {"ConstantArray", "[", RowBox[{"constructors", ",", 
                          " ", "dim"}], "]"}]}], ",", "\n", "\t\t\t\t", 
                          RowBox[{RowBox[{"Length", "@", "constructors"}], 
                          "<", "dim"}], ",", "\n", "\t\t\t\t\t", RowBox[
                          {"PackageRaiseException", "[", "\n", 
                          "\t\t\t\t\t\t", RowBox[{"Automatic", ",", "\n", 
                          "\t\t\t\t\t\t", "\"Too few wavefunction \
constructors (``) for SCF dimension (``)\"", ",", "\n", "\t\t\t\t\t\t", 
                          RowBox[{"Length", "@", "constructors"}], ",", "\n", 
                          "\t\t\t\t\t\t", "dim"}], "\n", "\t\t\t\t\t\t", 
                          "]"}]}], "\n", "\t\t\t\t", "]"}], ";", "\n", 
                       "\t\t\t", RowBox[{"constructors", "=", RowBox[
                          {"normalizeConstructors", "/@", "constructors"}]}], 
                       ";", "\n", "\t\t\t", RowBox[{"old", "=", RowBox[
                          {"initSCF", "[", RowBox[{"init", ",", " ", 
                          "constructors", ",", " ", "potGrid", ",", " ", 
                          "subGrids", ",", " ", "states"}], "]"}]}], ";", 
                       "\n", "\t\t\t", RowBox[{"engs", "=", RowBox[{"old", 
                          "[", RowBox[{"[", RowBox[{"All", ",", " ", "1"}], 
                          "]"}], "]"}]}], ";", "\n", "\t\t\t", RowBox[
                        {"old", "=", RowBox[{"old", "[", RowBox[{"[", RowBox[
                          {"All", ",", " ", "2"}], "]"}], "]"}]}], ";", "\n", 
                       "\t\t\t", RowBox[{"vecs", "=", RowBox[{RowBox[{"(", 
                          RowBox[{RowBox[{RowBox[{"Flatten", "@", RowBox[
                          {"#", "[", "\"Values\"", "]"}]}], "&"}], "/@", 
                          "old"}], ")"}], "^", "2"}]}], ";", "\n", "\t\t\t", 
                       RowBox[{"pots", "=", RowBox[{"scfAveragePots", "[", 
                          RowBox[{"potGrid", ",", " ", "vecs"}], "]"}]}], 
                       ";", "\n", "\t\t\t", RowBox[{"While", "[", RowBox[
                          {RowBox[{RowBox[{RowBox[{"(", RowBox[{"opro", "=", 
                          RowBox[{"scfOverlapFactor", "[", RowBox[{"old", 
                          ",", " ", "new"}], "]"}]}], ")"}], "<", 
                          "converge"}], "&&", RowBox[{"iter", "<", 
                          "maxIts"}]}], ",", "\n", "\t\t\t\t", RowBox[
                          {RowBox[{"If", "[", RowBox[{RowBox[{"new", "=!=", 
                          "None"}], ",", " ", "\n", "\t\t\t\t\t", RowBox[
                          {"old", "=", "new"}], ",", "\n", "\t\t\t\t\t", 
                          RowBox[{RowBox[{"new", "=", "old"}], ";"}]}], "\n", 
                          "\t\t\t\t\t", "]"}], ";", "\n", "\t\t\t\t", RowBox[
                          {"Do", "[", "\n", "\t\t\t\t\t", RowBox[{"(*", " ", 
                          "\n", "\t\t\t\t\t", RowBox[{RowBox[{RowBox[{RowBox[
                          {"Probably", " ", "right"}], "..."}], "?", " ", 
                          "\n", "\t\t\t\t\t", "For"}], " ", "the", " ", 
                          "first", " ", "loop", " ", "we", " ", "compute", 
                          " ", "one", " ", "excessive", " ", "wfn", " ", 
                          "but", " ", RowBox[{"everything", "'"}], "s", " ", 
                          "clean", " ", "beyond", " ", "that"}], "\n", 
                          "\t\t\t\t", "*)"}], "\n", "\t\t\t\t\t", RowBox[
                          {RowBox[{RowBox[{RowBox[{"pots", "[", RowBox[{"[", 
                          "i", "]"}], "]"}], "=", "\n", "\t\t\t\t\t\t", 
                          RowBox[{"scfAveragePot", "[", RowBox[{"potGrid", 
                          ",", " ", "vecs", ",", " ", "i"}], "]"}]}], ";", 
                          "\n", "\t\t\t\t\t", RowBox[{RowBox[{"new", "[", 
                          RowBox[{"[", "i", "]"}], "]"}], "=", "\n", 
                          "\t\t\t\t\t\t", RowBox[{"constructSCFWfn", "[", 
                          "\n", "\t\t\t\t\t\t\t", RowBox[{RowBox[
                          {"constructors", "[", RowBox[{"[", "i", "]"}], 
                          "]"}], ",", "\n", "\t\t\t\t\t\t\t", RowBox[
                          {"subGrids", "[", RowBox[{"[", "i", "]"}], "]"}], 
                          ",", "\n", "\t\t\t\t\t\t\t", RowBox[{"pots", "[", 
                          RowBox[{"[", "i", "]"}], "]"}], ",", "\n", 
                          "\t\t\t\t\t\t\t", RowBox[{"states", "[", RowBox[
                          {"[", "i", "]"}], "]"}]}], "\n", "\t\t\t\t\t\t\t", 
                          "]"}]}], ";", "\n", "\t\t\t\t\t", RowBox[{RowBox[
                          {"engs", "[", RowBox[{"[", "i", "]"}], "]"}], "=", 
                          RowBox[{"new", "[", RowBox[{"[", RowBox[{"i", ",", 
                          " ", "1"}], "]"}], "]"}]}], ";", "\n", 
                          "\t\t\t\t\t", RowBox[{RowBox[{"new", "[", RowBox[
                          {"[", "i", "]"}], "]"}], "=", RowBox[{"new", "[", 
                          RowBox[{"[", RowBox[{"i", ",", " ", "2"}], "]"}], 
                          "]"}]}], ";", "\n", "\t\t\t\t\t", RowBox[{RowBox[
                          {"vecs", "[", RowBox[{"[", "i", "]"}], "]"}], "=", 
                          RowBox[{RowBox[{"(", RowBox[{"Flatten", "@", RowBox[
                          {RowBox[{"new", "[", RowBox[{"[", "i", "]"}], 
                          "]"}], "[", "\"Values\"", "]"}]}], ")"}], "^", 
                          "2"}]}]}], ",", "\n", "\t\t\t\t\t", RowBox[{"{", 
                          RowBox[{"i", ",", " ", RowBox[{"Length", "@", 
                          "pots"}]}], "}"}]}], "\n", "\t\t\t\t\t", "]"}], 
                          ";", "\n", "\t\t\t\t", RowBox[{"iter", "++"}]}]}], 
                         "\n", "\t\t\t\t", "]"}], ";", "\n", "\t\t\t", 
                       RowBox[{"<|", "\n", "\t\t\t\t", RowBox[{RowBox[
                          {"\"Energies\"", "\[Rule]", "engs"}], ",", "\n", 
                          "\t\t\t\t", RowBox[{"\"Wavefunctions\"", "\[Rule]", 
                          RowBox[{"If", "[", RowBox[{RowBox[{"!", RowBox[
                          {"ListQ", "@", "new"}]}], ",", " ", "old", ",", 
                          " ", "new"}], "]"}]}], ",", "\n", "\t\t\t\t", 
                          RowBox[{"\"OverlapProduct\"", "->", "opro"}], ",", 
                          "\n", "\t\t\t\t", RowBox[{"\"Potentials\"", ":>", 
                          "\n", "\t\t\t\t\t", RowBox[{"MapThread", "[", 
                          RowBox[{"GridFunctionObject", ",", " ", RowBox[
                          {"{", RowBox[{"subGrids", ",", " ", "pots"}], 
                          "}"}]}], "]"}]}], ",", "\n", "\t\t\t\t", RowBox[
                          {"\"Iterations\"", "\[Rule]", "iter"}]}], "\n", 
                         "\t\t\t\t", "|>"}]}]}], "\n", "\t\t\t", "]"}]}]}]], 
            "CodeInput", CellLabel -> "In[1329]:="]}, Open]], 
        Cell[CellGroupData[
          {Cell["\[LeftCeiling]iSelfConsistentWavefunctions\[RightFloor]", 
            "CodeSubsubsection", Evaluatable -> True], 
           Cell[BoxData[{RowBox[{RowBox[{RowBox[{"Options", "[", 
                    "iSelfConsistentWavefunctions", "]"}], "=", "\n", "\t", 
                  RowBox[{"{", "\n", "\t\t", RowBox[{RowBox[
                       {"\"StateVectors\"", "\[Rule]", "Automatic"}], ",", 
                      "\n", "\t\t", RowBox[{"\"InitialWavefunctions\"", 
                        "\[Rule]", "Automatic"}], ",", "\n", "\t\t", 
                      RowBox[{"\"ConvergenceGoal\"", "\[Rule]", 
                        "Automatic"}], ",", "\n", "\t\t", RowBox[
                       {"\"MaxIterations\"", "\[Rule]", "Automatic"}]}], 
                    "\n", "\t\t", "}"}]}], ";"}], "\n", RowBox[{
                RowBox[{"iSelfConsistentWavefunctions", "[", "\n", "\t", 
                  RowBox[{"wfConstructors_", ",", "\n", "\t", 
                    "pot_GridFunctionObject", ",", "\n", "\t", RowBox[
                     {"ops", ":", RowBox[{"OptionsPattern", "[", "]"}]}]}], 
                  "\n", "\t", "]"}], ":=", "\n", "\t", RowBox[
                 {"catchSCFException", "@", "\n", "\t\t", RowBox[{"Module", 
                    "[", "\n", "\t\t\t", RowBox[{RowBox[{"{", "\n", 
                        "\t\t\t\t", RowBox[{"stateVec", ",", "\n", 
                          "\t\t\t\t", "init", ",", "\n", "\t", "\t\t\t", 
                          "maxIts", ",", "\n", "\t\t\t\t", "converge", ",", 
                          "\n", "\t\t\t\t", "res"}], "\n", "\t\t\t\t", "}"}], 
                      ",", "\n", "\t\t\t", RowBox[{RowBox[{"stateVec", "=", 
                          RowBox[{"OptionValue", "[", "\"StateVectors\"", 
                          "]"}]}], ";", "\n", "\t\t\t", RowBox[{"init", "=", 
                          RowBox[{"OptionValue", "[", 
                          "\"InitialWavefunctions\"", "]"}]}], ";", "\n", 
                        "\t\t\t", RowBox[{"converge", "=", RowBox[
                          {"OptionValue", "[", "\"ConvergenceGoal\"", 
                          "]"}]}], ";", "\n", "\t\t\t", RowBox[{"maxIts", 
                          "=", RowBox[{"OptionValue", "[", 
                          "\"MaxIterations\"", "]"}]}], ";", "\n", "\t\t\t", 
                        RowBox[{"If", "[", RowBox[{RowBox[{"!", RowBox[
                          {"TrueQ", "[", RowBox[{"0", "<", "converge", "<", 
                          "1"}], "]"}]}], ",", "\n", "\t\t\t\t", RowBox[
                          {"converge", "=", ".99999"}]}], "\n", "\t\t\t\t", 
                          "]"}], ";", "\n", "\t\t\t", RowBox[{"If", "[", 
                          RowBox[{RowBox[{"!", RowBox[{"(", RowBox[{RowBox[
                          {"IntegerQ", "[", "maxIts", "]"}], "&&", RowBox[
                          {"maxIts", "\[GreaterEqual]", "0"}]}], ")"}]}], 
                          ",", "\n", "\t\t\t\t", RowBox[{"maxIts", "=", 
                          "15"}]}], "\n", "\t\t\t\t", "]"}], ";", "\n", 
                        "\t\t\t", RowBox[{"res", "=", "\n", "\t\t\t\t", 
                          RowBox[{"Which", "[", "\n", "\t\t\t\t\t", RowBox[
                          {RowBox[{"stateVec", "===", "Automatic"}], ",", 
                          "\n", "\t", "\t\t\t\t\t", RowBox[{RowBox[
                          {"stateVec", "=", RowBox[{"{", "}"}]}], ";", "\n", 
                          "\t", "\t\t\t\t\t", RowBox[{"iSCFWavefunction", 
                          "[", "\n", "\t", "\t\t\t\t\t\t", RowBox[
                          {"wfConstructors", ",", "\n", "\t", "\t\t\t\t\t\t", 
                          "pot", ",", "\n", "\t", "\t\t\t\t\t\t", "stateVec", 
                          ",", "\n", "\t", "\t\t\t\t\t\t", "init", ",", "\n", 
                          "\t", "\t\t\t\t\t\t", "maxIts", ",", "\n", "\t", 
                          "\t\t\t\t\t\t", "converge"}], "\n", "\t", 
                          "\t\t\t\t\t\t", "]"}]}], ",", "\n", "\t", 
                          "\t\t\t\t", RowBox[{"MatrixQ", "[", RowBox[
                          {"stateVec", ",", " ", "IntegerQ"}], "]"}], ",", 
                          "\n", "\t", "\t\t\t\t\t", RowBox[{RowBox[{RowBox[
                          {"iSCFWavefunction", "[", "\n", "\t", 
                          "\t\t\t\t\t\t", RowBox[{"wfConstructors", ",", 
                          "\n", "\t", "\t\t\t\t\t\t", "pot", ",", "\n", "\t", 
                          "\t\t\t\t\t\t", "#", ",", "\n", "\t", 
                          "\t\t\t\t\t\t", "init", ",", "\n", "\t", 
                          "\t\t\t\t\t\t", "maxIts", ",", "\n", "\t", 
                          "\t\t\t\t\t\t", "converge"}], "\n", "\t", 
                          "\t\t\t\t\t\t", "]"}], "&"}], "/@", "stateVec"}], 
                          ",", "\n", "\t\t\t\t\t", "True", ",", "\n", 
                          "\t\t\t\t\t\t", RowBox[{"iSCFWavefunction", "[", 
                          "\n", "\t\t\t\t\t\t\t", RowBox[{"wfConstructors", 
                          ",", "\n", "\t\t\t\t\t\t\t", "pot", ",", "\n", 
                          "\t", "\t\t\t\t\t\t", "stateVec", ",", "\n", "\t", 
                          "\t\t\t\t\t\t", "init", ",", "\n", "\t", 
                          "\t\t\t\t\t\t", "maxIts", ",", "\n", "\t", 
                          "\t\t\t\t\t\t", "converge"}], "\n", 
                          "\t\t\t\t\t\t\t", "]"}]}], "\n", "\t\t\t\t\t", 
                          "]"}]}], ";", "\n", "\t\t\t\t", RowBox[{"If", "[", 
                          RowBox[{RowBox[{"!", RowBox[{"MatchQ", "[", RowBox[
                          {"res", ",", " ", RowBox[{"_Association", "|", 
                          RowBox[{"{", "__Association", "}"}]}]}], "]"}]}], 
                          ",", "\n", "\t\t\t\t\t", RowBox[
                          {"PackageRaiseException", "[", "\n", 
                          "\t\t\t\t\t\t", RowBox[{"Automatic", ",", "\n", 
                          "\t\t\t\t\t\t", 
                          "\"Failed to generate SCF wavefunctions, got ``\"", 
                          RowBox[{"(*", 
                          "\"...and that's all I have to say\"", "*)"}], ",", 
                          "\n", "\t\t\t\t\t\t", RowBox[{"Short", "@", 
                          "res"}]}], "\n", "\t\t\t\t\t\t", "]"}]}], "\n", 
                          "\t\t\t\t\t", "]"}], ";", "\n", "\t\t\t\t", 
                        "res"}]}], "\n", "\t\t\t", "]"}]}]}]}], 
            "CodeInput"]}, Open]], Cell[CellGroupData[
          {Cell["\[LeftCeiling]SelfConsistentWavefunctions\[RightFloor]", 
            "CodeSubsubsection", Evaluatable -> True], 
           Cell[BoxData[{RowBox[{RowBox[{RowBox[{"Options", "[", 
                    "SelfConsistentWavefunctions", "]"}], "=", "\n", "\t", 
                  RowBox[{"Options", "[", "iSelfConsistentWavefunctions", 
                    "]"}]}], ";"}], "\n", RowBox[{RowBox[
                 {RowBox[{"SelfConsistentWavefunctions", "[", "\n", "\t", 
                    RowBox[{"wfConstructors_", ",", "\n", "\t", 
                      "pot_GridFunctionObject", ",", "\n", "\t", RowBox[
                       {"ops", ":", RowBox[{"OptionsPattern", "[", "]"}]}]}], 
                    "\n", "\t", "]"}], ":=", "\n", "\t", RowBox[
                   {"iSelfConsistentWavefunctions", "[", "\n", "\t\t", 
                    RowBox[{"wfConstructors", ",", "\n", "\t\t", "pot", ",", 
                      "\n", "\t\t", "ops"}], "\n", "\t\t", "]"}]}], ";"}], 
              "\n", RowBox[{RowBox[{"SelfConsistentWavefunctions", "[", "\n", 
                  "\t", RowBox[{"constructor_", ",", "\n", "\t", "grid_", 
                    ",", "\n", "\t", RowBox[{"potential_List", "?", 
                      "VectorQ"}], ",", "\n", "\t", RowBox[{"ops", ":", 
                      RowBox[{"OptionsPattern", "[", "]"}]}]}], "\n", "\t", 
                  "]"}], ":=", "\n", "\t", RowBox[{"catchSCFException", "@", 
                  "\n", "\t\t", RowBox[{"With", "[", RowBox[{RowBox[
                       {"{", RowBox[{"pot", "=", RowBox[
                          {"GridFunctionObject", "[", RowBox[{"grid", ",", 
                          " ", "potential"}], "]"}]}], "}"}], ",", "\n", 
                      "\t", "\t\t", RowBox[{"If", "[", RowBox[{RowBox[
                          {"!", RowBox[{"GridFunctionObjectQ", "@", 
                          "pot"}]}], ",", "\n", "\t", "\t\t\t", RowBox[
                          {RowBox[{"PackageRaiseException", "[", "\n", "\t", 
                          "\t\t\t\t", RowBox[{"Automatic", ",", "\n", "\t", 
                          "\t\t\t\t", "\"Potential could not be constructed \
from grid and values passed\""}], "\n", "\t", "\t\t\t\t", "]"}], ";"}]}], 
                        "\n", "\t", "\t\t\t", "]"}]}], "\n", "\t", "\t\t", 
                    "]"}]}]}]}], "CodeInput"]}, Open]]}, Open]], 
     Cell[CellGroupData[{Cell["\[LeftCeiling]Phases\[RightFloor]", 
         "CodeSubsection", Evaluatable -> True], 
        Cell[CellGroupData[{Cell["\[LeftCeiling]WFScale\[RightFloor]", 
            "CodeSubsubsection", Evaluatable -> True], 
           Cell[BoxData[{RowBox[{RowBox[{RowBox[{"WFScale", "[", RowBox[
                     {RowBox[{"gfs", ":", RowBox[{"{", 
                          "__GridFunctionObject", "}"}]}], ",", " ", "n_"}], 
                    "]"}], ":=", "\n", "\t", RowBox[{"Map", "[", RowBox[
                     {RowBox[{RowBox[{"GFScale", "[", RowBox[{"#", ",", " ", 
                          "n"}], "]"}], "&"}], ",", " ", "gfs"}], "]"}]}], 
                ";"}], "\n", RowBox[{RowBox[{"WFScale", "[", RowBox[
                   {"wf_", ",", " ", "n_"}], "]"}], ":=", "\n", "\t", 
                RowBox[{"WavefunctionsObject", "[", "\n", "\t\t", 
                  RowBox[{RowBox[{"{", "\n", "\t\t\t", RowBox[{RowBox[
                         {"wf", "[", "\"Energies\"", "]"}], ",", "\n", 
                        "\t\t\t", RowBox[{"WFScale", "[", RowBox[{RowBox[
                          {"wf", "[", "\"Wavefunctions\"", "]"}], ",", " ", 
                          "n"}], "]"}]}], "\n", "\t\t\t", "}"}], ",", "\n", 
                    "\t\t", RowBox[{"wf", "[", "\"Grid\"", "]"}]}], "\n", 
                  "\t\t", "]"}]}]}], "CodeInput"]}, Open]], 
        Cell[CellGroupData[{Cell["\[LeftCeiling]WFRephase\[RightFloor]", 
            "CodeSubsubsection", Evaluatable -> True], 
           Cell[CellGroupData[
             {Cell["\[LeftCeiling]iWFRephaseIterative\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], 
              Cell["\[LeftCeiling]\n\tIdea is that the things with max Abs \
overlap should be forced all positive or all negative. We do this pairwise \
and iteratively to compute as few overlaps as possible.\n\[RightFloor]", 
               "Text", Evaluatable -> True], Cell[BoxData[
                {RowBox[{RowBox[{RowBox[{"iWFRephaseIterative", "[", 
                       RowBox[{"baseOrder_", ",", " ", "vals_"}], "]"}], 
                     ":=", "\n", "\t", RowBox[{"Module", "[", "\n", "\t\t", 
                       RowBox[{RowBox[{"{", "\n", "\t\t\t", RowBox[{RowBox[
                          {"range", "=", RowBox[{"Range", "[", RowBox[
                          {"Length", "@", "vals"}], "]"}]}], ",", "\n", 
                          "\t\t\t", RowBox[{"orders", "=", RowBox[{"{", 
                          "}"}]}], ",", "\n", "\t\t\t", RowBox[{"prev", "=", 
                          "1"}], ",", "\n", "\t\t\t", RowBox[{"sign", "=", 
                          "baseOrder"}], ",", "\n", "\t\t\t", "signs", ",", 
                          "\n", "\t\t\t", "phases", ",", "\n", "\t\t\t", 
                          "new", ",", "\n", "\t\t\t", "comp"}], "\n", 
                          "\t\t\t", "}"}], ",", "\n", "\t\t", RowBox[
                          {RowBox[{"signs", "=", "\n", "\t\t\t", RowBox[
                          {"Table", "[", "\n", "\t\t\t\t", RowBox[{"(*", 
                          "\n", "\t", "\t\t\t\t", RowBox[{"I", " ", "know", 
                          " ", RowBox[{"you", "'"}], "re", " ", "thinking", 
                          " ", "\"is this the best way?\"", " ", "\n", "\t", 
                          "\t\t\t\t", "I", " ", "asked", " ", "myself", " ", 
                          "the", " ", "same", " ", "thing", " ", "and", " ", 
                          "I", " ", "think", " ", "it", " ", "is", " ", 
                          "for", " ", "*", "large", "*", " ", "sets", " ", 
                          "of", " ", RowBox[{"overlaps", ".", " ", "\n", 
                          "\t", "\t\t\t\t", "For"}], " ", "smaller", " ", 
                          "ones", " ", "maybe", " ", "not", " ", "but", " ", 
                          "in", " ", "the", " ", "small", " ", "case", " ", 
                          RowBox[{"it", "'"}], "s", " ", "fast", " ", 
                          "enough", " ", "anyway", " ", "to", " ", "not", 
                          " ", "care"}], " ", "\n", "\t", "\t\t\t", "*)"}], 
                          "\n", "\t", "\t\t\t", RowBox[{RowBox[{RowBox[
                          {"AppendTo", "[", RowBox[{"orders", ",", " ", 
                          "prev"}], "]"}], ";", "\n", "\t\t\t\t", RowBox[
                          {"comp", "=", RowBox[{"Complement", "[", RowBox[
                          {"range", ",", " ", "orders"}], " ", "]"}]}], ";", 
                          "\n", "\t\t\t\t", RowBox[{"phases", "=", RowBox[
                          {RowBox[{"vals", "[", RowBox[{"[", "comp", "]"}], 
                          "]"}], ".", RowBox[{"vals", "[", RowBox[{"[", " ", 
                          "prev", " ", "]"}], "]"}]}]}], ";", "\n", "\t", 
                          "\t\t\t", RowBox[{"new", "=", RowBox[{RowBox[
                          {"Ordering", "[", RowBox[{RowBox[{"Abs", "@", 
                          "phases"}], ",", " ", RowBox[{"-", "1"}]}], "]"}], 
                          "[", RowBox[{"[", "1", "]"}], "]"}]}], ";", "\n", 
                          "\t\t\t\t", RowBox[{"prev", "=", RowBox[{"comp", 
                          "[", RowBox[{"[", "new", "]"}], "]"}]}], ";", "\n", 
                          "\t\t\t\t", RowBox[{"sign", "*=", RowBox[{"Sign", 
                          "@", RowBox[{"phases", "[", RowBox[{"[", "new", 
                          "]"}], "]"}]}]}]}], ",", "\n", "\t\t\t\t", RowBox[
                          {"{", RowBox[{"n", ",", " ", "2", ",", " ", RowBox[
                          {"Length", "@", "vals"}]}], "}"}]}], "\n", 
                          "\t\t\t\t", "]"}]}], ";", "\n", "\t\t", RowBox[
                          {"AppendTo", "[", RowBox[{"orders", ",", " ", 
                          "prev"}], "]"}], ";", "\n", "\t\t", RowBox[
                          {"PrependTo", "[", RowBox[{"signs", ",", " ", 
                          "baseOrder"}], "]"}], ";", "\n", "\t\t", RowBox[
                          {"{", "\n", "\t\t\t", RowBox[{"signs", ",", "\n", 
                          "\t\t\t", "orders"}], "\n", "\t\t\t", "}"}]}]}], 
                       "\n", "\t", "]"}]}], ";"}], "\n", RowBox[
                  {RowBox[{"iWFRephaseIterative", "~", "SetAttributes", "~", 
                     "HoldRest"}], ";"}]}], "CodeInput"]}, Open]], 
           Cell[CellGroupData[
             {Cell["\[LeftCeiling]iWFRephaseBlock\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                {RowBox[{RowBox[{RowBox[{"iWFRephaseBlock", "[", RowBox[
                        {"baseOrder_", ",", " ", "vals_"}], "]"}], ":=", 
                     "\n", "\t", RowBox[{"Module", "[", "\n", "\t\t", 
                       RowBox[{RowBox[{"{", "\n", "\t\t\t", RowBox[{"block", 
                          ",", "\n", "\t\t\t", RowBox[{"range", "=", RowBox[
                          {"Range", "[", RowBox[{"Length", "@", "vals"}], 
                          "]"}]}], ",", "\n", "\t\t\t", RowBox[{"orders", 
                          "=", RowBox[{"{", "}"}]}], ",", "\n", "\t\t\t", 
                          RowBox[{"prev", "=", "1"}], ",", "\n", "\t\t\t", 
                          RowBox[{"sign", "=", "baseOrder"}], ",", "\n", 
                          "\t\t\t", "signs", ",", "\n", "\t\t\t", "phases", 
                          ",", "\n", "\t\t\t", "new", ",", "\n", "\t\t\t", 
                          "comp"}], "\n", "\t\t\t", "}"}], ",", "\n", "\t\t", 
                         RowBox[{RowBox[{"block", "=", RowBox[{"vals", ".", 
                          RowBox[{"Transpose", "[", "vals", "]"}]}]}], ";", 
                          "\n", "\t\t", RowBox[{"signs", "=", "\n", "\t\t\t", 
                          RowBox[{"Table", "[", "\n", "\t\t\t\t", RowBox[
                          {RowBox[{RowBox[{"AppendTo", "[", RowBox[{"orders", 
                          ",", " ", "prev"}], "]"}], ";", "\n", "\t\t\t\t", 
                          RowBox[{"comp", "=", RowBox[{"Complement", "[", 
                          RowBox[{"range", ",", " ", "orders"}], "]"}]}], 
                          ";", "\n", "\t\t\t\t", RowBox[{"phases", "=", 
                          RowBox[{"block", "[", RowBox[{"[", RowBox[{"prev", 
                          ",", " ", "comp"}], "]"}], "]"}]}], ";", "\n", 
                          "\t\t\t\t", RowBox[{"new", "=", RowBox[{RowBox[
                          {"Ordering", "[", RowBox[{RowBox[{"Abs", "@", 
                          "phases"}], ",", " ", RowBox[{"-", "1"}]}], "]"}], 
                          "[", RowBox[{"[", "1", "]"}], "]"}]}], ";", "\n", 
                          "\t\t\t\t", RowBox[{"prev", "=", RowBox[{"comp", 
                          "[", RowBox[{"[", "new", "]"}], "]"}]}], ";", "\n", 
                          "\t\t\t\t", RowBox[{"sign", "*=", RowBox[{"Sign", 
                          "@", RowBox[{"phases", "[", RowBox[{"[", "new", 
                          "]"}], "]"}]}]}]}], ",", "\n", "\t\t\t\t", RowBox[
                          {"{", RowBox[{"n", ",", " ", "2", ",", " ", RowBox[
                          {"Length", "@", "vals"}]}], "}"}]}], "\n", 
                          "\t\t\t\t", "]"}]}], ";", "\n", "\t\t", RowBox[
                          {"AppendTo", "[", RowBox[{"orders", ",", " ", 
                          "prev"}], "]"}], ";", "\n", "\t\t", RowBox[
                          {"PrependTo", "[", RowBox[{"signs", ",", " ", 
                          "baseOrder"}], "]"}], ";", "\n", "\t\t", RowBox[
                          {"{", "\n", "\t\t\t", RowBox[{"signs", ",", "\n", 
                          "\t\t\t", "orders"}], "\n", "\t\t\t", "}"}]}]}], 
                       "\n", "\t", "]"}]}], ";"}], "\n", RowBox[
                  {RowBox[{"iWFRephaseBlock", "~", "SetAttributes", "~", 
                     "HoldRest"}], ";"}]}], "CodeInput"]}, Open]], 
           Cell[CellGroupData[
             {Cell["\[LeftCeiling]iWFDirectRephase\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], 
              Cell[CellGroupData[{Cell[
                  "\[LeftCeiling]rephaseThingies\[RightFloor]", 
                  "CodeSubsubsubsubsection", Evaluatable -> True], 
                 Cell["\[LeftCeiling]\n\tThis should be made smarter, but the \
basic idea is that the overlap of two similar wavefunctions will determine \
its phase by being either positive or negative and there are almost no other \
options.\n\tThis requires the overlaps to truly be computed across similar \
wavefunctions.\n\[RightFloor]", "Text", Evaluatable -> True], 
                 Cell[BoxData[RowBox[{"If", "[", RowBox[{RowBox[{RowBox[
                          {"OwnValues", "[", "rephaseThingies", "]"}], 
                         "\[Equal]", RowBox[{"{", "}"}]}], ",", "\n", "\t", 
                       RowBox[{"rephaseThingies", ":=", "\n", "\t\t", 
                         RowBox[{"rephaseThingies", "=", "\n", "\t", "\t\t", 
                          RowBox[{"Compile", "[", RowBox[{RowBox[{"{", RowBox[
                          {RowBox[{"{", RowBox[{"overlaps", ",", " ", 
                          "_Real", ",", " ", "1"}], "}"}], ",", " ", RowBox[
                          {"{", RowBox[{"init", ",", " ", "_Integer"}], 
                          "}"}], ",", " ", RowBox[{"{", RowBox[{"tol", ",", 
                          " ", "_Real"}], "}"}]}], "}"}], ",", "\n", "\t", 
                          "\t", "\t\t", RowBox[{"Module", "[", RowBox[
                          {RowBox[{"{", RowBox[{"prev", ",", " ", "el", ",", 
                          " ", RowBox[{"ov", "=", "overlaps"}], ",", RowBox[
                          {"swapEl", "=", "init"}]}], "}"}], ",", "\n", "\t", 
                          "\t", "\t\t\t", RowBox[{"Prepend", "[", "\n", "\t", 
                          "\t", "\t\t\t\t", RowBox[{RowBox[{"Table", "[", 
                          "\n", "\t", "\t", "\t\t\t\t\t", RowBox[{RowBox[
                          {RowBox[{"el", "=", RowBox[{"ov", "[", RowBox[{"[", 
                          "i", "]"}], "]"}]}], ";", "\n", "\t", "\t", 
                          "\t\t\t\t\t", RowBox[{"If", "[", RowBox[{RowBox[
                          {"el", "<", RowBox[{"-", "tol"}]}], ",", " ", 
                          RowBox[{"swapEl", "=", RowBox[{"-", "swapEl"}]}]}], 
                          "]"}], ";", "\n", "\t", "\t", "\t\t\t\t\t", 
                          "swapEl"}], ",", "\n", "\t", "\t", "\t\t\t\t\t", 
                          RowBox[{"{", RowBox[{"i", ",", " ", RowBox[
                          {"Length", "@", "ov"}]}], "}"}]}], "\n", "\t", 
                          "\t", "\t\t\t\t\t", "]"}], ",", "\n", "\t", "\t", 
                          "\t\t\t\t", "init"}], "\n", "\t", "\t", "\t\t\t\t", 
                          "]"}]}], "\n", "\t", "\t", "\t\t\t", "]"}], ",", 
                          "\n", "\t", "\t", "\t\t", RowBox[
                          {"CompilationTarget", "\[Rule]", "\"C\""}]}], "\n", 
                          "\t", "\t\t\t", "]"}]}]}]}], "\n", "\t", "]"}]], 
                  "CodeInput"]}, Open]], Cell[CellGroupData[
                {Cell["\[LeftCeiling]iWFDirectRephase\[RightFloor]", 
                  "CodeSubsubsubsubsection", Evaluatable -> True], 
                 Cell[BoxData[RowBox[{RowBox[{RowBox[{"iWFDirectRephase", 
                         "[", RowBox[{"baseOrder_", ",", " ", "vals_"}], 
                         "]"}], ":=", "\n", "\t", RowBox[{"Module", "[", 
                         "\n", "\t\t", RowBox[{RowBox[{"{", "\n", "\t\t\t", 
                          RowBox[{"overlaps", ",", "\n", "\t\t\t", "phases", 
                          ",", "\n", "\t\t\t", RowBox[{"basePhase", "=", 
                          "baseOrder"}]}], "\n", "\t\t\t", "}"}], ",", "\n", 
                          "\t\t", RowBox[{RowBox[{"overlaps", "=", "\n", 
                          "\t\t\t", RowBox[{"MapThread", "[", RowBox[{"Dot", 
                          ",", " ", RowBox[{"{", RowBox[{RowBox[{"Most", "@", 
                          "vals"}], ",", " ", RowBox[{"Rest", "@", 
                          "vals"}]}], "}"}]}], "]"}]}], ";", "\n", "\t\t", 
                          RowBox[{"(*", " ", RowBox[{"might", " ", "make", 
                          " ", "sense", " ", "to", " ", "only", " ", 
                          "compute", " ", "the", " ", "necessary", " ", 
                          RowBox[{"elements", "?"}]}], "*)"}], "\n", "\t\t", 
                          RowBox[{"phases", "=", RowBox[{"rephaseThingies", 
                          "[", RowBox[{"overlaps", ",", " ", "basePhase", 
                          ",", " ", "0"}], "]"}]}], ";", "\n", "\t\t", 
                          RowBox[{"{", "\n", "\t\t\t", RowBox[{"phases", ",", 
                          "\n", "\t\t\t", RowBox[{"Range", "[", RowBox[
                          {"Length", "[", "vals", "]"}], "]"}]}], "\n", 
                          "\t\t\t", "}"}]}]}], "\n", "\t\t", "]"}]}], ";"}]], 
                  "CodeInput"]}, Open]]}, Open]], 
           Cell[CellGroupData[
             {Cell["\[LeftCeiling]iWFRephaseOrdering\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], 
              Cell["\[LeftCeiling]\n\tIdea is that the things with max Abs \
overlap should be forced all positive or all negative. We do this pairwise \
and iteratively to compute as few overlaps as possible.\n\[RightFloor]", 
               "Text", Evaluatable -> True], Cell[BoxData[RowBox[
                 {RowBox[{"iWFRephaseOrdering", "[", RowBox[{RowBox[{"wfns", 
                        ":", RowBox[{"{", RowBox[{"_GridFunctionObject", ",", 
                          " ", "__"}], "}"}]}], ",", " ", RowBox[
                       {"baseOrder", ":", RowBox[{"1", "|", RowBox[{"-", 
                          "1"}]}], ":", "1"}], ",", " ", "mode_"}], "]"}], 
                  ":=", "\n", "\t", RowBox[{"Module", "[", "\n", "\t\t", 
                    RowBox[{RowBox[{"{", "\n", "\t\t\t", RowBox[{"ovecs", 
                          ",", "\n", "\t\t\t", "bvecs", ",", "\n", "\t\t\t", 
                          "vals", ",", "\n", "\t\t\t", RowBox[{"moo", "=", 
                          "mode"}]}], "\n", "\t\t\t", "}"}], ",", "\n", 
                      "\t\t", RowBox[{"(*", " ", "\n", "\t\t\t", RowBox[
                         {"this", " ", "function", " ", "is", " ", "nice", 
                          " ", "because", " ", "it", " ", "also", " ", 
                          "does", " ", "some", " ", "typechecking", " ", 
                          "for", " ", "us"}], "\n", "\t\t", "*)"}], "\n", 
                      "\t\t", RowBox[{RowBox[{"vals", "=", "\n", "\t\t\t", 
                          RowBox[{"getWFOverlapVals", "[", "\n", "\t\t\t\t", 
                          RowBox[{RowBox[{"<|", RowBox[{"\"Wavefunctions\"", 
                          "\[Rule]", RowBox[{"{", RowBox[{"wfns", "[", RowBox[
                          {"[", "1", "]"}], "]"}], " ", "}"}]}], "|>"}], ",", 
                          "\n", "\t\t\t\t", RowBox[{"<|", RowBox[
                          {"\"Wavefunctions\"", "\[Rule]", " ", RowBox[
                          {"wfns", "[", RowBox[{"[", RowBox[{"2", ";;"}], 
                          "]"}], "]"}]}], "|>"}]}], "\n", "\t\t\t\t", 
                          "]"}]}], ";", "\n", "\t\t", RowBox[{"vals", "=", 
                          RowBox[{"Join", "@@", "vals"}]}], ";", "\n", 
                        "\t\t", RowBox[{"If", "[", RowBox[{RowBox[{"!", 
                          RowBox[{"MemberQ", "[", RowBox[{RowBox[{"{", RowBox[
                          {"\"Iterative\"", ",", " ", "\"Block\"", ",", " ", 
                          "\"Direct\""}], "}"}], ",", " ", "moo"}], "]"}]}], 
                          ",", "\n", "\t\t\t", RowBox[{"If", "[", RowBox[
                          {RowBox[{RowBox[{"Length", "@", "vals"}], ">", 
                          "3000"}], ",", " ", "\n", "\t\t\t\t", RowBox[
                          {"moo", "=", "\"Iterative\""}], ",", "\n", 
                          "\t\t\t\t", RowBox[{"moo", "=", "\"Block\""}]}], 
                          "\n", "\t\t\t\t", "]"}]}], "\n", "\t\t\t", "]"}], 
                        ";", "\n", "\t\t", RowBox[{"Switch", "[", RowBox[
                          {"moo", ",", "\n", "\t\t\t", "\"Direct\"", ",", 
                          "\n", "\t\t\t\t", RowBox[{"iWFDirectRephase", "[", 
                          RowBox[{"baseOrder", ",", " ", "vals"}], "]"}], 
                          ",", "\n", "\t\t\t", "\"Iterative\"", ",", "\n", 
                          "\t\t\t\t", RowBox[{"iWFRephaseIterative", "[", 
                          RowBox[{"baseOrder", ",", " ", "vals"}], "]"}], 
                          ",", "\n", "\t\t\t", "_", ",", "\n", "\t\t\t\t", 
                          RowBox[{"iWFRephaseBlock", "[", RowBox[
                          {"baseOrder", ",", " ", "vals"}], "]"}]}], "\n", 
                          "\t\t\t", "]"}]}]}], "\n", "\t\t", "]"}]}]], 
               "CodeInput"]}, Open]], Cell[CellGroupData[
             {Cell["\[LeftCeiling]WFRephase\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], 
              Cell["\[LeftCeiling]\n\tNeed to include phase correction over \
two states now...or across states? Force orthog?\n\[RightFloor]", "Text", 
               Evaluatable -> True], Cell[BoxData[{RowBox[
                  {RowBox[{RowBox[{"Options", "[", "WFRephase", "]"}], "=", 
                     "\n", "\t", RowBox[{"{", "\n", "\t\t", RowBox[
                        {RowBox[{"\"TargetState\"", "\[Rule]", "2"}], ",", 
                         "\n", "\t\t", RowBox[{"\"BasePhase\"", "\[Rule]", 
                          "1"}], ",", "\n", "\t\t", RowBox[{"\"Reorder\"", 
                          "\[Rule]", "False"}], ",", "\n", "\t\t", RowBox[
                          {"Method", "\[Rule]", "Automatic"}]}], "\n", 
                       "\t\t", "}"}]}], ";"}], "\n", RowBox[
                  {RowBox[{RowBox[{"WFRephase", "[", RowBox[{RowBox[{"{", 
                          RowBox[{"energies_", ",", " ", RowBox[{"wfns", ":", 
                          RowBox[{"{", RowBox[{"_GridFunctionObject", ",", 
                          " ", "__"}], "}"}]}]}], "}"}], ",", " ", RowBox[
                          {"ops", ":", RowBox[{"OptionsPattern", "[", 
                          "]"}]}]}], "]"}], ":=", "\n", "\t", RowBox[
                      {RowBox[{"PackageExceptionBlock", "[", "\"WFRephase\"", 
                         "]"}], "@", "\n", "\t", "\t", RowBox[{"Module", "[", 
                         RowBox[{RowBox[{"{", RowBox[{"res", ",", " ", "new", 
                          ",", " ", "sort", ",", " ", "phases"}], "}"}], ",", 
                          "\n", "\t\t\t", RowBox[{RowBox[{"res", "=", "\n", 
                          "\t\t\t\t", RowBox[{"iWFRephaseOrdering", "[", 
                          RowBox[{"wfns", ",", " ", "\n", "\t\t\t\t\t", 
                          RowBox[{"-", RowBox[{"1", "^", RowBox[{"(", RowBox[
                          {"!", RowBox[{"TrueQ", "[", RowBox[{RowBox[
                          {"OptionValue", "[", "\"BasePhase\"", "]"}], ">", 
                          "1"}], "]"}]}], ")"}]}]}], ",", "\n", "\t\t\t\t\t", 
                          RowBox[{"OptionValue", "[", "Method", "]"}]}], 
                          "\n", "\t\t\t\t\t", "]"}]}], ";", "\n", "\t\t\t", 
                          RowBox[{RowBox[{"{", RowBox[{"phases", ",", " ", 
                          "sort"}], "}"}], "=", "res"}], ";", "\n", "\t\t\t", 
                          RowBox[{"If", "[", RowBox[{RowBox[{"TrueQ", "@", 
                          RowBox[{"OptionValue", "[", "\"Reorder\"", "]"}]}], 
                          ",", "\n", "\t\t\t\t", RowBox[{"{", RowBox[{RowBox[
                          {"energies", "[", RowBox[{"[", "sort", "]"}], 
                          "]"}], ",", " ", RowBox[{"MapThread", "[", RowBox[
                          {"Scale", ",", " ", RowBox[{"{", RowBox[{RowBox[
                          {"wfns", "[", RowBox[{"[", "sort", "]"}], "]"}], 
                          ",", " ", "phases"}], "}"}]}], "]"}]}], "}"}], ",", 
                          "\n", "\t\t\t\t", RowBox[{"{", RowBox[{"energies", 
                          ",", " ", RowBox[{"MapThread", "[", RowBox[
                          {"Scale", ",", " ", RowBox[{"{", RowBox[{"wfns", 
                          ",", " ", RowBox[{"phases", "[", RowBox[{"[", 
                          RowBox[{"Ordering", "@", "sort"}], "]"}], "]"}]}], 
                          "}"}]}], "]"}]}], "}"}]}], "\n", "\t\t\t\t", 
                          "]"}]}]}], "\n", "\t\t\t", "]"}]}]}], ";"}], "\n", 
                 RowBox[{RowBox[{RowBox[{"WFRephase", "[", RowBox[
                        {RowBox[{"wf", ":", RowBox[{"{", 
                          "__WavefunctionsObject", "}"}]}], ",", " ", 
                         RowBox[{"ops", ":", RowBox[{"OptionsPattern", "[", 
                          "]"}]}]}], "]"}], ":=", "\n", "\t", RowBox[
                      {"Module", "[", "\n", "\t\t", RowBox[{RowBox[{"{", 
                          "\n", "\t\t\t", RowBox[{"target", ",", "\n", 
                          "\t\t\t", "fullWfn", ",", "\n", "\t\t\t", 
                          "fullScaling", ",", "\n", "\t\t\t", "res", ",", 
                          "\n", "\t\t\t", "phases", ",", "\n", "\t\t\t", 
                          "sort"}], "\n", "\t\t\t", "}"}], ",", "\n", "\t\t", 
                         RowBox[{RowBox[{"target", "=", RowBox[
                          {"OptionValue", "[", "\"TargetState\"", "]"}]}], 
                          ";", "\n", "\t\t", RowBox[{"fullWfn", "=", "\n", 
                          "\t\t\t", RowBox[{RowBox[{RowBox[{RowBox[{"#", "[", 
                          "\"Wavefunctions\"", "]"}], "[", RowBox[{"[", 
                          "target", "]"}], "]"}], "&"}], "/@", "wf"}]}], ";", 
                          "\n", "\t\t", RowBox[{"res", "=", "\n", "\t\t\t\t", 
                          RowBox[{"iWFRephaseOrdering", "[", "\n", 
                          "\t\t\t\t\t", RowBox[{"fullWfn", ",", "\n", 
                          "\t\t\t\t\t", RowBox[{"-", RowBox[{"1", "^", RowBox[
                          {"(", RowBox[{"!", RowBox[{"TrueQ", "[", RowBox[
                          {RowBox[{"OptionValue", "[", "\"BasePhase\"", 
                          "]"}], ">", "1"}], "]"}]}], ")"}]}]}], ",", "\n", 
                          "\t\t\t\t\t", RowBox[{"OptionValue", "[", "Method", 
                          "]"}]}], "\n", "\t\t\t\t\t", "]"}]}], ";", "\n", 
                          "\t\t", RowBox[{RowBox[{"{", RowBox[{"phases", ",", 
                          " ", "sort"}], "}"}], "=", "res"}], ";", "\n", 
                          "\t\t", RowBox[{"MapThread", "[", RowBox[
                          {"WFScale", ",", " ", RowBox[{"{", RowBox[{"wf", 
                          ",", " ", "phases"}], "}"}]}], "]"}]}]}], "\n", 
                       "\t\t", "]"}]}], ";"}], "\n", RowBox[
                  {RowBox[{RowBox[{"WFRephase", "[", RowBox[
                        {"wf_WavefunctionsObject", ",", " ", RowBox[{"ops", 
                          ":", RowBox[{"OptionsPattern", "[", "]"}]}]}], 
                       "]"}], ":=", "\n", "\t", RowBox[{"If", "[", RowBox[
                        {RowBox[{RowBox[{"Length", "@", "wf"}], ">", "1"}], 
                         ",", "\n", "\t\t", RowBox[{"WavefunctionsObject", 
                          "[", "\n", "\t\t\t", RowBox[{RowBox[{"WFRephase", 
                          "[", "\n", "\t\t\t\t", RowBox[{RowBox[{"{", "\n", 
                          "\t\t\t\t\t", RowBox[{RowBox[{"wf", "[", 
                          "\"Energies\"", "]"}], ",", "\n", "\t", "\t", 
                          "\t\t\t", RowBox[{"wf", "[", "\"Wavefunctions\"", 
                          "]"}]}], "\n", "\t", "\t\t\t\t", "}"}], ",", "\n", 
                          "\t\t\t\t", "ops"}], "\n", "\t\t\t\t", "]"}], ",", 
                          "\n", "\t\t\t", RowBox[{RowBox[{RowBox[{"wf", "[", 
                          "\"Wavefunctions\"", "]"}], "[", RowBox[{"[", "1", 
                          "]"}], "]"}], "[", "\"Grid\"", "]"}]}], "\n", 
                          "\t\t\t", "]"}], ",", "\n", "\t\t", "wf"}], "\n", 
                       "\t\t", "]"}]}], ";"}]}], "CodeInput"]}, Open]]}, 
          Open]], Cell[CellGroupData[
          {Cell["\[LeftCeiling]WFMerge\[RightFloor]", "CodeSubsubsection", 
            Evaluatable -> True], Cell[BoxData[
             {RowBox[{RowBox[{RowBox[{"Options", "[", "WFMerge", "]"}], "=", 
                  "\n", "\t", RowBox[{"{", "\n", "\t\t", RowBox[
                     {"\"CheckGrid\"", "\[Rule]", "True"}], "\n", "\t\t", 
                    "}"}]}], ";"}], "\n", RowBox[{RowBox[{"WFMerge", "[", 
                  RowBox[{RowBox[{"wf", ":", RowBox[{"{", 
                        "__WavefunctionsObject", "}"}]}], ",", " ", 
                    RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
                "\n", "\t", RowBox[{RowBox[{"PackageExceptionBlock", "[", 
                    "\"WFMerge\"", "]"}], "@", "\n", "\t\t", RowBox[
                   {"Module", "[", "\n", "\t\t\t", RowBox[{RowBox[{"{", "\n", 
                        "\t\t\t\t", RowBox[{"grids", ",", "\n", "\t\t\t\t", 
                          "energies", ",", "\n", "\t\t\t\t", "functions"}], 
                        "\n", "\t\t\t\t", "}"}], ",", "\n", "\t\t\t", 
                      RowBox[{RowBox[{"If", "[", RowBox[{RowBox[{RowBox[
                          {"OptionValue", "[", "\"CheckGrid\"", "]"}], "=!=", 
                          "False"}], ",", "\n", "\t\t\t\t", RowBox[{"grids", 
                          "=", RowBox[{RowBox[{RowBox[{RowBox[{RowBox[{"#", 
                          "[", "\"Wavefunctions\"", "]"}], "[", RowBox[{"[", 
                          "1", "]"}], "]"}], "[", "\"Grid\"", "]"}], "&"}], 
                          "/@", "wf"}]}], ",", "\n", "\t\t\t\t", RowBox[
                          {"If", "[", RowBox[{RowBox[{RowBox[{"Length", "@", 
                          RowBox[{"DeleteDuplicates", "[", "grids", "]"}]}], 
                          ">", "1"}], ",", "\n", "\t\t\t\t\t", RowBox[
                          {"PackageRaiseException", "[", "\n", 
                          "\t\t\t\t\t\t", RowBox[{"Automatic", ",", "\n", 
                          "\t", "\t", "\t\t\t\t", "\"Can't merge \
wavefunctions over different grids\""}], "\n", "\t\t\t\t\t\t", "]"}]}], "\n", 
                          "\t\t\t\t\t", "]"}], ",", "\n", "\t\t\t\t", RowBox[
                          {"grids", "=", RowBox[{"{", RowBox[{RowBox[{RowBox[
                          {RowBox[{"wf", "[", RowBox[{"[", "1", "]"}], "]"}], 
                          "[", "\"Wavefunctions\"", "]"}], "[", RowBox[{"[", 
                          "1", "]"}], "]"}], "[", "\"Grid\"", "]"}], 
                          "}"}]}]}], "\n", "\t\t\t\t", "]"}], ";", "\n", 
                        "\t\t\t", RowBox[{"energies", "=", RowBox[{"Apply", 
                          "[", RowBox[{"Join", ",", " ", RowBox[{RowBox[
                          {RowBox[{"#", "[", "\"Energies\"", "]"}], "&"}], 
                          "/@", "wf"}]}], "]"}]}], ";", "\n", "\t\t\t", 
                        RowBox[{"functions", "=", RowBox[{"Apply", "[", 
                          RowBox[{"Join", ",", " ", RowBox[{RowBox[{RowBox[
                          {"#", "[", "\"Wavefunctions\"", "]"}], "&"}], "/@", 
                          "wf"}]}], "]"}]}], ";", "\n", "\t\t\t", RowBox[
                         {"WavefunctionsObject", "[", "\n", "\t\t\t\t", 
                          RowBox[{RowBox[{"{", "\n", "\t\t\t\t\t", RowBox[
                          {"energies", ",", "\n", "\t\t\t\t\t", 
                          "functions"}], "\n", "\t\t\t\t\t", "}"}], ",", 
                          "\n", "\t\t\t\t", RowBox[{"grids", "[", RowBox[
                          {"[", "1", "]"}], "]"}]}], "\n", "\t\t\t\t", 
                          "]"}]}]}], "\n", "\t\t\t", "]"}]}]}]}], 
            "CodeInput"]}, Open]], Cell[CellGroupData[
          {Cell["\[LeftCeiling]WFCorrectPhase\[RightFloor]", 
            "CodeSubsubsection", Evaluatable -> True], 
           Cell[BoxData[{RowBox[{RowBox[{RowBox[{"Options", "[", 
                    "WFCorrectPhase", "]"}], "=", "\n", "\t", RowBox[
                   {"{", "\n", "\t\t", RowBox[{"\"NodelessGroundState\"", 
                      "\[Rule]", "True"}], "\n", "\t\t", "}"}]}], ";"}], 
              "\n", RowBox[{RowBox[{RowBox[{"WFCorrectPhase", "[", 
                    RowBox[{"wfns_List", ",", " ", RowBox[{"ops", ":", 
                        RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], 
                  ":=", "\n", "\t", RowBox[{"Module", "[", RowBox[
                     {RowBox[{"{", RowBox[{"phase", ",", " ", "wfs"}], "}"}], 
                      ",", "\n", "\t\t", RowBox[{RowBox[{"If", "[", RowBox[
                          {RowBox[{"TrueQ", "@", RowBox[{"OptionValue", "[", 
                          "\"NodelessGroundState\"", "]"}]}], ",", "\n", 
                          "\t\t\t", RowBox[{RowBox[{"phase", "=", RowBox[
                          {"Sign", "@", RowBox[{"wfns", "[", RowBox[{"[", 
                          "1", "]"}], "]"}]}]}], ";", "\n", "\t\t\t", RowBox[
                          {"wfs", "=", RowBox[{RowBox[{RowBox[{"phase", "*", 
                          "#"}], "&"}], "/@", "wfns"}]}]}], ",", "\n", 
                          "\t\t\t", RowBox[{RowBox[{"phase", "=", RowBox[
                          {"If", "[", RowBox[{RowBox[{RowBox[{"Total", "@", 
                          RowBox[{"wfns", "[", RowBox[{"[", "1", "]"}], 
                          "]"}]}], "<", "0"}], ",", " ", RowBox[{"-", "1"}], 
                          ",", " ", "1"}], "]"}]}], ";", "\n", "\t\t\t", 
                          RowBox[{"wfs", "=", RowBox[{"phase", "*", 
                          "wfns"}]}]}]}], "\n", "\t\t\t", "]"}], ";", "\n", 
                        "\t\t", "wfs"}]}], "\n", "\t\t", "]"}]}], ";"}], 
              "\n", RowBox[{RowBox[{"WFCorrectPhase", "[", RowBox[{"wfns_", 
                    ",", " ", RowBox[{"ops", ":", RowBox[{"OptionsPattern", 
                        "[", "]"}]}]}], "]"}], ":=", "\n", RowBox[
                 {RowBox[{"PackageExceptionBlock", "[", "\"WFCorrectPhase\"", 
                    "]"}], "@", "\n", "\t", RowBox[{"Module", "[", "\n", 
                    "\t\t", RowBox[{RowBox[{"{", "\n", "\t\t\t", RowBox[
                         {RowBox[{"wfs", "=", RowBox[{RowBox[{RowBox[
                          {"Flatten", "@", RowBox[{"#", "[", "\"Values\"", 
                          "]"}]}], "&"}], "/@", RowBox[{"wfns", "[", 
                          "\"Wavefunctions\"", "]"}]}]}], ",", "\n", 
                          "\t\t\t", "gfs", ",", "\n", "\t\t\t", RowBox[
                          {"grid", "=", RowBox[{"wfns", "[", "\"Grid\"", 
                          "]"}]}]}], "\n", "\t\t\t", "}"}], ",", "\n", 
                      "\t\t", RowBox[{RowBox[{"wfs", "=", RowBox[
                          {"WFCorrectPhase", "[", RowBox[{RowBox[
                          {"Developer`ToPackedArray", "[", "wfs", "]"}], ",", 
                          " ", "ops"}], "]"}]}], ";", "\n", "\t\t", RowBox[
                         {"gfs", "=", RowBox[{RowBox[{RowBox[
                          {"GridFunctionObject", "[", RowBox[{"grid", ",", 
                          " ", "#"}], "]"}], "&"}], "/@", "wfs"}]}], ";", 
                        "\n", "\t\t", RowBox[{"WavefunctionsObject", "@", 
                          "\n", "\t\t\t", RowBox[{"ReplacePart", "[", "\n", 
                          "\t\t\t\t", RowBox[{RowBox[{"Replace", "[", RowBox[
                          {"wfns", ",", " ", RowBox[{RowBox[{"HoldPattern", 
                          "[", RowBox[{"WavefunctionsObject", "[", "a_", 
                          "]"}], "]"}], "\[RuleDelayed]", "a"}]}], "]"}], 
                          ",", "\n", "\t\t\t\t", RowBox[{"\"Wavefunctions\"", 
                          "->", "gfs"}]}], "\n", "\t\t\t\t", "]"}]}]}]}], 
                    "\n", "\t\t", "]"}]}]}]}], "CodeInput"]}, Open]]}, 
       Open]], Cell[CellGroupData[{Cell["\[LeftCeiling]Spectra\[RightFloor]", 
         "CodeSubsection", Evaluatable -> True], 
        Cell[CellGroupData[{Cell["\[LeftCeiling]WFFrequencies\[RightFloor]", 
            "CodeSubsubsection", Evaluatable -> True], 
           Cell[CellGroupData[
             {Cell["\[LeftCeiling]subtractPairs\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                RowBox[{RowBox[{"subtractPairs", "[", RowBox[{"l_", ",", " ", 
                      "r_"}], "]"}], ":=", "\n", "\t", RowBox[{"Which", "[", 
                    "\n", "\t\t", RowBox[{RowBox[{RowBox[{RowBox[{"Length", 
                          "[", "l", "]"}], "\[Equal]", "0"}], "||", RowBox[
                         {RowBox[{"Length", "[", "r", "]"}], "\[Equal]", 
                          "0"}]}], ",", "\n", "\t\t\t", RowBox[{"r", "-", 
                        "l"}], ",", "\n", "\t\t", RowBox[{RowBox[{RowBox[
                          {"Length", "[", "l", "]"}], "\[Equal]", "1"}], 
                        "&&", RowBox[{RowBox[{"Length", "[", "r", "]"}], 
                          "\[Equal]", "1"}]}], ",", "\n", "\t\t\t", 
                      RowBox[{RowBox[{"r", "[", RowBox[{"[", "1", "]"}], 
                          "]"}], "-", RowBox[{"l", "[", RowBox[{"[", "1", 
                          "]"}], "]"}]}], ",", "\n", "\t\t", RowBox[
                       {RowBox[{"Length", "[", "l", "]"}], "\[Equal]", "1"}], 
                      ",", "\n", "\t\t\t", RowBox[{"r", "-", RowBox[{"l", 
                          "[", RowBox[{"[", "1", "]"}], "]"}]}], ",", "\n", 
                      "\t\t", RowBox[{RowBox[{"Length", "[", "r", "]"}], 
                        "\[Equal]", "1"}], ",", "\n", "\t\t\t", RowBox[
                       {RowBox[{"r", "[", RowBox[{"[", "1", "]"}], "]"}], 
                        "-", "l"}], ",", "\n", "\t\t", "True", ",", "\n", 
                      "\t\t\t", RowBox[{"Map", "[", RowBox[{RowBox[
                          {RowBox[{"subtractPairs", "[", RowBox[{"#", ",", 
                          " ", "r"}], "]"}], "&"}], ",", " ", "l"}], "]"}]}], 
                    "\n", "\t\t", "]"}]}]], "CodeInput"]}, Open]], 
           Cell[CellGroupData[
             {Cell["\[LeftCeiling]calcFreqSubVals\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                RowBox[{RowBox[{"calcFreqSubVals", "[", "spec_", "]"}], ":=", 
                  "\n", "\t", RowBox[{"MapThread", "[", "\n", "\t\t", 
                    RowBox[{RowBox[{RowBox[{"pullOpVals", "[", "\n", 
                          "\t\t\t", RowBox[{"#", ",", "\n", "\t\t\t", RowBox[
                          {"subtractPairs", "[", RowBox[{RowBox[{"#", "[", 
                          RowBox[{"[", "1", "]"}], "]"}], ",", " ", RowBox[
                          {"#2", "[", RowBox[{"[", "1", "]"}], "]"}]}], 
                          "]"}]}], "\n", "\t\t\t", "]"}], "&"}], ",", "\n", 
                      "\t\t", "spec"}], "\n", "\t\t", "]"}]}]], 
               "CodeInput"]}, Open]], Cell[CellGroupData[
             {Cell["\[LeftCeiling]iWFFrequencies\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                {RowBox[{"iWFFrequencies", "//", "Clear"}], "\n", 
                 RowBox[{RowBox[{RowBox[{"iWFFrequencies", "[", RowBox[
                        {"engs_", ",", " ", "n0_Integer"}], "]"}], ":=", 
                     "\n", "\t", RowBox[{"If", "[", RowBox[{RowBox[
                          {RowBox[{"Length", "@", "engs"}], ">", "n0"}], ",", 
                         "\n", "\t\t", RowBox[{RowBox[{"engs", "[", RowBox[
                          {"[", RowBox[{RowBox[{"n0", "+", "1"}], ";;"}], 
                          "]"}], "]"}], "-", RowBox[{"engs", "[", RowBox[
                          {"[", "n0", "]"}], "]"}]}], ",", "\n", "\t\t", 
                         RowBox[{"PackageRaiseException", "[", "\n", 
                          "\t\t\t", RowBox[{"Automatic", ",", "\n", "\t\t\t", 
                          "\"No enough energies to calculate frequencies from \
``\"", ",", "\n", "\t\t\t", "n0"}], "\n", "\t\t\t", "]"}]}], "\n", "\t\t", 
                       "]"}]}], ";"}], "\n", RowBox[{RowBox[{RowBox[
                      {"iWFFrequencies", "[", RowBox[{"engs_", ",", " ", 
                         RowBox[{"fullTSpec_", "?", "statePairListQ"}]}], 
                       "]"}], ":=", "\n", "\t", RowBox[{"calcFreqSubVals", 
                       "@", "\n", "\t\t", RowBox[{"getStatePairSelections", 
                         "[", RowBox[{"engs", ",", " ", "fullTSpec"}], 
                         "]"}]}]}], ";"}], "\n", RowBox[{RowBox[
                    {RowBox[{"iWFFrequencies", "[", RowBox[{"engs_", ",", 
                         " ", RowBox[{"fullTSpec_", "?", 
                          "basicStatePairQ"}]}], "]"}], ":=", "\n", "\t", 
                     RowBox[{"First", "@", RowBox[{"iWFFrequencies", "[", 
                         RowBox[{"engs", ",", " ", RowBox[{"{", "fullTSpec", 
                          "}"}]}], "]"}]}]}], ";"}], "\n", RowBox[
                  {RowBox[{RowBox[{"iWFFrequencies", "[", "engs_", "]"}], 
                     ":=", "\n", "\t", RowBox[{"iWFFrequencies", "[", 
                       RowBox[{"engs", ",", " ", RowBox[{"{", RowBox[{"1", 
                          ",", " ", RowBox[{"2", ";;", RowBox[{"Length", "[", 
                          "engs", "]"}]}]}], "}"}]}], "]"}]}], ";"}], "\n", 
                 RowBox[{RowBox[{RowBox[{"iWFFrequencies", "[", RowBox[
                        {"engs_", ",", " ", "a_"}], "]"}], ":=", "\n", "\t", 
                     RowBox[{"PackageRaiseException", "[", "\n", "\t\t", 
                       RowBox[{"Automatic", ",", "\n", "\t\t", 
                         "\"Can't process state specification ``\"", ",", 
                         "\n", "\t\t", "a"}], "\n", "\t\t", "]"}]}], ";"}]}], 
               "CodeInput"]}, Open]], Cell[CellGroupData[
             {Cell["\[LeftCeiling]WFFrequencies\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                {RowBox[{RowBox[{RowBox[{"WFFrequencies", "[", RowBox[
                        {"wfns_WavefunctionsObject", ",", " ", "spec_"}], 
                       "]"}], ":=", "\n", "\t", RowBox[{RowBox[
                        {"PackageExceptionBlock", "[", "\"Frequencies\"", 
                         "]"}], "@", "\n", "\t\t", RowBox[{"iWFFrequencies", 
                         "[", RowBox[{RowBox[{"wfns", "[", "\"Energies\"", 
                          "]"}], ",", " ", "spec"}], "]"}]}]}], ";"}], "\n", 
                 RowBox[{RowBox[{"WFFrequencies", "[", 
                     "wfns_WavefunctionsObject", "]"}], ":=", "\n", "\t", 
                   RowBox[{RowBox[{"PackageExceptionBlock", "[", 
                       "\"Frequencies\"", "]"}], "@", "\n", "\t\t", 
                     RowBox[{"iWFFrequencies", "[", RowBox[{"wfns", "[", 
                         "\"Energies\"", "]"}], "]"}]}]}]}], "CodeInput"]}, 
             Open]]}, Open]], Cell[CellGroupData[
          {Cell["\[LeftCeiling]getDipoleVecs\[RightFloor]", 
            "CodeSubsubsection", Evaluatable -> True], 
           Cell[BoxData[RowBox[{RowBox[{RowBox[{"getDipoleVecs", "[", 
                   RowBox[{"wfns_", ",", " ", "dfs_"}], "]"}], ":=", "\n", 
                 "\t", RowBox[{"Module", "[", "\n", "\t\t", RowBox[
                    {RowBox[{"{", "\n", "\t\t\t", RowBox[{"wfnGrid", ",", 
                         "\n", "\t\t\t", "gps", ",", "\n", "\t\t\t", 
                         "dipVals"}], "\n", "\t\t\t", "}"}], ",", "\n", 
                     "\t\t", RowBox[{RowBox[{"wfnGrid", "=", RowBox[
                          {"WFGrid", "@", "wfns"}]}], ";", "\n", "\t\t", 
                       RowBox[{"gps", "=", RowBox[{"wfnGrid", "@", 
                          "\"Points\""}]}], ";", "\n", "\t\t", RowBox[
                        {"dipVals", "=", "\n", "\t\t\t", RowBox[
                          {"Developer`ToPackedArray", "@", "\n", "\t\t\t\t", 
                          RowBox[{"If", "[", RowBox[{RowBox[{"ListQ", "@", 
                          "dfs"}], ",", " ", "\n", "\t", "\t\t\t\t", RowBox[
                          {"Map", "[", RowBox[{RowBox[{RowBox[{"GridMap", 
                          "[", RowBox[{"#", ",", " ", "gps"}], "]"}], "&"}], 
                          ",", " ", "dfs"}], "]"}], ",", "\n", "\t\t\t\t\t", 
                          RowBox[{"Transpose", "[", RowBox[{RowBox[
                          {"GridMap", "[", RowBox[{"dfs", ",", " ", "gps"}], 
                          "]"}], ",", " ", RowBox[{"RotateLeft", "[", RowBox[
                          {"Range", "[", RowBox[{RowBox[{"Depth", "[", "gps", 
                          "]"}], "-", "1"}], "]"}], "]"}]}], "]"}]}], "\n", 
                          "\t\t\t\t\t", "]"}]}]}], ";", "\n", "\t\t", 
                       RowBox[{"If", "[", RowBox[{RowBox[{RowBox[{"Length", 
                          "@", "dipVals"}], "<", "3"}], ",", "\n", "\t\t\t", 
                          RowBox[{"PackageRaiseException", "[", "\n", 
                          "\t\t\t\t", RowBox[{"Automatic", ",", "\n", 
                          "\t\t\t\t", "\"Too few dipole functions. Requires \
x, y, and z components.\""}], "\n", "\t\t\t\t", "]"}], ",", "\n", "\t\t\t", 
                          RowBox[{"dipVals", "=", RowBox[{"dipVals", "[", 
                          RowBox[{"[", RowBox[{";;", "3"}], "]"}], "]"}]}]}], 
                         "\n", "\t\t\t", "]"}], ";", "\n", "\t\t", RowBox[
                        {"Map", "[", "\n", "\t\t\t", RowBox[{RowBox[
                          {RowBox[{"GridFunctionObject", "[", RowBox[
                          {"wfnGrid", ",", " ", "#"}], "]"}], "&"}], ",", 
                          "\n", "\t\t\t", "dipVals"}], "\n", "\t\t\t", 
                         "]"}]}]}], "\n", "\t\t", "]"}]}], ";"}]], 
            "CodeInput"]}, Open]], Cell[CellGroupData[
          {Cell["\[LeftCeiling]WFTransitionMoments\[RightFloor]", 
            "CodeSubsubsection", Evaluatable -> True], 
           Cell[CellGroupData[
             {Cell["\[LeftCeiling]iWFTransitionMoments\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                RowBox[{RowBox[{"iWFTransitionMoments", "[", "\n", "\t", 
                    RowBox[{"wfns_", ",", "\n", "\t", RowBox[
                       {"dipoleVectors", ":", RowBox[{"{", RowBox[{"_List", 
                          ",", " ", "_List", ",", " ", "_List"}], "}"}]}], 
                      ",", "\n", "\t", "transitions_"}], "\n", "\t", "]"}], 
                  ":=", "\n", "\t", RowBox[{"Map", "[", "\n", "\t\t", 
                    RowBox[{RowBox[{RowBox[{"Developer`ToPackedArray", "@", 
                          "\n", "\t\t\t", RowBox[{"With", "[", RowBox[
                          {RowBox[{"{", RowBox[{"vec", "=", "#"}], "}"}], 
                          ",", "\n", "\t\t\t\t", RowBox[
                          {"WFOperatorMatrixElements", "[", "\n", 
                          "\t\t\t\t\t", RowBox[{"wfns", ",", "\n", 
                          "\t\t\t\t\t", RowBox[{"transitions", "->", RowBox[
                          {"(", RowBox[{"vec", "&"}], ")"}]}]}], "\n", "\t", 
                          "\t\t\t\t", "]"}]}], "\n", "\t", "\t\t\t", "]"}]}], 
                        "&"}], ",", "\n", "\t\t", "dipoleVectors"}], "\n", 
                    "\t\t", "]"}]}]], "CodeInput"], Cell["\[LeftCeiling]\n\tI\
f we aren\[CloseCurlyQuote]t given the dipole vectors explicitly \
we\[CloseCurlyQuote]ll generate them\n\[RightFloor]", "Text", Evaluatable -> 
                True], Cell[BoxData[RowBox[{RowBox[{"iWFTransitionMoments", 
                    "[", "\n", "\t", RowBox[{"wfns_", ",", "\n", "\t", 
                      "dfs_", ",", "\n", "\t", "transitions_"}], "\n", "\t", 
                    "]"}], ":=", "\n", "\t", RowBox[{"Module", "[", "\n", 
                    "\t\t", RowBox[{RowBox[{"{", "\n", "\t\t\t", 
                        "dipoleVecs", "\n", "\t\t\t", "}"}], ",", "\n", 
                      "\t\t", RowBox[{RowBox[{"dipoleVecs", "=", RowBox[
                          {"getDipoleVecs", "[", RowBox[{"wfns", ",", " ", 
                          "dfs"}], "]"}]}], ";", "\n", "\t\t", RowBox[
                         {"If", "[", RowBox[{RowBox[{"!", RowBox[{"AllTrue", 
                          "[", RowBox[{"dipoleVecs", ",", " ", 
                          "GridFunctionObjectQ"}], "]"}]}], ",", "\n", 
                          "\t\t\t", RowBox[{"PackageRaiseException", "[", 
                          "\n", "\t\t\t\t", RowBox[{"Automatic", ",", "\n", 
                          "\t\t\t\t", "\"Dipole functions didn't create 3 \
dipole vectors\""}], "\n", "\t\t\t\t", "]"}]}], "\n", "\t\t\t", "]"}], ";", 
                        "\n", "\t\t", RowBox[{"iWFTransitionMoments", "[", 
                          "\n", "\t\t\t", RowBox[{"wfns", ",", "\n", 
                          "\t\t\t", RowBox[{RowBox[{RowBox[{"Flatten", "@", 
                          RowBox[{"#", "@", "\"Values\""}]}], "&"}], "/@", 
                          "dipoleVecs"}], ",", "\n", "\t\t\t", 
                          "transitions"}], "\n", "\t\t\t", "]"}]}]}], "\n", 
                    "\t\t", "]"}]}]], "CodeInput"], Cell[BoxData[
                RowBox[{RowBox[{"iWFTransitionMoments", "[", "\n", "\t", 
                    RowBox[{"wfns_", ",", "\n", "\t", "dfs_"}], "\n", "\t", 
                    "]"}], ":=", "\n", "\t", RowBox[{"iWFTransitionMoments", 
                    "[", RowBox[{"wfns", ",", " ", "dfs", ",", " ", 
                      RowBox[{"{", RowBox[{"1", ",", " ", RowBox[{"2", ";;", 
                          RowBox[{"Length", "[", "wfns", "]"}]}]}], "}"}]}], 
                    "]"}]}]], "CodeInput"]}, Open]], 
           Cell[CellGroupData[
             {Cell["\[LeftCeiling]postProcessTrans\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                RowBox[{RowBox[{"postProcessTrans", "[", RowBox[
                     {"transitions_", ",", " ", "moms_"}], "]"}], ":=", "\n", 
                  "\t", RowBox[{"Which", "[", "\n", "\t\t", RowBox[
                     {RowBox[{"VectorQ", "[", RowBox[{"moms", ",", " ", 
                          "Internal`RealValuedNumericQ"}], "]"}], ",", "\n", 
                      "\t\t\t", "moms", ",", "\n", "\t\t", RowBox[
                       {RowBox[{RowBox[{"Length", "[", "moms", "]"}], 
                          "\[Equal]", "3"}], "&&", RowBox[{"MatrixQ", "[", 
                          RowBox[{"moms", ",", " ", 
                          "Internal`RealValuedNumericQ"}], "]"}]}], ",", 
                      "\n", "\t\t\t", RowBox[{"Developer`ToPackedArray", "@", 
                        RowBox[{"Transpose", "@", "moms"}]}], ",", "\n", 
                      "\t\t", "True", ",", "\n", "\t\t\t", RowBox[
                       {"MapThread", "[", "\n", "\t\t\t\t", RowBox[
                         {"postProcessTrans", ",", " ", "\n", "\t\t\t\t", 
                          RowBox[{"{", RowBox[{"transitions", ",", " ", 
                          RowBox[{"Transpose", "@", "moms"}]}], "}"}]}], 
                        "\n", "\t\t\t\t", "]"}]}], "\n", "\t\t", "]"}]}]], 
               "CodeInput"]}, Open]], Cell[CellGroupData[
             {Cell["\[LeftCeiling]WFTransitionMoments\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                RowBox[{RowBox[{"WFTransitionMoments", "[", "\n", "\t", 
                    RowBox[{"wfns_WavefunctionsObject", ",", "\n", "\t", 
                      "dipole_", ",", "\n", "\t", "transitions_"}], "\n", 
                    "\t", "]"}], ":=", "\n", "\t", RowBox[{RowBox[
                     {"PackageExceptionBlock", "[", "\"TransitionMoments\"", 
                      "]"}], "@", "\n", "\t\t", RowBox[{"Module", "[", "\n", 
                      "\t\t\t", RowBox[{RowBox[{"{", "\n", "\t\t\t\t", 
                          RowBox[{"moms", "=", RowBox[
                          {"iWFTransitionMoments", "[", RowBox[{"wfns", ",", 
                          " ", "dipole", ",", " ", "transitions"}], "]"}]}], 
                          "\n", "\t\t\t\t", "}"}], ",", "\n", "\t\t\t", 
                        RowBox[{"postProcessTrans", "[", RowBox[
                          {"transitions", ",", " ", "moms"}], "]"}]}], "\n", 
                      "\t\t\t", "]"}]}]}]], "CodeInput"]}, Open]]}, Open]], 
        Cell[CellGroupData[
          {Cell["\[LeftCeiling]WFOscillatorStrengths\[RightFloor]", 
            "CodeSubsubsection", Evaluatable -> True], 
           Cell[CellGroupData[{Cell["\[LeftCeiling]normTmVecs\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                RowBox[{RowBox[{"normTMVecs", "[", "tms_", "]"}], ":=", "\n", 
                  "\t", RowBox[{"Module", "[", RowBox[{RowBox[{"{", RowBox[
                         {RowBox[{"d", "=", RowBox[{"Depth", "[", "tms", 
                          "]"}]}], ",", " ", RowBox[{"dim", "=", RowBox[
                          {"Dimensions", "[", "tms", "]"}]}]}], "}"}], ",", 
                      "\n", "\t\t", RowBox[{"If", "[", RowBox[{RowBox[
                          {RowBox[{RowBox[{"Length", "[", "dim", "]"}], "==", 
                          RowBox[{"d", "-", "1"}]}], "&&", RowBox[{RowBox[
                          {"dim", "[", RowBox[{"[", RowBox[{"-", "1"}], 
                          "]"}], "]"}], "\[Equal]", "3"}]}], ",", "\n", 
                          "\t\t\t", RowBox[{"Map", "[", "\n", "\t\t\t\t", 
                          RowBox[{RowBox[{RowBox[{"Dot", "[", RowBox[{"#", 
                          ",", " ", "#"}], "]"}], "&"}], ",", "\n", 
                          "\t\t\t\t", "tms", ",", "\n", "\t\t\t\t", RowBox[
                          {"{", RowBox[{"d", "-", "2"}], "}"}]}], "\n", 
                          "\t\t\t\t", "]"}], ",", "\n", "\t\t\t", RowBox[
                          {"normTMVecs", "/@", "tms"}]}], "\n", "\t\t\t", 
                        "]"}]}], "\n", "\t\t", "]"}]}]], "CodeInput"]}, 
             Open]], Cell[CellGroupData[
             {Cell["\[LeftCeiling]iWFOscillatorStrengths\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                {RowBox[{RowBox[{RowBox[{"iWFOscillatorStrengths", "[", "\n", 
                       "\t", RowBox[{"wfs_", ",", "\n", "\t", "dip_", ",", 
                         "\n", "\t", "transitions_"}], "\n", "\t", "]"}], 
                     ":=", "\n", "\t", RowBox[{"Module", "[", "\n", "\t\t", 
                       RowBox[{RowBox[{"{", "\n", "\t\t\t", RowBox[{"tmoms", 
                          ",", "\n", "\t\t\t", "norm2ed"}], "\n", "\t\t\t", 
                          "}"}], ",", "\n", "\t\t", RowBox[{RowBox[{"tmoms", 
                          "=", RowBox[{"WFTransitionMoments", "[", RowBox[
                          {"wfs", ",", " ", "dip", ",", " ", "transitions"}], 
                          "]"}]}], ";", "\n", "\t\t", RowBox[{"norm2ed", "=", 
                          RowBox[{"normTMVecs", "[", "tmoms", "]"}]}], ";", 
                          "\n", "\t\t", RowBox[{"norm2ed", "/", RowBox[
                          {"Max", "[", "norm2ed", "]"}]}]}]}], "\n", "\t\t", 
                       "]"}]}], ";"}], "\n", RowBox[{RowBox[{RowBox[
                      {"iWFOscillatorStrengths", "[", "\n", "\t", RowBox[
                        {"wfs_", ",", "\n", "\t", "dip_", ",", "\n", "\t", 
                         "n_Integer"}], "\n", "\t", "]"}], ":=", "\n", "\t", 
                     RowBox[{"iWFOscillatorStrengths", "[", "\n", "\t\t", 
                       RowBox[{"wfs", ",", "\n", "\t\t", "dip", ",", "\n", 
                         "\t\t", RowBox[{"{", RowBox[{"n", ",", " ", RowBox[
                          {RowBox[{"n", "+", "1"}], ";;", RowBox[{"Length", 
                          "[", "wfs", "]"}]}]}], "}"}]}], "\n", "\t\t", 
                       "]"}]}], ";"}], "\n", RowBox[{RowBox[{RowBox[
                      {"iWFOscillatorStrengths", "[", "\n", "\t", RowBox[
                        {"wfs_", ",", "\n", "\t", "dip_"}], "\n", "\t", 
                       "]"}], ":=", "\n", "\t", RowBox[
                      {"iWFOscillatorStrengths", "[", "\n", "\t\t", RowBox[
                        {"wfs", ",", "\n", "\t\t", "dip", ",", "\n", "\t\t", 
                         "1"}], "\n", "\t\t", "]"}]}], ";"}]}], 
               "CodeInput"]}, Open]], Cell[CellGroupData[
             {Cell["\[LeftCeiling]WFOscillatorStrengths\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                RowBox[{RowBox[{"WFOscillatorStrengths", "[", RowBox[
                     {"wfs_WavefunctionsObject", ",", " ", "dip_", ",", " ", 
                      "spec___"}], "]"}], ":=", "\n", "\t", RowBox[
                   {RowBox[{"PackageExceptionBlock", "[", 
                      "\"OscillatorStrengths\"", "]"}], "@", "\n", "\t\t", 
                    RowBox[{"iWFOscillatorStrengths", "[", RowBox[{"wfs", 
                        ",", " ", "dip", ",", " ", "spec"}], "]"}]}]}]], 
               "CodeInput"]}, Open]]}, Open]], 
        Cell[CellGroupData[{Cell["\[LeftCeiling]WFIntensities\[RightFloor]", 
            "CodeSubsubsection", Evaluatable -> True], 
           Cell[CellGroupData[
             {Cell["\[LeftCeiling]transposeInts\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                RowBox[{RowBox[{"transposeInts", "[", RowBox[{"freqs_", ",", 
                      " ", "oscs_"}], "]"}], ":=", "\n", "\t", RowBox[
                   {"Which", "[", "\n", "\t\t", RowBox[{RowBox[{RowBox[
                         {"Depth", "[", "freqs", "]"}], "\[Equal]", "1"}], 
                      ",", "\n", "\t\t\t", RowBox[{"{", RowBox[{"freqs", ",", 
                          " ", "oscs"}], "}"}], ",", "\n", "\t\t", RowBox[
                       {RowBox[{"Depth", "[", "freqs", "]"}], "\[Equal]", 
                        "2"}], ",", "\n", "\t\t\t", RowBox[{"Transpose", "[", 
                        RowBox[{"{", RowBox[{"freqs", ",", " ", "oscs"}], 
                          "}"}], "]"}], ",", "\n", "\t\t", RowBox[
                       {RowBox[{RowBox[{"Depth", "[", "freqs", "]"}], "-", 
                          "1"}], "==", RowBox[{"Length", "@", RowBox[
                          {"Dimensions", "[", "freqs", "]"}]}]}], ",", "\n", 
                      "\t\t\t", RowBox[{"Transpose", "[", RowBox[{RowBox[
                          {"{", RowBox[{"freqs", ",", " ", "oscs"}], "}"}], 
                          ",", " ", RowBox[{"RotateRight", "[", RowBox[
                          {"Range", "[", RowBox[{"Length", "@", RowBox[
                          {"Dimensions", "[", "freqs", "]"}]}], "]"}], 
                          "]"}]}], "]"}], ",", "\n", "\t\t", "True", ",", 
                      "\n", "\t\t\t", RowBox[{"MapThread", "[", "\n", 
                        "\t\t\t\t", RowBox[{"transposeInts", ",", "\n", 
                          "\t\t\t\t", RowBox[{"{", RowBox[{"freqs", ",", " ", 
                          "oscs"}], "}"}]}], "\n", "\t", "\t\t\t", "]"}]}], 
                    "\n", "\t\t", "]"}]}]], "CodeInput"]}, Open]], 
           Cell[CellGroupData[
             {Cell["\[LeftCeiling]WFIntensities\[RightFloor]", 
               "CodeSubsubsubsection", Evaluatable -> True], Cell[BoxData[
                RowBox[{RowBox[{"WFIntensities", "[", RowBox[
                     {"wfs_WavefunctionsObject", ",", " ", "dip_", ",", " ", 
                      "spec___"}], "]"}], ":=", "\n", "\t", RowBox[
                   {"Module", "[", "\n", "\t\t", RowBox[{RowBox[{"{", "\n", 
                        "\t\t\t", RowBox[{"freqs", ",", "\n", "\t\t\t", 
                          "oscs"}], "\n", "\t\t\t", "}"}], ",", "\n", "\t\t", 
                      RowBox[{RowBox[{"freqs", "=", RowBox[{"WFFrequencies", 
                          "[", RowBox[{"wfs", ",", " ", "spec"}], "]"}]}], 
                        ";", "\n", "\t\t", RowBox[{"oscs", "=", RowBox[
                          {"WFOscillatorStrengths", "[", RowBox[{"wfs", ",", 
                          " ", "dip", ",", " ", "spec"}], "]"}]}], ";", "\n", 
                        "\t\t", RowBox[{"transposeInts", "[", RowBox[
                          {"freqs", ",", " ", RowBox[{RowBox[{RowBox[{"#", 
                          "/", RowBox[{"Max", "[", "#", "]"}]}], "&"}], "[", 
                          RowBox[{"freqs", "*", "oscs"}], "]"}]}], "]"}]}]}], 
                    "\n", "\t\t", "]"}]}]], "CodeInput"]}, Open]]}, Open]]}, 
       Open]], Cell[BoxData[RowBox[{RowBox[{"End", "[", "]"}], ";"}]], 
      "InputSection"]}, Open]], Cell["", "SectionSeparator"]}, 
 WindowSize -> {808, 755}, WindowMargins -> {{295, Automatic}, 
   {43, Automatic}}, TaggingRules -> 
  {"UUIDButtons" -> 
    {"Active" -> {"Button-b8297203-6b28-48f9-8ba3-edbd5eb431d2" -> False, 
       "Button-8c92aebb-2725-4f7c-a6a8-f90e3a4dce9c" -> False, 
       "Button-ede3a027-3279-40a0-8aa4-1fcc5f60357d" -> False, 
       "Button-89ffd2c3-ec41-4179-a9b1-8e28670bca2c" -> False, 
       "Button-ca46e5e0-4fd1-47e8-8cf6-72998922b757" -> False, 
       "Button-a6d68254-3684-4d32-83fc-e5ef6f443930" -> False}}}, 
 FrontEndVersion -> 
  "11.3 for Mac OS X x86 (32-bit, 64-bit Kernel) (March 5, 2018)", 
 StyleDefinitions -> FrontEnd`FileName[{"BTools"}, "CodePackage.nb", 
   CharacterEncoding -> "UTF-8"]]
