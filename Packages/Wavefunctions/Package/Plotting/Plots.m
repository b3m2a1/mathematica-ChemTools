(* ::Package:: *)

(* Autogenerated Package *)

GFPlot::usage="";


Begin["`Private`"];


(* ::Subsection:: *)
(*Plot Types*)



(* ::Subsubsection::Closed:: *)
(*GFPlotCartesian1D*)



Options[GFPlotCartesian1D]=
  Join[
    $GFPlotOptions,
    {
      AxesOrigin->{0,0},
      PlotRange->Automatic
      },
    FilterRules[Options[ListLinePlot],
      Except[AxesOrigin|PlotRange]
      ]
    ];
GFPlotCartesian1D[
  gfs_,
  ops:OptionsPattern[]
  ]:=
  GFPlotBasic[
    gfs,
    GFPlotCartesian1D, ListLinePlot,
    ops
    ]


(* ::Subsubsection::Closed:: *)
(*GFPlotCartesian2D*)



Options[GFPlotCartesian2D]=
  Join[
    $GFPlotOptions,
    Options[ListPlot3D]
    ];
GFPlotCartesian2D[
  gfs_,
  ops:OptionsPattern[]
  ]:=
  GFPlotBasic[
    gfs,
    GFPlotCartesian2D, ListPlot3D,
    ops
    ]


(* ::Subsubsection::Closed:: *)
(*GFPlotCartesian3D*)



Options[GFPlotCartesian3D]=
  Join[
    $GFPlotOptions,
    Options[ContourPlot3D]
    ];
GFPlotCartesian3D[
  gfs_,
  ops:OptionsPattern[]
  ]:=
  GFPlotBasic[
    gfs,
    GFPlotCartesian3D, ContourPlot3D,
    ops
    ]


(* ::Subsubsection::Closed:: *)
(*GFPlotCartesianPoints1D*)



Options[GFPlotCartesianPoints1D]=
  Join[
    $GFPlotOptions,
    Options[ListPlot]
    ];
GFPlotCartesianPoints1D[
  gfs_,
  ops:OptionsPattern[]
  ]:=
  GFPlotBasic[
    gfs,
    GFPlotCartesianPoints1D, ListPlot,
    ops
    ]


(* ::Subsubsection::Closed:: *)
(*GFPlotCartesianPoints3D*)



Options[GFPlotCartesianPoints2D]=
  Join[
    $GFPlotOptions,
    Options[ListPointPlot3D]
    ];
GFPlotCartesianPoints2D[
  gfs_,
  ops:OptionsPattern[]
  ]:=
  GFPlotBasic[
    gfs,
    GFPlotCartesianPoints2D, ListPointPlot3D,
    ops
    ]


(* ::Subsubsection::Closed:: *)
(*GFPlotCartesian2D*)



Options[GFPlotCartesian2D]=
  Join[
    $GFPlotOptions,
    Options[ListPlot3D]
    ];
GFPlotCartesian2D[
  gfs_,
  ops:OptionsPattern[]
  ]:=
  GFPlotBasic[
    gfs,
    GFPlotCartesian2D, ListPlot3D,
    ops
    ]


(* ::Subsubsection::Closed:: *)
(*GFPlotPoints1D*)



(* ::Subsubsubsection::Closed:: *)
(*iGFPlotPoint2D*)



iGFPlotPoint2D//Clear
Options[iGFPlotPoint2D]=
  Join[
    Options[ListPlot],
    {
      OpacityFunction->Automatic,
      OpacityFunctionScaling->True
      }
    ];
iGFPlotPoint2D[pts_, ops:OptionsPattern[]]:=
  Module[
    {
      ptLocs=
        Append[#, 0]&/@pts[[All, 1]], 
      vops,
      opf=
        Replace[OptionValue[OpacityFunction], 
          Automatic:>(.2+#[[2]]&)
          ],
      cf=
        Replace[OptionValue[ColorFunction],
          {
            Automatic:>
              With[{cd=ColorData["Rainbow"]},
                (cd[#[[2]]]&)
                ],
            s:_String|_List:>
              With[{cd=ColorData[s]},
                (cd[#[[2]]]&)
                ]
            }
          ],
      vcols,
      pr=Replace[OptionValue[PlotRange], {a_, b_}:>{a, {-.1, .1}}]
      },
    vops=
      opf/@
        If[OptionValue[OpacityFunctionScaling]=!=False, 
          Rescale@pts, 
          pts
          ];
    vcols=
      cf/@
        If[OptionValue[ColorFunctionScaling]=!=False, 
          Rescale@pts, 
          pts
          ];
    ReplaceAll[
      ListPlot[
        ptLocs,
        Evaluate@
          FilterRules[
            {
              PlotRange->pr,
              ops
              },
            Options[ListPlot]
            ]
        ],
      {a___, p_Point, b___}:>
        {a, Append[p, VertexColors->Thread[Directive[vops, vcols]]], b}
      ]
    ];


(* ::Subsubsubsection::Closed:: *)
(*GFPlotPoints1D*)



Options[GFPlotPoints1D]=
  Join[
    $GFPlotOptions,
    Options[iGFPlotPoint1D]
    ];
GFPlotPoints1D[
  gfs_,
  ops:OptionsPattern[]
  ]:=
  GFPlotBasic[
    gfs,
    GFPlotPoints1D, iGFPlotPoint1D,
    ops
    ]


(* ::Subsubsection::Closed:: *)
(*GFPlotPoints2D*)



(* ::Subsubsubsection::Closed:: *)
(*iGFPlotPoint2D*)



iGFPlotPoint2D//Clear
Options[iGFPlotPoint2D]=
  Join[
    Options[ListPlot],
    {
      OpacityFunction->Automatic,
      OpacityFunctionScaling->True
      }
    ];
iGFPlotPoint2D[pts_, ops:OptionsPattern[]]:=
  Module[
    {
      ptLocs=
        pts[[All, ;;2]],
      vops,
      opf=
        Replace[OptionValue[OpacityFunction], 
          Automatic:>(.2+#[[3]]&)
          ],
      cf=
        Replace[OptionValue[ColorFunction],
          {
            Automatic:>
              With[{cd=ColorData["Rainbow"]},
                (cd[#[[3]]]&)
                ],
            s:_String|_List:>
              With[{cd=ColorData[s]},
                (cd[#[[3]]]&)
                ]
            }
          ],
      vcols,
      pr=Replace[OptionValue[PlotRange], {a_, b_, c_}:>{a, b}]
      },
    vops=
      opf/@
        If[OptionValue[OpacityFunctionScaling]=!=False, 
          Rescale@pts, 
          pts
          ];
    vcols=
      cf/@
        If[OptionValue[ColorFunctionScaling]=!=False, 
          Rescale@pts, 
          pts
          ];
    ReplaceAll[
      ListPlot[
        ptLocs,
        Evaluate@
          FilterRules[
            {
              PlotRange->pr,
              ops
              },
            Options[ListPlot]
            ]
        ],
      {a___, p_Point, b___}:>
        {a, Append[p, VertexColors->Thread[Directive[vops, vcols]]], b}
      ]
    ];


(* ::Subsubsubsection::Closed:: *)
(*GFPlotPoint2D*)



Options[GFPlotPoints2D]=
  Join[
    $GFPlotOptions,
    Options[iGFPlotPoint2D]
    ];
GFPlotPoints2D[
  gfs_,
  ops:OptionsPattern[]
  ]:=
  GFPlotBasic[
    gfs,
    GFPlotPoints2D, iGFPlotPoint2D,
    ops
    ]


(* ::Subsubsection::Closed:: *)
(*GFPlotPoints3D*)



(* ::Subsubsubsection::Closed:: *)
(*iGFPlotPoints3D*)



iGFPlotPoints3D//Clear
Options[iGFPlotPoints3D]=
  Join[
    Options[ListPointPlot3D],
    {
      OpacityFunction->Automatic,
      OpacityFunctionScaling->True
      }
    ];
iGFPlotPoints3D[pts_, ops:OptionsPattern[]]:=
  Module[
    {
      ptLocs=pts[[All, ;;3]],
      vops,
      opf=
        Replace[OptionValue[OpacityFunction], 
          Automatic:>(#[[4]]&)
          ],
      cf=
        Replace[OptionValue[ColorFunction],
          {
            Automatic:>
              With[{cd=ColorData["Rainbow"]},
                (cd[#[[4]]]&)
                ],
            s:_String|_List:>
              With[{cd=ColorData[s]},
                (cd[#[[4]]]&)
                ]
            }
          ],
      vcols,
      pr=Replace[OptionValue[PlotRange], {a_, b_, c_, d_}:>{a, b, c}]
      },
    vops=
      Thread@
        Opacity[
          opf/@
            If[OptionValue[OpacityFunctionScaling]=!=False, 
              Transpose@Map[Rescale]@Transpose@pts, 
              pts
              ]
          ];
    vcols=
      cf/@
        If[OptionValue[ColorFunctionScaling]=!=False, 
          Transpose@Map[Rescale]@Transpose@pts, 
          pts
          ];
    ReplaceAll[
      ListPointPlot3D[
        ptLocs,
        Evaluate@
          FilterRules[
            {
              PlotRange->pr,
              ops, 
              BoxRatios->{1,1,1}
              },
            Options[ListPointPlot3D]
            ]
        ],
      {a___, p_Point, b___}:>
        {a, Append[p, VertexColors->Thread[Directive[vops, vcols]]], b}
      ]
    ];


(* ::Subsubsubsection::Closed:: *)
(*GFPlotPoints3D*)



Options[GFPlotPoints3D]=
  Join[
    $GFPlotOptions,
    Options[iGFPlotPoints3D]
    ];
GFPlotPoints3D[
  gfs_,
  ops:OptionsPattern[]
  ]:=
  GFPlotBasic[
    gfs,
    GFPlotPoints3D, iGFPlotPoints3D,
    ops
    ]


(* ::Subsubsection::Closed:: *)
(*GFPlotPointsPolar*)



Options[GFPlotPointsPolar]=
  Join[
    $GFPlotOptions,
    Options[iGFPlotPoint2D]
    ];
GFPlotPointsPolar[
  gfs_,
  ops:OptionsPattern[]
  ]:=
  GFPlotBasic[
    gfs,
    GFPlotPointsPolar, iGFPlotPoint2D,
    ops,
    "CoordinateTransformation"->
      ("Polar" -> "Cartesian")
    ]


(* ::Subsubsection::Closed:: *)
(*GFPlotPointsShell*)



Options[GFPlotPointsShell]=
  Join[
    $GFPlotOptions,
    Options[iGFPlotPoint3D]
    ];
GFPlotPointsShell[
  gfs_,
  ops:OptionsPattern[]
  ]:=
  GFPlotBasic[
    gfs,
    GFPlotPointsShell, iGFPlotPoint3D,
    "CoordinateTransformation"->
      (Evaluate@
          CoordinateTransform["Spherical"->"Cartesian", {1, #2, #}]&/.
          Slot[n_]:>#[[n]]
          ),
    ops
    ]


(* ::Subsubsection::Closed:: *)
(*GFPlotPointsSpherical*)



Options[GFPlotPointsSpherical]=
  Join[
    $GFPlotOptions,
    Options[iGFPlotPoint3D]
    ];
GFPlotPointsSpherical[
  gfs_,
  ops:OptionsPattern[]
  ]:=
  GFPlotBasic[
    gfs,
    GFPlotPointsSpherical, iGFPlotPoint3D,
    ops,
    "CoordinateTransformation"->
      ("Spherical" -> "Cartesian")
    ]


(* ::Subsubsection::Closed:: *)
(*GFPlotRing*)



Options[GFPlotRing]=
  DeleteDuplicatesBy[First]@
    Join[
      {
        "Shifting"->1,
        Joined->True
        },
      $GFPlotOptions,
      Options[ListPolarPlot]
      ];
GFPlotRing[
  gfs_,
  ops:OptionsPattern[]
  ]:=
  GFPlotBasic[
    gfs,
    GFPlotRing, ListPolarPlot,
    ops,
    "Shifting"->1,
    Joined->True,
    PlotRange->All,
    PolarAxes->True
    ]


(* ::Subsubsection::Closed:: *)
(*GFPlotRing3D*)



(* ::Subsubsubsection::Closed:: *)
(*iGFPlotRing3D*)



iGFPlotRing3D//Clear
Options[iGFPlotRing3D]=
  Options[ListPointPlot3D];
iGFPlotRing3D[pts_, ops:OptionsPattern[]]:=
  ReplaceAll[
    ListPointPlot3D[pts,
      Evaluate@FilterRules[{ops}, Options[ListPointPlot3D]]
      ],
    {a___, p_Point, b___}:>
      {AbsoluteThickness[2], a, Line@@Insert[p, p[[1, 1]], {1, -1}], b}
    ];


(* ::Subsubsubsection::Closed:: *)
(*GFPlotRing3D*)



Options[GFPlotRing3D]=
  DeleteDuplicatesBy[First]@
    Join[
      $GFPlotOptions,
      Options[ListPointPlot3D]
      ];
GFPlotRing3D[
  gfs_,
  ops:OptionsPattern[]
  ]:=
  GFPlotBasic[
    gfs,
    GFPlotRing3D, iGFPlotRing3D,
    ops,
    "CoordinateTransformation"->
      ({Cos[#], Sin[#]}&)
    ]


(* ::Subsubsection::Closed:: *)
(*GFPlotPolar*)



Options[GFPlotPolar]=
  Join[
    $GFPlotOptions,
    Options[ListPlot3D]
    ];
GFPlotPolar[
  gfs_,
  ops:OptionsPattern[]
  ]:=
  With[{gridpoints=gfs[[1]]["Grid"]["Points"]},
    GFPlotBasic[
      gfs,
      GFPlotPolar, ListPlot3D,
      ops,
      "CoordinateTransformation"->
        ("Polar" -> "Cartesian"),
      RegionMemberFunction->
        RegionMember[
          Annulus[
            {0, 0}, 
            MinMax[gridpoints[[All, 1]]],
            MinMax[gridpoints[[All, 2]]]
            ]
          ]
      ]
    ];


(* ::Subsubsection::Closed:: *)
(*GFPlotShell*)



(* ::Subsubsubsection::Closed:: *)
(*iGFDefaultShellPlot*)



Options[iGFDefaultShellPlot]=
  Options[SphericalPlot3D];
iGFDefaultShellPlot[gps_, ops:OptionsPattern[]]:=
  Module[
    {
      int,
      cf=
        Replace[OptionValue[ColorFunction],
          {
            s:_String|_List:>
              (Evaluate[ColorData[s][#6]]&),
            c:_ColorData:>
              (c[#6]&)
            }
          ]
      },
    int=Quiet@Interpolation[gps];
    Quiet@
      SphericalPlot3D[
        int[j, q],
        {q, 0, \[Pi]},
        {j, 0, 2\[Pi]},
        ColorFunction->cf,
        ops
        ]
    ]


(* ::Subsubsubsection::Closed:: *)
(*GFPlotShell*)



Options[GFPlotShell]=
  DeleteDuplicatesBy[First]@
    Join[
      $GFPlotOptions,
      Options[iGFDefaultShellPlot]
      ];
GFPlotShell[
  gfs_,
  ops:OptionsPattern[]
  ]:=
  GFPlotBasic[
    gfs,
    GFPlotShell, 
    iGFDefaultShellPlot,
    ops,
    "Rescaling"->{.5, .6}
    ]


(* ::Subsubsection::Closed:: *)
(*GFPlotSpherical*)



Options[GFPlotSpherical]=
  Join[
    $GFPlotOptions,
    Options[ListContourPlot3D]
    ];
GFPlotSpherical[
  gfs_,
  ops:OptionsPattern[]
  ]:=
  GFPlotBasic[
    gfs,
    GFPlotSpherical, ListContourPlot3D,
    ops,
    "CoordinateTransformation"->
      ("Spherical" -> "Cartesian")
    ]


(* ::Subsubsection::Closed:: *)
(*GFPlotDensity1D*)



(* ::Subsubsubsection::Closed:: *)
(*iGFPlotDensity1D*)



iGFPlotDensity1D//Clear
Options[iGFPlotDensity1D]=
  Options[ListLinePlot];
iGFPlotDensity1D[pts_, ops:OptionsPattern[]]:=
  With[
    {
      gp=
        pts[[All, 1]],
      wv=
        If[OptionValue[ColorFunctionScaling]=!=False,
          Rescale,
          Identity
          ]@pts[[All, 2]],
      cf=
        Replace[Quiet@ColorData@OptionValue[ColorFunction],
          {
            HoldPattern[ColorData[Automatic]]:>
              ColorData["TemperatureMap"],
            HoldPattern[ColorData[f_]]:>f
            }
          ]
      },
    ReplaceAll[
      ListLinePlot[
        Thread@{gp, 1},
        Evaluate@
          FilterRules[
            {ops, Axes->{True, False}}, 
            Options[ListLinePlot]
            ]
        ],
      {a___, l_Line, b___}:>
        {
          AbsoluteThickness[2], 
          a, 
          Append[l, 
            VertexColors->
              Map[cf, wv]
            ], 
          b
          }
      ]
    ];


(* ::Subsubsubsection::Closed:: *)
(*GFPlotDensity1D*)



Options[GFPlotDensity1D]=
  DeleteDuplicatesBy[First]@
    Join[
      $GFPlotOptions,
      Options[ListLinePlot]
      ];
GFPlotDensity1D[
  gfs_,
  ops:OptionsPattern[]
  ]:=
  GFPlotBasic[
    gfs,
    GFPlotDensity1D, iGFPlotDensity1D,
    ops
    ]


(* ::Subsubsection::Closed:: *)
(*GFPlotDensity2D*)



Options[GFPlotDensity2D]=
  Join[
    $GFPlotOptions,
    Options[ListDensityPlot]
    ];
GFPlotDensity2D[
  gfs_,
  ops:OptionsPattern[]
  ]:=
  GFPlotBasic[
    gfs,
    GFPlotDensity2D, ListDensityPlot,
    ops
    ]


(* ::Subsubsection::Closed:: *)
(*GFPlotDensity3D*)



Options[GFPlotDensity3D]=
  Join[
    $GFPlotOptions,
    Options[ListDensityPlot3D]
    ];
GFPlotDensity3D[
  gfs_,
  ops:OptionsPattern[]
  ]:=
  GFPlotBasic[
    gfs,
    GFPlotDensity3D, ListDensityPlot3D,
    ops
    ]


(* ::Subsubsection::Closed:: *)
(*GFPlotDensityRing*)



(* ::Subsubsubsection::Closed:: *)
(*iGFPlotDensityRing*)



iGFPlotDensityRing//Clear
Options[iGFPlotDensityRing]=
  Options[ListPolarPlot];
iGFPlotDensityRing[pts_, ops:OptionsPattern[]]:=
  With[
    {
      gp=
        pts[[All, 1]],
      wv=
        If[OptionValue[ColorFunctionScaling]=!=False,
          Rescale,
          Identity
          ]@pts[[All, 2]],
      cf=
        Replace[Quiet@ColorData@OptionValue[ColorFunction],
          {
            HoldPattern[ColorData[Automatic]]:>
              ColorData["TemperatureMap"],
            HoldPattern[ColorData[f_]]:>f
            }
          ]
      },
    ReplaceAll[
      ListPolarPlot[
        Thread@{gp, .5},
        Evaluate@
          FilterRules[
            {
              Joined->False,
              ops
              }, 
            Options[ListPolarPlot]
            ]
        ],
      {a___, p_Point, b___}:>
        {
          AbsoluteThickness[2], 
          a, 
          Append[If[TrueQ@OptionValue[Joined], Apply[Line], Identity]@p, 
            VertexColors->
              Map[cf, wv]
            ], 
          b
          }
      ]
    ];


(* ::Subsubsubsection::Closed:: *)
(*GFPlotDensityRing*)



Options[iGFPlotDensityRing]=
  DeleteDuplicatesBy[First]@
    Join[
      $GFPlotOptions,
      Options[ListPolarPlot]
      ];
GFPlotDensityRing[
  gfs_,
  ops:OptionsPattern[]
  ]:=
  GFPlotBasic[
    gfs,
    GFPlotDensityRing, iGFPlotDensityRing,
    ops,
    PolarAxes->{True, False},
    Axes->False, 
    Joined->True,
    PlotRange->All
    ]


(* ::Subsubsection::Closed:: *)
(*GFPlotPolarDensity*)



Options[GFPlotPolarDensity]=
  Join[
    $GFPlotOptions,
    Options[DensityPlot]
    ];
GFPlotPolarDensity[
  gfs_,
  ops:OptionsPattern[]
  ]:=
  With[{gps=gfs[[1]]["Grid"]["Points"]},
    GFPlotBasic[
      gfs,
      GFPlotPolarDensity, ListDensityPlot,
      ops,
      "CoordinateTransformation"->
        ("Polar" -> "Cartesian"),
      RegionMemberFunction->
        RegionMember[
          Annulus[
            {0, 0}, 
            MinMax[gps[[All, 1]]],
            MinMax[gps[[All, 2]]]
            ]
          ],
      "Rescaling"->{0, 1}
      ]
    ];


(* ::Subsubsection::Closed:: *)
(*GFPlotShellDensity*)



(* ::Subsubsubsection::Closed:: *)
(*iGFDefaultShellPlotDensity*)



Options[iGFDefaultShellPlotDensity]=
  Options[ListSliceDensityPlot3D];
iGFDefaultShellPlotDensity[gps_, ops:OptionsPattern[]]:=
  Module[
    {
      vals=gps[[All, 3]],
      pts=gps[[All, ;;2]]
      },
    ListSliceDensityPlot3D[
      MapThread[
        Append,
        {
          Evaluate[
            CoordinateTransform[
              "Spherical"->"Cartesian",
              {1, #2, #}
              ]
            ]&@@@pts,
          vals
          }
        ],
      "CenterSphere",
      ops
      ]
    ]


(* ::Subsubsubsection::Closed:: *)
(*GFPlotShellDensity*)



Options[GFPlotShellDensity]=
  DeleteDuplicatesBy[First]@
    Join[
      $GFPlotOptions,
      Options[iGFDefaultShellPlotDensity]
      ];
GFPlotShellDensity[
  gfs_,
  ops:OptionsPattern[]
  ]:=
  GFPlotBasic[
    gfs,
    GFPlotShellDensity, iGFDefaultShellPlotDensity,
    ops,
    "Rescaling"->{0, 1}
    ]


(* ::Subsubsection::Closed:: *)
(*GFPlotSphericalDensity*)



Options[GFPlotSphericalDensity]=
  Join[
    $GFPlotOptions,
    Options[ListDensityPlot3D]
    ];
GFPlotSphericalDensity[
  gfs_,
  ops:OptionsPattern[]
  ]:=
  GFPlotBasic[
    gfs,
    GFPlotSphericalDensity, 
    ListDensityPlot3D,
    ops,
    "CoordinateTransformation"->("Spherical" -> "Cartesian"),
    "Rescaling"->{0, 1}
    ]


(* ::Subsubsection::Closed:: *)
(*GFPlotContour2D*)



Options[GFPlotContour2D]=
  Join[
    $GFPlotOptions,
    Options[ListContourPlot]
    ];
GFPlotContour2D[
  gfs_,
  ops:OptionsPattern[]
  ]:=
  GFPlotBasic[
    gfs,
    GFPlotContour2D, ListContourPlot,
    ops
    ]


(* ::Subsubsection::Closed:: *)
(*GFPlotContour3D*)



Options[GFPlotContour3D]=
  Join[
    $GFPlotOptions,
    Options[ListContourPlot3D]
    ];
GFPlotContour3D[
  gfs_,
  ops:OptionsPattern[]
  ]:=
  GFPlotBasic[
    gfs,
    GFPlotContour3D, ListContourPlot3D,
    ops
    ]


(* ::Subsubsection::Closed:: *)
(*GFPlotPolarContour*)



Options[GFPlotPolarContour]=
  Join[
    $GFPlotOptions,
    Options[ContourPlot]
    ];
GFPlotPolarContour[
  gfs_,
  ops:OptionsPattern[]
  ]:=
  With[{pts=gfs["Grid"]["Points"]},
    GFPlotBasic[
      gfs,
      GFPlotPolarContour, ContourPlot,
      ops,
      "CoordinateTransformation"->
        ("Polar" -> "Cartesian"),
      RegionMemberFunction->
        RegionMember[
          Annulus[
            {0, 0}, 
            MinMax[pts[[All, 1]]],
            MinMax[pts[[All, 2]]]
            ]
          ]
      ]
    ];


(* ::Subsection:: *)
(*Main Function*)



(* ::Subsubsection::Closed:: *)
(*GFPlot*)



(* ::Subsubsubsection::Closed:: *)
(*iGFPlot*)



Options[iGFPlot]=
  $GFPlotOptions;
iGFPlot[
  gridFuncs_,
  ops:OptionsPattern[]
  ]:=
  Module[
    {
      gridpoints,
      func,
      pmode,
      gridranges,
      grid=gridFuncs[[1]]["Grid"]
      },
    pmode=
      GFPlotOptionValue[
        "PlotMode",
        {ops},
        GFPlot,
        Automatic
        ];
    func=
      Switch[pmode,
        {"Cartesian", 1},
          GFPlotCartesian1D,
        {"Cartesian", 2},
          GFPlotCartesian2D,
        {"Cartesian", 3},
          GFPlotCartesian3D,
        "Cartesian",
          {"Cartesian", GridDimension[grid]},
        {"Cartesian", "Points", 1},
          GFPlotCartesianPoints1D,
        {"Cartesian", "Points", 2},
          GFPlotCartesianPoints2D,
        {"Cartesian", "Points", 3},
          GFPlotPoints3D,
        {"Cartesian", "Points"},
          {"Cartesian", "Points", GridDimension[grid]},
        {"Points", 1},
          GFPlotPoints1D,
        {"Points", 2},
          GFPlotPoints2D,
        {"Points", 3},
          GFPlotPoints3D,
        {"Points", "Polar"},
          GFPlotPointsPolar,
        {"Points", "Shell"},
          GFPlotPointsShell,
        {"Points", "Spherical"},
          GFPlotPointsSpherical,
        "Points",
          {"Points", GridDimension[grid]},
        {"Density", 1},
          GFPlotDensity1D,
        {"Density", 2},
          GFPlotDensity2D,
        {"Density", 3},
          GFPlotDensity3D,
        {"Density", "Ring"},
          GFPlotDensityRing,
        {"Density", "Polar"},
          GFPlotPolarDensity,
        {"Density", "Shell"},
          GFPlotShellDensity,
        {"Density", "Spherical"},
          GFPlotSphericalDensity,
        "Density",
          {"Density", GridDimension[grid]},
        {"Contour", 2},
          GFPlotContour2D,
        {"Contour", 3},
          GFPlotContour3D,
        {"Contour", "Polar"},
          GFPlotPolarContour,
        {"Contour", "Spherical"},
          GFPlotSpherical,
        "Contour",
          {"Contour", GridDimension[grid]},
        "Ring",
          GFPlotRing,
        "Ring3D",
          GFPlotRing3D,
        "Polar",
          GFPlotPolar,
        "Shell",
          GFPlotShell,
        "Spherical",
          GFPlotSpherical,
        Automatic,
          gridranges=GridBounds[grid];
          Switch[gridranges,
            {{_, _}?(#[[2]]+#[[1]]==2\[Pi]&)},
              "Ring",
            {
              {_, _}?(#[[2]]+#[[1]]==2\[Pi]&), 
              {_, _}?(#[[2]]+#[[1]]==\[Pi]&)
              },
              "Shell",
            {
              {_, _},
              {_, _}?(#[[2]]+#[[1]]==2\[Pi]&)
              },
              "Polar",
            {
              {_, _},
              {_, _}?(#[[2]]+#[[1]]==2\[Pi]&), 
              {_, _}?(#[[2]]+#[[1]]==\[Pi]&)
              },
              "Spherical",
            _,
              {"Cartesian", GridDimension[grid]}
            ],
        _,
          PackageRaiseException[
            Automatic,
            "\"PlotMode\" `` is unsupported",
            pmode
            ]
        ];
    If[StringQ@func||ListQ@func,
      iGFPlot[
        gridFuncs,
        "PlotMode"->func,
        ops
        ],
      func[gridFuncs, ops]
      ]
    ];


(* ::Subsubsubsection::Closed:: *)
(*GFPlot*)



Options[iGFPlot]=
  $GFPlotOptions;
GFPlot[
  fns:{___GridFunctionObject},
  ops:OptionsPattern[]
  ]:=
  PackageExceptionBlock["GridFunctionPlot"]@
    Module[
      {grids, vals},
      grids=Map[#["Grid"]&, fns];
      If[Length@DeleteDuplicates@grids>1,
        PackageRaiseException[
          Automatic,
          "More than one distinct grid passed to GFPlot"
          ]
        ];
      iGFPlot[fns, ops]
      ];
GFPlot[
  fns:_GridFunctionObject,
  ops:OptionsPattern[]
  ]:=
  GFPlot[{fns}, ops, "PlotDisplayMode"->"Show"];


End[];



