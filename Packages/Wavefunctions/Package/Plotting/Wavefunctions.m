(* ::Package:: *)

(* Autogenerated Package *)

$WFPlotOptions::usage="";
WFPlot::usage="";


Begin["`Private`"];


(* ::Subsection:: *)
(*Options*)



(* ::Subsubsection::Closed:: *)
(*$WFPlotOptions*)



$WFPlotOptions=
  {
    "ShowPotential"->False,
    "ShowEnergy"->False,
    "PotentialStyle"->Automatic,
    "EnergyStyle"->Automatic,
    "PlotDisplayMode"->Manipulate,
    PlotRange->All
    }


(* ::Subsubsection::Closed:: *)
(*WFPlotOptionValue*)



WFPlotOptionValue[opName_, ops_, f_:None, default_:Automatic]:=
  Lookup[Flatten@{ops}, opName,
    Lookup[Options[f], opName, 
      Lookup[$WFPlotOptions, opName, default]
      ]
    ]


(* ::Subsection:: *)
(*Plot*)



(* ::Subsubsection::Closed:: *)
(*WFPlotManipulate*)



WFPlotManipulate[
  {
    engs_,
    wfns_,
    pot_
    },
 ops:OptionsPattern[]
 ]:=
  Manipulate[
    Replace[
      Show[
        {
          If[engs=!=None&&engs[[i]]=!=None,
            engs[[i]],
            Nothing
            ],
          If[pot=!=None,
            pot,
            Nothing
            ],
          wfns[[i]]
          },
        Options[wfns[[i]]]
        ],
      {
        Except[_Graphics|_Graphics3D|_Legended]:>
          Failure["...", <||>]
        }
      ],
    {{i, 1, "\[Psi]"}, 1, Length@wfns, 1}
    ]


(* ::Subsubsection::Closed:: *)
(*WFPlotList*)



WFPlotList[
  {
    engs_,
    wfns_,
    pot_
    },
 ops:OptionsPattern[]
 ]:=
  Table[
    Show[
      {
        If[engs=!=None&&engs[[i]]=!=None,
          engs[[i]],
          Nothing
          ],
        If[pot=!=None,
          pot,
          Nothing
          ],
        wfns[[i]]
        },
      Options[wfns[[i]]]
      ],
    {i, Length@wfns}
    ];


(* ::Subsubsection::Closed:: *)
(*WFPlotShow*)



WFPlotShow[
  {
    engs_,
    wfns_,
    pot_
    },
  ops:OptionsPattern[]
  ]:=
  Show@
    WFPlotList[{engs, wfns, pot}, ops]


(* ::Subsubsection::Closed:: *)
(*iWFPlot*)



iWFPlot[{energies_, gfs_}, pot_, ops:OptionsPattern[]]:=
  Module[
    {
      showE=WFPlotOptionValue["ShowEnergy",    {ops}, WFPlot, False],
      showP=WFPlotOptionValue["ShowPotential", {ops}, WFPlot, False],
      potS=WFPlotOptionValue["PotentialStyle", {ops}, WFPlot, Automatic],
      eS=WFPlotOptionValue["EnergyStyle", {ops}, WFPlot, Automatic],
      pm=WFPlotOptionValue["PlotDisplayMode", {ops}, WFPlot, Automatic],
      grid=gfs[[1]]["Grid"],
      gridFuncs=gfs,
      efuncs,
      pfunc,
      eplots,
      potPlot,
      basePlots,
      allPlots
      },
    pm=
      Switch[pm,
        Show|"Show",
          WFPlotShow,
        List|"List",
          WFPlotList,
        Manipulate|"Manipulate",
          WFPlotManipulate,
        _,
          PackageRaiseException[
            Automatic,
            "\"PlotDisplayMode\" `` not understood",
            pm
            ]
        ];
    If[TrueQ@showE,
      gridFuncs=
        MapThread[
          GFShift,
          {
            gridFuncs,
            energies
            }
          ];
      efuncs=
        GridFunctionObject[grid, 
          ConstantArray[#, Dimensions[grid]]
          ]&/@energies;
      eS=Replace[eS,
        Automatic->Directive[Dashed, Pink]
        ];
      eplots=GFPlot[efuncs, PlotStyle->eS, "PlotDisplayMode"->"List"],
      eplots=ConstantArray[None, Length@gridFuncs];
      ];
    basePlots=GFPlot[gridFuncs, "PlotDisplayMode"->"List", ops];
    If[TrueQ@showP&&pot=!=None,
      pfunc=
        If[!GridFunctionObjectQ@pot,
          GridFunctionObject[grid, 
            If[!VectorQ@pot, Normal@Diagonal@pot, Flatten@pot]
            ],
          pot
          ];
      potS=
        Replace[potS,
          Automatic->Directive[Dashed, Gray]
          ];
      potPlot=GFPlot[pfunc, PlotStyle->potS, "PlotDisplayMode"->"Show"],
      potPlot=None;
      ];
    pm[
      {
        eplots,
        basePlots,
        potPlot
        }
      ]
    ]


(* ::Subsubsection::Closed:: *)
(*WFPlot*)



Options[WFPlot]=
  Join[
    Options[GFPlot],
    $WFPlotOptions
    ];
WFPlot[
  wfns_WavefunctionsObject, 
  potential:(
    _SparseArray|
    _List?(
      VectorQ[#, Internal`RealValuedNumberQ]||
      MatrixQ[#, Internal`RealValuedNumberQ]&
      )|_GridFunctionObject?GridFunctionObjectQ|None):None,
  ops:OptionsPattern[]
  ]:=
  iWFPlot[{wfns["Energies"], wfns["Wavefunctions"]}, potential, ops];


End[];



