(* ::Package:: *)

(* Autogenerated Package *)

$GFPlotOptions::usage="";
GFPlotOptionValue::usage="";
GFPlotPoints::usage="";
GFPlotResolvePlotStyle::usage="";
GFPlotSolutions::usage="";
GFPlotBasic::usage="";


Begin["`Private`"];


(* ::Subsection:: *)
(*Options*)



(* ::Subsubsection::Closed:: *)
(*$GFPlotOptions*)



$GFPlotOptions=
  DeleteDuplicatesBy[First]@
    {
      "Scaling"->Automatic,
      "Shifting"->Automatic,
      "Rescaling"->Automatic,
      "PlotDisplayMode"->"List",
      "PlotFunction"->Automatic,
      "CoordinateTransformation"->None,
      "PlotListStyle"->Automatic
      }


(* ::Subsubsection::Closed:: *)
(*GFPlotOptionValue*)



GFPlotOptionValue[opName_, ops_, f_:None, default_:Automatic]:=
  Lookup[Flatten@{ops}, opName,
    Lookup[Options[f], opName, 
      Lookup[$GFPlotOptions, opName, default]
      ]
    ]


(* ::Subsection:: *)
(*GridFunction Manipulations*)



(* ::Subsubsection::Closed:: *)
(*GFPlotPoints*)



(* ::Subsubsubsection::Closed:: *)
(*gridTransform*)



gridTransform[transf_, dim_]:=
  Replace[transf,
    chart_Rule:>
      ReplaceAll[
        Function[
          Evaluate@
            CoordinateTransform[chart, 
              If[chart===("Spherical"->"Cartesian"),
                Slot/@{1, 3, 2},
                Slot/@Range[dim]
                ]
              ]
          ],
        Slot[n_]:>#[[n]]
        ]
    ];


(* ::Subsubsubsection::Closed:: *)
(*Main*)



GFPlotPoints//Clear


Options[GFPlotPoints]=
  $GFPlotOptions;
GFPlotPoints[
  gridfuncs_,
  {
    rescaling_,
    shifting_,
    scaling_
    },
  transf_,
  sort_,
  ops:OptionsPattern[]
  ]:=
  Module[
    {
      gfs,
      grid,
      dim,
      gps,
      vals,
      order
      },
    gfs=
      Fold[
        With[{fn=#2[[1]], spec=#2[[2]]},
          If[!MatchQ[#2[[2]], _List|_?NumericQ|_Scaled], #, fn[#, spec]&/@#]
          ]&,
        gridfuncs,
        {
          {GFRescale, rescaling},
          {GFShift, shifting},
          {GFScale, scaling}
          }
        ];
    grid=gfs[[1]]["Grid"];
    dim=grid["Dimension"];
    gps=grid["Points"];
    gps=
      If[transf===None, 
        gps, 
        Map[gridTransform[transf, dim], gps]
        ];
    vals=Map[List, Flatten@#["Values"]]&/@gfs;
    If[sort, 
      order=Ordering[gps];
      gps=gps[[order]];
      vals=#[[order]]&/@vals;
      ];
    Join[gps, #, 2]&/@vals
    ]


(* ::Subsection:: *)
(*Plotting Wrappers*)



(* ::Subsubsection::Closed:: *)
(*GFPlotResolvePlotStyle*)



GFPlotResolvePlotStyle[
  func_, 
  solNum_, 
  ops_
  ]:=
  Module[
    {
      cf=
        Replace[
          {
            s:_String|{_String, __}:>ColorData[s],
            Automatic:>ColorData[97]
            }
          ]@
          GFPlotOptionValue[
            "PlotListStyle", 
            {ops}, 
            func, 
            Lookup[
              Charting`ResolvePlotTheme[Automatic, func],
              "DefaultColorFunction",
              Lookup[
                Lookup[
                  Charting`ResolvePlotTheme[Automatic, func], 
                  Method,
                  {"DefaultPlotStyle"->Automatic}
                  ],
                "DefaultPlotStyle",
                Automatic
                ]
              ]
            ]
      },
      With[
        {
          ci=
            MatchQ[cf, HoldPattern[ColorDataFunction[_, "Indexed", __]]]
          },
        Function[
          Which[
            ListQ@cf,
              cf[[Mod[#, Length[cf], 1]]],
            ci,
              cf@#,
            True,
              cf@Rescale[#, {1, solNum}]
            ]
          ]
        ]
      ]


(* ::Subsubsection::Closed:: *)
(*GFPlotManipulateSolutions*)



GFPlotManipulateSolutions[
  func_Symbol, 
  gfs_,
 ops:OptionsPattern[]
 ]:=
  With[
    {
      ps=
        GFPlotResolvePlotStyle[func, Length@gfs, {ops}],
      failMsg=
        With[
          {
            fail=
              "Couldn't view solutions for plotting function ``"
                ~TemplateApply~func
            },
          Failure["GridFunctionPlot", fail]
          ]
      },
    Module[
      {
        sols=gfs,
        plots
        },
      plots=
        Table[
          Replace[
            func[
              gfs[[i]],
              Evaluate@
                FilterRules[
                  {
                    ops,
                    PlotStyle->
                      ps[i]
                    },
                  Options@func
                  ]
              ],
            {
              Except[_Graphics|_Graphics3D|_Legended]:>
                failMsg
              }
            ],
        {i, Min@{Length@gfs, 25}}
        ];
      Manipulate[
        Replace[
          If[i<Length@plots,
            plots[[i]],
            func[
              sols[[i]],
              Evaluate@
                FilterRules[
                  {
                    ops,
                    PlotStyle->
                      ps[i]
                    },
                  Options@func
                  ]
              ]
            ],
          {
            Except[_Graphics|_Graphics3D|_Legended]:>
              failMsg
            }
          ],
        {{i, 1, "\[ScriptF]"}, 1, Length@sols, 1}
        ]
      ]
    ]


(* ::Subsubsection::Closed:: *)
(*GFPlotListSolutions*)



GFPlotListSolutions[
  func_Symbol, gfs_,
 ops:OptionsPattern[]
 ]:=
  With[
    {
      ps=
        GFPlotResolvePlotStyle[func, Length@gfs, {ops}],
      failMsg=
        "Couldn't view solutions for plotting function ``"~TemplateApply~func
      },
    Table[
      Replace[
        func[
          gfs[[i]],
          Evaluate@
            FilterRules[
              {
                ops,
                PlotStyle->ps[i]
                },
              Options@func
              ]
          ],
        {
          Except[_Graphics|_Graphics3D|_Legended]:>
            Failure["GridFunctionPlot", failMsg]
          }
        ],
      {i, 1, Length@gfs}
      ]
    ];


(* ::Subsubsection::Closed:: *)
(*GFPlotShowSolutions*)



GFPlotShowSolutions[
  func_Symbol, gfs_,
  ops:OptionsPattern[]
  ]:=
  Show@
    GFPlotListSolutions[func, gfs, ops]


(* ::Subsubsection::Closed:: *)
(*GFPlotSolutions*)



GFPlotSolutions[
  func_Symbol, 
  gfs_,
 ops:OptionsPattern[]
 ]:=
  Switch[
    GFPlotOptionValue[
      "PlotDisplayMode",
      {ops},
      func
      ],
    Manipulate|"Manipulate",
      GFPlotManipulateSolutions[
        func, 
        gfs,
        ops
        ],
    Show|"Show",
      GFPlotShowSolutions[
        func,
        gfs,
        ops
        ],
    _,
      GFPlotListSolutions[
        func,
        gfs,
        ops
        ]
    ];
GFPlotSolutions[
  func_, energies_, solns_, pot_,
 ops:OptionsPattern[]
 ]:=
 Module[{plotFun},
   plotFun[e___]:=func[e];
   GFPlotSolutions[func, energies, solns, pot, ops]
   ] 


(* ::Subsubsection::Closed:: *)
(*GFPlotBasic*)



GFPlotBasic[
  gfs_, 
  headFunc_Symbol, defaultFunc:Except[_?OptionQ],
  ops:OptionsPattern[]
  ]:=
  Module[
    {
      toPlot
      },
    toPlot=
      GFPlotPoints[
        gfs,
        {
          GFPlotOptionValue[
            "Rescaling",
            {ops},
            headFunc,
            None
            ],
          GFPlotOptionValue[
            "Shifting",
            {ops},
            headFunc,
            None
            ],
          GFPlotOptionValue[
            "Scaling",
            {ops},
            headFunc,
            None
            ]
          },
        GFPlotOptionValue[
          "CoordinateTransformation",
          {ops}, 
          headFunc,
          None
          ],
        TrueQ@
          GFPlotOptionValue[
            "SortPlotPoints",
            {ops},
            headFunc,
            False
            ],
        FilterRules[{ops},
          Options@GFPlotPoints
          ]
        ];
    GFPlotSolutions[
      Replace[
        GFPlotOptionValue[
          "PlotFunction",
          {ops}, 
          headFunc,
          False
          ],
        Automatic->defaultFunc
        ],
      toPlot,
      ops
      ]
  ];


End[];



