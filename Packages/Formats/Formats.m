(* ::Package:: *)

(* Autogenerated Package *)

ChemFormatsCanonicalFormat::usage="Gives the canonical format name for a format";
ChemFormatsDetect::usage="Detects format rep";
ChemFormatsConvert::usage="Converts between multiple format reps";



Begin["`Private`"];


(* ::Subsubsection::Closed:: *)
(*CanonicalFormat*)



$ChemFormatsCanonicalFormatTable=
	<|
		"inchi"->"InChI",
		"sdftable"->"SDF",
		"sdfrules"->"SDF"
		|>;


ChemFormatsCanonicalFormat[
	name_String?(KeyExistsQ[$ChemFormatsCanonicalFormatTable, ToLowerCase@#]&)
	]:=
	$ChemFormatsCanonicalFormatTable[ToLowerCase@name];
ChemFormatsCanonicalFormat[
	name_String?(KeyFreeQ[$ChemFormatsCanonicalFormatTable, ToLowerCase@#]&)
	]:=
	If[StringLength[name]>1&&LowerCaseQ@StringTake[name, {2}],
		ToUpperCase@StringJoin@
			StringSplit[name, c:LetterCharacter?(Not@*LowerCaseQ):>c][[;;2]],
		name
		]


(* ::Subsubsection::Closed:: *)
(*ChemFormatsDetect*)



(* ::Text:: *)
(*
	This is a stub function to be expanded upon later
*)



ChemFormatsDetect//Clear
ChemFormatsDetect[data_, throw:True|False:False]:=
	PackageExceptionBlock["FormatConvert"]@
		With[{dataForm=ChemFormatsDetectMolFormat[data]},
			If[TrueQ@throw&&!StringQ@dataForm,
				PackageRaiseException[
					"FormatConvert",
					"Format detection failed for data ``",
					"MessageParameters"->{data}
					],
				dataForm
				]
			]


(* ::Subsubsection::Closed:: *)
(*$ChemFormatConverters*)



(* ::Subsubsubsection::Closed:: *)
(*chemFormatConvertersOBBlock*)



chemFormatConvertersOBBlock[form_]:=
	AssociationMap[
		ChemFormatsOBConvert[form->#]&,
		$ChemOpenBabelWriteFormats
		];


(* ::Subsubsubsection::Closed:: *)
(*chemFormatConvertersStringBlock*)



chemFormatConvertersStringBlock[form_]:=
	<|
		"XYZ"->
			ChemFormatsMolToStringWrapper[form, "XYZ"],
		"MOL"->
			ChemFormatsMolToStringWrapper[form, "MOL"],
		"MOL2"->
			ChemFormatsMolToStringWrapper[form, "MOL2"],
		"SDF"->
			ChemFormatsMolToStringWrapper[form, "SDF"]
		|>;


(* ::Subsubsubsection::Closed:: *)
(*$ChemFormatConverters*)



	$ChemFormatConverters=
		Join[
			<|
				"MolTable"->
					Merge[
						{
							<|
								"ZMatrix"->
									ChemFormatsMolToZMatrix,
								"Rules"->
									ChemFormatsMolToRules,
								"String"->
									ChemFormatsMolToString
								|>,
							chemFormatConvertersStringBlock["MolTable"],
							chemFormatConvertersOBBlock["MolTable"]
							},
						First
						],
				"ZMatrix"->
					Merge[
						{
							<|
								"Table"->
									ChemFormatsZMatrixToMol,
								"Rules"->
									ChemFormatsMolToRules,
								"String"->
									ChemFormatsZMatrixToString
								|>,
							chemFormatConvertersStringBlock["ZMatrix"],
							chemFormatConvertersOBBlock["ZMatrix"]
							},
						First
						],
				"MolRules"->
					Merge[
						{
							<|
								"String"->
									ChemFormatsMolRulesToString
								|>,
							chemFormatConvertersStringBlock["MolRules"],
							chemFormatConvertersOBBlock["MolRules"]
							},
						First
						],
				"SDFTable"->
					Merge[
						{
							<|
								"Rules"->
									ChemFormatsMolToRules,
								"String"->
									ChemFormatsMolToString
								|>,
							chemFormatConvertersStringBlock["SDFTable"],
							chemFormatConvertersOBBlock["SDFTable"]
							},
						First
						],
				"SDFRules"->
					Merge[
						{
							<|
								"String"->
									ChemFormatsMolRulesToString
								|>,
							chemFormatConvertersStringBlock["SDFRules"],
							chemFormatConvertersOBBlock["SDFRules"]
							},
						First
						]
				|>,
			AssociationMap[
				Join[
					<|
						"MolTable"->
							Switch[#, 
								"MOL"|"SDF",
									ChemImportMolTable, 
								"XYZ",
									ChemImportXYZ,
								_,
									ChemFormatsOBImport[#]
								]
							|>,
					chemFormatConvertersOBBlock[#]
					]&,
				$ChemOpenBabelReadFormats
				]
			]


(* ::Subsubsection::Closed:: *)
(*ChemFormatsConvert*)



ChemFormatsConvert//Clear
ChemFormatsConvert[data_, format_String->target_String, ops:OptionsPattern[]]:=
	PackageExceptionBlock["FormatConvert"]@
		Module[
			{
				converter=Quiet@$ChemFormatConverters[format, target],
				res
				},
			If[Head[converter]===Missing,
				PackageRaiseException[
					"FormatConvert",
					"Format conversion `` is currently unsupported",
					"MessageParameters"->{format->target}
					]
				];
			res=converter[data, ops];
			If[Head[res]===converter,
				PackageRaiseException[
					"FormatConvert",
					"Format conversion `` failed for data ``",
					"MessageParameters"->{format->target, data}
					]
				];
			res
			];
ChemFormatsConvert[data_, {format_String, target_String}, ops:OptionsPattern[]]:=
	ChemFormatsConvert[data, format->target, ops];
ChemFormatsConvert[data_, target_String, ops:OptionsPattern[]]:=
	PackageExceptionBlock["FormatConvert"]@
		ChemFormatsConvert[data, ChemFormatsDetect[data, True]->target, ops];
ChemFormatsConvert[
	ctype:{_String, _String}|(_String->_String)|_String
	][data_, ops:OptionsPattern[]]:=
	ChemFormatsConvert[data, ctype, ops]


PackageAddAutocompletions[
	ChemFormatsConvert,
	{
		None,
		Join[
			Sort@DeleteDuplicates@Flatten@Map[Keys, Values@$ChemFormatConverters](*,
			If[#[[1]]\[NotEqual]#[[2]],
				ToString[#, InputForm],
				Nothing
				]&/@Tuples[{$chemOBReadFormats, $chemOBWriteFormats}]*)
			]
		}
	]


End[];



