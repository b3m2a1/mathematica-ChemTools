(* ::Package:: *)

(* Autogenerated Package *)

ChemFormatsCanonicalFormat::usage="Gives the canonical format name for a format";
ChemFormatsDetect::usage="Detects format rep";
ChemFormatsConvert::usage="Converts between multiple format reps";



Begin["`Private`"];


(* ::Subsubsection::Closed:: *)
(*CanonicalFormat*)



$ChemFormatsCanonicalFormatTable=
	<|
		"inchi"->"InChI",
		"sdftable"->"SDF",
		"sdfrules"->"SDF"
		|>;


ChemFormatsCanonicalFormat[
	name_String?(KeyExistsQ[$ChemFormatsCanonicalFormatTable, ToLowerCase@#]&)
	]:=
	$ChemFormatsCanonicalFormatTable[ToLowerCase@name];
ChemFormatsCanonicalFormat[
	name_String?(KeyFreeQ[$ChemFormatsCanonicalFormatTable, ToLowerCase@#]&)
	]:=
	If[StringLength[name]>1&&LowerCaseQ@StringTake[name, {2}],
		ToUpperCase@StringJoin@
			StringSplit[name, c:LetterCharacter?(Not@*LowerCaseQ):>c][[;;2]],
		name
		]


(* ::Subsubsection::Closed:: *)
(*ChemFormatsDetect*)



(* ::Text:: *)
(*
	This is a stub function to be expanded upon later
*)



ChemFormatsDetect[data_]:=
	PackageExceptionBlock["FormatConvert"]@
		With[{dataForm=ChemFormatsDetectMolFormat[data]},
			If[!StringQ@dataForm,
				PackageRaiseException[
					"FormatConvert",
					"Format detection failed for data ``",
					"MessageParameters"->{data}
					],
				dataForm
				]
			]


(* ::Subsubsection::Closed:: *)
(*$ChemFormatConverters*)



(* ::Subsubsubsection::Closed:: *)
(*chemFormatConvertersOBBlock*)



chemFormatConvertersOBBlock[form_]:=
	<|
		"ALC"->ChemFormatsOBConvert[form->"ALC"],
		"BGF"->ChemFormatsOBConvert[form->"BGF"],
		"BOX"->ChemFormatsOBConvert[form->"BOX"],
		"BS"->ChemFormatsOBConvert[form->"BS"],
		"C3D1"->ChemFormatsOBConvert[form->"C3D1"],
		"C3D2"->ChemFormatsOBConvert[form->"C3D2"],
		"CACCRT"->ChemFormatsOBConvert[form->"CACCRT"],
		"CACHE"->ChemFormatsOBConvert[form->"CACHE"],
		"CACINT"->ChemFormatsOBConvert[form->"CACINT"],
		"CAN"->ChemFormatsOBConvert[form->"CAN"],
		"CDXML"->ChemFormatsOBConvert[form->"CDXML"],
		"CHT"->ChemFormatsOBConvert[form->"CHT"],
		"CIF"->ChemFormatsOBConvert[form->"CIF"],
		"CML"->ChemFormatsOBConvert[form->"CML"],
		"CMLR"->ChemFormatsOBConvert[form->"CMLR"],
		"COM"->ChemFormatsOBConvert[form->"COM"],
		"CRK2D"->ChemFormatsOBConvert[form->"CRK2D"],
		"CRK3D"->ChemFormatsOBConvert[form->"CRK3D"],
		"CSR"->ChemFormatsOBConvert[form->"CSR"],
		"CSSR"->ChemFormatsOBConvert[form->"CSSR"],
		"CT"->ChemFormatsOBConvert[form->"CT"],
		"DMOL"->ChemFormatsOBConvert[form->"DMOL"],
		"ENT"->ChemFormatsOBConvert[form->"ENT"],
		"FA"->ChemFormatsOBConvert[form->"FA"],
		"FASTA"->ChemFormatsOBConvert[form->"FASTA"],
		"FEAT"->ChemFormatsOBConvert[form->"FEAT"],
		"FH"->ChemFormatsOBConvert[form->"FH"],
		"FIX"->ChemFormatsOBConvert[form->"FIX"],
		"FPT"->ChemFormatsOBConvert[form->"FPT"],
		"FRACT"->ChemFormatsOBConvert[form->"FRACT"],
		"FS"->ChemFormatsOBConvert[form->"FS"],
		"FSA"->ChemFormatsOBConvert[form->"FSA"],
		"GAMIN"->ChemFormatsOBConvert[form->"GAMIN"],
		"GAU"->ChemFormatsOBConvert[form->"GAU"],
		"GJC"->ChemFormatsOBConvert[form->"GJC"],
		"GJF"->ChemFormatsOBConvert[form->"GJF"],
		"GPR"->ChemFormatsOBConvert[form->"GPR"],
		"GR96"->ChemFormatsOBConvert[form->"GR96"],
		"HIN"->ChemFormatsOBConvert[form->"HIN"],
		"InChI"->ChemFormatsOBConvert[form->"InChI"],
		"INP"->ChemFormatsOBConvert[form->"INP"],
		"JIN"->ChemFormatsOBConvert[form->"JIN"],
		"MDL"->ChemFormatsOBConvert[form->"MDL"],
		"MMD"->ChemFormatsOBConvert[form->"MMD"],
		"MMOD"->ChemFormatsOBConvert[form->"MMOD"],
		"MOLREPORT"->ChemFormatsOBConvert[form->"MOLREPORT"],
		"MOP"->ChemFormatsOBConvert[form->"MOP"],
		"MOPCRT"->ChemFormatsOBConvert[form->"MOPCRT"],
		"MOPIN"->ChemFormatsOBConvert[form->"MOPIN"],
		"MPC"->ChemFormatsOBConvert[form->"MPC"],
		"MPD"->ChemFormatsOBConvert[form->"MPD"],
		"MPQCIN"->ChemFormatsOBConvert[form->"MPQCIN"],
		"NW"->ChemFormatsOBConvert[form->"NW"],
		"PCM"->ChemFormatsOBConvert[form->"PCM"],
		"PDB"->ChemFormatsOBConvert[form->"PDB"],
		"POV"->ChemFormatsOBConvert[form->"POV"],
		"PQS"->ChemFormatsOBConvert[form->"PQS"],
		"QCIN"->ChemFormatsOBConvert[form->"QCIN"],
		"REPORT"->ChemFormatsOBConvert[form->"REPORT"],
		"RXN"->ChemFormatsOBConvert[form->"RXN"],
		"SD"->ChemFormatsOBConvert[form->"SD"],
		"SMI"->ChemFormatsOBConvert[form->"SMI"],
		"SY2"->ChemFormatsOBConvert[form->"SY2"],
		"TDD"->ChemFormatsOBConvert[form->"TDD"],
		"TEST"->ChemFormatsOBConvert[form->"TEST"],
		"THERM"->ChemFormatsOBConvert[form->"THERM"],
		"TMOL"->ChemFormatsOBConvert[form->"TMOL"],
		"TXYZ"->ChemFormatsOBConvert[form->"TXYZ"],
		"UNIXYZ"->ChemFormatsOBConvert[form->"UNIXYZ"],
		"VMOL"->ChemFormatsOBConvert[form->"VMOL"],
		"XED"->ChemFormatsOBConvert[form->"XED"],
		"YOB"->ChemFormatsOBConvert[form->"YOB"],
		"ZIN"->ChemFormatsOBConvert[form->"ZIN"]
		|>;


(* ::Subsubsubsection::Closed:: *)
(*chemFormatConvertersStringBlock*)



chemFormatConvertersStringBlock[form_]:=
	<|
		"XYZ"->
			ChemFormatsMolToStringWrapper[form, "XYZ"],
		"MOL"->
			ChemFormatsMolToStringWrapper[form, "MOL"],
		"MOL2"->
			ChemFormatsMolToStringWrapper[form, "MOL2"],
		"SDF"->
			ChemFormatsMolToStringWrapper[form, "SDF"]
		|>;


(* ::Subsubsubsection::Closed:: *)
(*$chemFormatOBImports*)



$chemFormatOBImports=
	<|
			"ACR"-><|"MolTable"->ChemFormatsOBImport["ACR"]|>,
			"ALC"-><|"MolTable"->ChemFormatsOBImport["ALC"]|>,
			"ARC"-><|"MolTable"->ChemFormatsOBImport["ARC"]|>,
			"BGF"-><|"MolTable"->ChemFormatsOBImport["BGF"]|>,
			"BOX"-><|"MolTable"->ChemFormatsOBImport["BOX"]|>,
			"BS"-><|"MolTable"->ChemFormatsOBImport["BS"]|>,
			"C3D1"-><|"MolTable"->ChemFormatsOBImport["C3D1"]|>,
			"C3D2"-><|"MolTable"->ChemFormatsOBImport["C3D2"]|>,
			"CACCRT"-><|"MolTable"->ChemFormatsOBImport["CACCRT"]|>,
			"CAN"-><|"MolTable"->ChemFormatsOBImport["CAN"]|>,
			"CAR"-><|"MolTable"->ChemFormatsOBImport["CAR"]|>,
			"CCC"-><|"MolTable"->ChemFormatsOBImport["CCC"]|>,
			"CDX"-><|"MolTable"->ChemFormatsOBImport["CDX"]|>,
			"CDXML"-><|"MolTable"->ChemFormatsOBImport["CDXML"]|>,
			"CIF"-><|"MolTable"->ChemFormatsOBImport["CIF"]|>,
			"CML"-><|"MolTable"->ChemFormatsOBImport["CML"]|>,
			"CMLR"-><|"MolTable"->ChemFormatsOBImport["CMLR"]|>,
			"CRK2D"-><|"MolTable"->ChemFormatsOBImport["CRK2D"]|>,
			"CRK3D"-><|"MolTable"->ChemFormatsOBImport["CRK3D"]|>,
			"CT"-><|"MolTable"->ChemFormatsOBImport["CT"]|>,
			"DMOL"-><|"MolTable"->ChemFormatsOBImport["DMOL"]|>,
			"ENT"-><|"MolTable"->ChemFormatsOBImport["ENT"]|>,
			"FCH"-><|"MolTable"->ChemFormatsOBImport["FCH"]|>,
			"FCHK"-><|"MolTable"->ChemFormatsOBImport["FCHK"]|>,
			"FCK"-><|"MolTable"->ChemFormatsOBImport["FCK"]|>,
			"FEAT"-><|"MolTable"->ChemFormatsOBImport["FEAT"]|>,
			"FRACT"-><|"MolTable"->ChemFormatsOBImport["FRACT"]|>,
			"FS"-><|"MolTable"->ChemFormatsOBImport["FS"]|>,
			"G03"-><|"MolTable"->ChemFormatsOBImport["G03"]|>,
			"G98"-><|"MolTable"->ChemFormatsOBImport["G98"]|>,
			"GAM"-><|"MolTable"->ChemFormatsOBImport["GAM"]|>,
			"GAMOUT"-><|"MolTable"->ChemFormatsOBImport["GAMOUT"]|>,
			"GPR"-><|"MolTable"->ChemFormatsOBImport["GPR"]|>,
			"HIN"-><|"MolTable"->ChemFormatsOBImport["HIN"]|>,
			"INS"-><|"MolTable"->ChemFormatsOBImport["INS"]|>,
			"JOUT"-><|"MolTable"->ChemFormatsOBImport["JOUT"]|>,
			"MDL"-><|"MolTable"->ChemFormatsOBImport["MDL"]|>,
			"MMD"-><|"MolTable"->ChemFormatsOBImport["MMD"]|>,
			"MMOD"-><|"MolTable"->ChemFormatsOBImport["MMOD"]|>,
			"MOO"-><|"MolTable"->ChemFormatsOBImport["MOO"]|>,
			"MOP"-><|"MolTable"->ChemFormatsOBImport["MOP"]|>,
			"MOPCRT"-><|"MolTable"->ChemFormatsOBImport["MOPCRT"]|>,
			"MOPIN"-><|"MolTable"->ChemFormatsOBImport["MOPIN"]|>,
			"MOPOUT"-><|"MolTable"->ChemFormatsOBImport["MOPOUT"]|>,
			"MPC"-><|"MolTable"->ChemFormatsOBImport["MPC"]|>,
			"MPQC"-><|"MolTable"->ChemFormatsOBImport["MPQC"]|>,
			"NWO"-><|"MolTable"->ChemFormatsOBImport["NWO"]|>,
			"PC"-><|"MolTable"->ChemFormatsOBImport["PC"]|>,
			"PCM"-><|"MolTable"->ChemFormatsOBImport["PCM"]|>,
			"PDB"-><|"MolTable"->ChemFormatsOBImport["PDB"]|>,
			"PQS"-><|"MolTable"->ChemFormatsOBImport["PQS"]|>,
			"PREP"-><|"MolTable"->ChemFormatsOBImport["PREP"]|>,
			"QCOUT"-><|"MolTable"->ChemFormatsOBImport["QCOUT"]|>,
			"RES"-><|"MolTable"->ChemFormatsOBImport["RES"]|>,
			"RXN"-><|"MolTable"->ChemFormatsOBImport["RXN"]|>,
			"SD"-><|"MolTable"->ChemFormatsOBImport["SD"]|>,
			"SMI"-><|"MolTable"->ChemFormatsOBImport["SMI"]|>,
			"SY2"-><|"MolTable"->ChemFormatsOBImport["SY2"]|>,
			"TDD"-><|"MolTable"->ChemFormatsOBImport["TDD"]|>,
			"THERM"-><|"MolTable"->ChemFormatsOBImport["THERM"]|>,
			"TMOL"-><|"MolTable"->ChemFormatsOBImport["TMOL"]|>,
			"UNIXYZ"-><|"MolTable"->ChemFormatsOBImport["UNIXYZ"]|>,
			"VMOL"-><|"MolTable"->ChemFormatsOBImport["VMOL"]|>,
			"XML"-><|"MolTable"->ChemFormatsOBImport["XML"]|>,
			"YOB"-><|"MolTable"->ChemFormatsOBImport["YOB"]|>
		|>


(* ::Subsubsubsection::Closed:: *)
(*$ChemFormatConverters*)



	$ChemFormatConverters=
		Join[
			<|
				"MolTable"->
					Join[
						<|
							"ZMatrix"->
								ChemFormatsMolToZMatrix,
							"Rules"->
								ChemFormatsMolToRules,
							"String"->
								ChemFormatsMolToString
							|>,
						chemFormatConvertersStringBlock["MolTable"],
						chemFormatConvertersOBBlock["MolTable"]
						],
				"ZMatrix"->
					Join[
						<|
							"Table"->
								ChemFormatsZMatrixToMol,
							"Rules"->
								ChemFormatsMolToRules,
							"String"->
								ChemFormatsMolToString
							|>,
						chemFormatConvertersStringBlock["MolTable"],
						chemFormatConvertersOBBlock["MolTable"]
						],
				"MolRules"->
					Join[
						<|
							"String"->
								ChemFormatsMolRulesToString
							|>,
						chemFormatConvertersStringBlock["MolRules"],
						chemFormatConvertersOBBlock["MolRules"]
						],
				"SDFTable"->
					Join[
						<|
							"Rules"->
								ChemFormatsMolToRules,
							"String"->
								ChemFormatsMolToString
							|>,
						chemFormatConvertersStringBlock["SDFTable"],
						chemFormatConvertersOBBlock["SDFTable"]
						],
				"SDFRules"->
					Join[
						<|
							"String"->
								ChemFormatsMolRulesToString
							|>,
						chemFormatConvertersStringBlock["SDFRules"],
						chemFormatConvertersOBBlock["SDFRules"]
						]
				|>,
			MapIndexed[
				Join[#, chemFormatConvertersOBBlock[#2[[1, 1]]]]&,
				$chemFormatOBImports
				]
			]


(* ::Subsubsection::Closed:: *)
(*ChemFormatsConvert*)



ChemFormatsConvert//Clear
ChemFormatsConvert[data_, format_String->target_String, ops:OptionsPattern[]]:=
	Catch[
		PackageExceptionBlock["FormatConvert"]@
			Module[
				{
					converter=Quiet@$ChemFormatConverters[format, target],
					res
					},
				If[Head[converter]===Missing,
					PackageRaiseException[
						"FormatConvert",
						"Format conversion `` is currently unsupported",
						"MessageParameters"->{format->target}
						]
					];
				res=converter[data, ops];
				If[Head[res]===converter,
					PackageRaiseException[
						"FormatConvert",
						"Format conversion `` failed for data ``",
						"MessageParameters"->{format->target, data}
						]
					];
				res
				],
		_
		];
ChemFormatsConvert[data_, target_String, ops:OptionsPattern[]]:=
	Catch[
		PackageExceptionBlock["FormatConvert"]@
			ChemFormatsConvert[data, ChemFormatsDetect[data]->target, ops],
		_
		];
ChemFormatsConvert[ctype:(_String->_String)|_String][data_, ops:OptionsPattern[]]:=
	ChemFormatsConvert[data, ctype, ops]


PackageAddAutocompletions[
	ChemFormatsConvert,
	{
		None,
		Sort@DeleteDuplicates@Flatten@Map[Keys, Values@$ChemFormatConverters]
		}
	]


End[];



