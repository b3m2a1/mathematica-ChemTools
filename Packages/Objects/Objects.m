(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



PackageScopeBlock[
	ChemSysPattern::usage="";
	ChemSysVectorPattern::usage="";
	ChemObjPattern::usage="";
	ChemObjVectorPattern::usage="";
	ChemObjAllPattern::usage="";
	ChemSinglePattern::usage="";
	ChemVectorPattern::usage="";
	ChemAllPattern::usage="";
	ChemManyPattern::usage="";
	ChemOptionsPattern::usage="";
	];


$ChemicalSystems::usage="List of valid systems";
$ChemDefaultSystem::usage="Default chemical system";
CreateChemicalSystem::usage="Creates a ChemSystem object";
ChemObject::usage="General head for object";
ChemMethod::usage=
	"Inert head that specifies a method should be constructed";
ChemProperty::usage=
	"Inert head that specifies a method should be called";
$ChemObjects::usage=
	"Register of name->function|association pairs for defaulting new objects";


ChemAdd::usage="Adds an object to the system";
ChemCopy::usage="Copies an object in a system";
ChemDeepCopy::usage="Copies an object and anything it references";
ChemRemove::usage="Removes a system";


ChemApply::usage="Applies a function to an object's definitions";
ChemReplaceAll::usage="Applies replace all to an object's definitions";


ChemMerge::usage=
	"Merges the current object definitions with a new set";
ChemJoin::usage=
	"Uses Join to create a composite object of the objects and associations provided";


ChemAssociation::usage=
	"Gets the object association for an object";
ChemGet::usage="Gets a property of a system or object";
ChemGetRecursive::usage=
	"Recursively applies ChemGet and returns the total accumulated list";
ChemSet::usage="Sets a property of a system or object";
ChemSetDelayed::usage="Sets a property of a system or object delayed";
ChemThreadSet::usage=
	"A threaded version of ChemSet for vectors";
ChemThreadSetDelayed::usage=
	"A threaded version of ChemSetDelayed for vectors";
ChemUnset::usage=
	"Unsets a property of a system or object";


ChemMutate::usage=
	"Changes a property based on the current value";
ChemIncrement::usage=
	"Increments a property using either an user specified or automatic increment function";
ChemDecrement::usage=
	"Decrements a property using either an user specified or automatic decrement function";
ChemAppendTo::usage="Special form of ChemIncrement";
ChemDeleteFrom::usage="Special form of ChemDecrement";


ChemClear::usage="Clears systems matching a string pattern";


$ChemStoreBase::usage=
	"The object base for ChemStores";
$ChemStores::usage=
	"The current ChemStores";
$ChemCloudStore::usage=
	"The object base for cloud objects";
$ChemLocalStore::usage=
	"The object base for local objects";


ChemStore::usage=
	"A cached ChemObject";
ChemStores::usage=
	"A listing of ChemStores in a given location";
ChemSave::usage=
	"Saves an object or System to a ChemCacheObject";
ChemLoad::usage=
	"Reloads an object from a ChemCacheObject";


ChemAddReference::usage=
	"Adds references to an object";
ChemRemoveReference::usage=
	"Removes a reference to an object";
ChemReferences::usage=
	"Gets the references of an object";
ChemRecursiveReferences::usage=
	"Gets the total reference structure";
ChemRemoveRecursive::usage=
	"Removes a total reference structure";
ChemObjectQ::usage="Checks whether an object is really an object";
ChemInstanceQ::usage=
	"Checks whether an object is an instance of a type";


ChemSelect::usage=
	"Applies Select or Pick to an object";


CreateAtom::usage=
	"Creates an atom";
AtomMove::usage=
	"Moves an atom";
AtomRotate::usage=
	"Rotates an atom around a point or vector";
AtomTransform::usage=
	"Applies a tranform to the position of an atom";


AtomIsotopeQ::usage="Checks whether an atom is an isotope or not";


AtomBondedQ::usage="Checks whether a bond exists to another atom";
AtomCanBondQ::usage="Checks that a bond can be formed between two atoms";
AtomAddBond::usage="Adds a bond object to an atom's bond list";
AtomRemoveBond::usage="Removes a bond object from an atom's bond list";
AtomCreateBond::usage="Creates a bond to another atom";
AtomGetBonds::usage="Gets bonds to atoms matching a pattern";
AtomBreakBond::usage="Breaks a bond to another atom";


AtomColor::usage="Gets an atom color";
AtomPartialCharge::usage="Gets an atom partial charge";
AtomValenceChoices::usage=
	"Gets the multiple valence states and atom can be in";
AtomValence::usage="Gets an atom valence";
AtomHybridization::usage="Gets an atoms hybridization state";


AtomGraph::usage=
	"Generates a graph of the atoms and their connections";
AtomGraphScan::usage=
	"Scans an AtomGraph";


AtomGraphic::usage="Gets a 2D atom graphics object";
AtomGraphic3D::usage="Gets a 3D atom graphics object";


CreateBond::usage=
	"Creates a bond";


BondCanFormQ::usage="";
BondFormedQ::usage="";
BondForm::usage="Creates a bond";
BondBreak::usage="Breaks a bond";


BondCenter::usage=
	"Gets the raw bond center";
BondCenterOfMass::usage=
	"Gets the bond COM";
BondMove::usage=
	"Moves a bond";
BondRotate::usage=
	"Rotates a bond";
BondNormal::usage=
	"Comuptes the normal to a bond-point plane";
BondTransform::usage=
	"Applies a transform to a bond";
BondRotationTransform::usage=
	"Returns a RotationTransform on the bond axis";


BondPolarization::usage="Gets bond polarization";
BondVector::usage="Gets a bond vector";
BondDeviation::usage="Gets a bond's deviation from its standard distance";


BondColors::usage=
	"Returns the colors for a bond";
BondGraphic::usage="Gets a 2D bond graphics object";
BondGraphic3D::usage="Gets a 3D bond graphics object";


CreateAtomset::usage="Creates an atom set";


AtomsetAddAtom::usage="Adds an atom to an atomset";
AtomsetRemoveAtom::usage="Removes an atom from an atomset";
AtomsetGetAtoms::usage="Gets atoms matching a property";


AtomsetJoin::usage=
	"Creates a new atomset from a collection of atomsets";


AtomsetEmpiricalFormula::usage=
	"Pulls the empirical formula for the atomset";


AtomsetElementPositions::usage=
	"Returns element position pairs for all the atoms";
AtomsetNeighborMap::usage=
	"Returns a map of an atom and its neighbors";
AtomsetMolTable::usage=
	"Returns a mol table form of the atomset";


AtomsetSubstituteAtom::usage=
	"Substitutes in a new atom for an old one";


AtomsetBondsIndexed::usage=
	"Returns an {i1, i2, type} matrix";
AtomsetBonds::usage=
	"Returns the bonds an {i, j} -> b association"; 
AtomsetBondLengths::usage=
	"Returns the indices and length for each bond in the atomset";
AtomsetBondVectors::usage=
	"Returns the indices and bond vector for each bond";
AtomsetMeanBondLengths::usage="Returns the mean bond length by atom type";


AtomsetNormalizeBonds::usage=
	"Normalizes bonds against the standard lookup table";
AtomsetSetBondLengths::usage=
	"Sets bond lengths within an atomset";


AtomsetBounds::usage=
	"Applies CoordinateBounds to atomset";
AtomsetMassPositions::usage=
	"Returns mass position pairs for all the atoms";
AtomsetCenter::usage="Returns the center of the atomset";
AtomsetCenterOfMass::usage="Gets the center of pass of the Atomset";
AtomsetMove::usage="Moves an atom set";
AtomsetTransform::usage="Applies a matrix mult or transformation to the atoms";
AtomsetRotate::usage="Rotates an atom set";
AtomsetRotationTransform::usage=
	"Returns a rotation transform on an atom set";
AtomsetAxisAlign::usage=
	"Aligns the atomset along a pair of axis specs";
AtomsetAlign::usage=
	"Aligns the atomset with another atomset";


AtomsetInertialTensor::usage="Returns the inertial tensor of the atomset";
AtomsetInertialEigensystem::usage="Returns the eigensystem of the atomset";
AtomsetInertialSystem::usage="Returns inertial system of atomset";
AtomsetPrincipalAxes::usage=
	"Returns the principal axes of the system with sizes equal to the moments";


AtomsetSymmetryElements::usage=
	"Finds the symmetry elements of the specified atoms in the atomset";
AtomsetInertialSymmetry::usage=
	"Finds the symmetry elements of the atomset relating to the inertial axes";
AtomsetPointGroup::usage=
	"Guesses the atomset point group";


AtomsetVdWSurface::usage="Returns a mesh of the Van der Waals surface of the atomset";
AtomsetVdWVolume::usage="Returns the Van der Waals volume of the atomset";


AtomsetCompile::usage=
	"Macro to generate function over the atoms in an atomset";
AtomsetPointCompile::usage=
	"Version of AtomsetCompile with Point as the first argument";


AtomsetPartialCharges::usage=
	"Calculates the Gasteiger partial charges";
AtomsetElectricPotential::usage=
	"Uses the partial charges to generate an esp function";


AtomsetElectricPotentialMap::usage=
	"Plots the electric potential on the VdW surface";


AtomsetOrbitals::usage=
	"Calculates orbitals for an atomset";
AtomsetOrbitalsPlot::usage=
	"Plots orbitals as DensityPlot3D";


AtomsetEnergyScan::usage=
	"Scans atomset energy with molecules in different positions";


(*AtomsetPolarMoment::usage="Returns a polarization gradient vector";
AtomsetPolarCenter::usage=
	"Uses FixedPoint to follow the polarization vectors";
AtomsetPolarMomentPlot::usage=
	"Uses compiled PolarMoment to generate a ChemSurfacePlot";
AtomsetPolarization::usage=
	"Returns the vector from the center of an atomset to its polar center";*)


AtomsetGraph::usage="Returns the graph of the atomset";
AtomsetGraphScan::usage=
	"Applies a BFS or DFS scan to atomset";
AtomsetConnectedComponents::usage=
	"Returns the collection of connected components for the atomset";


AtomsetRings::usage=
	"Returns the collection of rings for the atomset";
AtomsetConjugatedSystems::usage=
	"Returns the collection of conjugated systems for the atomset";
AtomsetAromaticRings::usage=
	"Returns the collection of aromatic rings for the atomset";
AtomsetAromaticQ::usage=
	"Checks whether an atom or collection of atoms are aromatic";


AtomsetAtomMemberQ::usage=
	"Checks whether an atom or collection of atoms are of a certain type";


AtomsetGraphic::usage="Gets a 2D atom set graphics object";
AtomsetGraphic3D::usage="Gets a 3D bond graphics object";


(*CreateChemset::usage="Creates a chem object set";*)


(*ChemsetGraphic::usage="Gets a 2D atom set graphics object";
ChemsetGraphic3D::usage="Gets a 3D bond graphics object";*)


AtomsetWrapper::usage=
	"A wrapper that acts like an atomset that creates and deletes itself";


$ChemFormatObjects::usage="A switch for whether to format objects or not";


Begin["`Private`"];


(* Load the symbolic python package *)
ToPython;


ChemSysPattern=ChemObject[_]?ChemObjectQ;
ChemSysVectorPattern={ChemSysPattern..};
ChemObjPattern=ChemObject[_,_]?ChemObjectQ;
ChemObjVectorPattern={ChemObjPattern..};
ChemObjAllPattern=(ChemObjPattern|ChemObjVectorPattern);
ChemSinglePattern=(ChemObjPattern|ChemSysPattern);
ChemVectorPattern=(ChemObjVectorPattern|ChemSysVectorPattern);
ChemAllPattern=
	(ChemObjPattern|ChemObjVectorPattern|ChemSysPattern|ChemSysVectorPattern);
ChemManyPattern=ChemObjAllPattern|{ChemObjAllPattern..};
chemOptionsPatternBase=(_Rule|_RuleDelayed)...;
ChemOptionsPattern=
	chemOptionsPatternBase|{chemOptionsPatternBase}|{{chemOptionsPatternBase}..}


Get/@FileNames["*.m",PackageFilePath["Packages","Objects","ObjectCore_"]]


If[MatchQ[$ChemFormatObjects,Except[True|False]],$ChemFormatObjects=True];


Format[o_ChemObject/;($ChemFormatObjects&&ChemObjectQ@o)]:=
	With[{properties=Normal@o},
		RawBoxes@BoxForm`ArrangeSummaryBox[
			ChemObject,
			o,
			Replace[
				If[MissingQ@ChemGet[o,"Graphics3D"],
					None,
					ChemView[o,ImageSize->{28,28}]
					],{
				g_Graphics3D:>
					Graphics[{
						Inset[g]
						},
						ImageSize->{32,32},
						Frame->True,
						FrameTicks->False,
						Background->GrayLevel[.95],
						FrameStyle->GrayLevel[.8]
						],
				_->None
				}],
			{
				BoxForm`MakeSummaryItem[{"Type: ",
					("ObjectType"/.properties)},StandardForm]
				},
			Append[
				Replace[
					Take[
						Normal@
							KeySortBy[Switch[#,"ObjectReferences",1,_,0]&]@
							KeyDrop[properties,{"ObjectType","ObjectKey"}],
						UpTo[3]],
					(Rule|RuleDelayed)[key_,prop_]:>
						BoxForm`MakeSummaryItem[{
							TemplateApply["``: ",key],
							Short[prop/.{
								ChemObject[s_,k_]:>
									StringJoin@StringSplit[k,"-"->"-"][[;;-11]],
								ChemObject[s_]:>
									StringJoin@StringSplit[s,"-"->"-"][[;;-11]]
								},1]
							},StandardForm],
					1
					],
				If[Length@properties>5,
					"\[Ellipsis]",
					Nothing
					]
				],
			StandardForm
			]
		];


Format[m:ChemMethod[f_]/;$ChemFormatObjects]:=
	RawBoxes@BoxForm`ArrangeSummaryBox[
		ChemMethod,
		m,
		None,
		{
			BoxForm`MakeSummaryItem[{"Type: ","Bound Method"},StandardForm]
			},
		{
			BoxForm`MakeSummaryItem[{"Function",f},StandardForm]
			},
		StandardForm
		];


Format[m:ChemProperty[f_]]/;$ChemFormatObjects:=
	RawBoxes@BoxForm`ArrangeSummaryBox[
		ChemProperty,
		m,
		None,
		{
			BoxForm`MakeSummaryItem[{"Type: ","Bound Property"},StandardForm]
			},
		{
			BoxForm`MakeSummaryItem[{"Function",f},StandardForm]
			},
		StandardForm
		]


Format[AtomsetWrapper[a_?validAtomsetWrapperQ]]:=
	RawBoxes@BoxForm`ArrangeSummaryBox[
		AtomsetWrapper,
		AtomsetWrapper[a],
		None,
		{
			BoxForm`MakeSummaryItem[{"Atom Count: ",Length@a["Atoms"]},StandardForm],
			BoxForm`MakeSummaryItem[{"Bond Count: ",Length@a["Bonds"]},StandardForm]
			},
		{
			BoxForm`MakeSummaryItem[{"Atoms:",a["Atoms"]},StandardForm],
			BoxForm`MakeSummaryItem[{"Bonds: ",a["Bonds"]},StandardForm]
			},
		StandardForm
		];	


End[];



