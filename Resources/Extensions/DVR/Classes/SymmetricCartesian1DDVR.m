(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



ChemDVRBegin[];


$SymmetricCartesian1DDVR::usage="";


SymmetricCartesian1DDVRFormatGrid::usage="";
SymmetricCartesian1DDVRPoints::usage="";
SymmetricCartesian1DDVRKineticMatrix::usage=""
SymmetricCartesian1DDVRPotentialMatrix::usage=""
SymmetricCartesian1DDVRWavefunctions::usage=""
SymmetricCartesian1DDVRPlotFunction::usage=""


ChemDVRNeeds@"Cartesian1DDVR"


Begin["`Private`"];


SymmetricCartesian1DDVRPoints[
	points:{_Integer},
	X:{{_?NumericQ,_?NumericQ}}
	]:=
	With[{
		realPts=2
		},
		Take[
			Cartesian1DDVRPoints[
				points*2,
				X
				],
			points[[1]]
			]
		]


Options[SymmetricCartesian1DDVRKineticMatrix]=
	{
		"M"->1,
		"\[HBar]"->1
		};


SymmetricCartesian1DDVRKineticMatrix[grid_,ops:OptionsPattern[]]:=
	With[{xmin=Min@grid,xmax=Max@grid,points=Length@grid},
		With[{dx=(xmax-xmin)/points,m=OptionValue@"M",\[HBar]=OptionValue@"\[HBar]"},
			With[{
				f1=
					Compile[
						{{i, _Integer}, {j, _Integer}, {p, _Integer}},
						1./Sqrt[2]*(\[HBar] (-1)^(i-j))/(2.m dx^2)*
							(
								If[i==j,
									\[Pi]^2/3.,
									2/(i-j)^2
									]+2./( i + j - ( 2*p +1 ))^2
								)
						],
				f2=
					Compile[
						{{i, _Integer}, {j, _Integer}, {p, _Integer}},
						1./Sqrt[2]*(\[HBar] (-1)^(i-j))/(2m dx^2)*
							(
								If[i==j,
									\[Pi]^2/3.,
									2./(i-j)^2
									]-2./( i + j - ( 2*p +1 ))^2
								)
						],
				head=
					If[points>100000, ParallelTable, Table]
				},
				{
					head[
						f1[i, j, points],
						{i, points},
						{j, points}
						],
					head[
						f2[i, j, points],
						{i, points, 1, -1},
						{j, points, 1, -1}
						]
					}
				]
			]
		]


Options[SymmetricCartesian1DDVRPotentialMatrix]=
	{Function->((#/2)^2&)};
SymmetricCartesian1DDVRPotentialMatrix[grid_,ops:OptionsPattern[]]:=
	With[{func=OptionValue@Function},
		With[{A=func/@grid},
			{
				DiagonalMatrix@A,
				DiagonalMatrix@Reverse@A
				}
			]
		]


Options[SymmetricCartesian1DDVRWavefunctions]=
	Options[ChemDVRDefaultWavefunctions];
SymmetricCartesian1DDVRWavefunctions[
	T_, V_,
	ops:OptionsPattern[]
	]:=
	With[{
		chunks=
			MapThread[
				ChemDVRDefaultWavefunctions[
					#, 
					#2,
					"SortEnergies"->False,
					ops
					]&,
				{T, V}
				]
		},
		With[{riff=Map[Riffle@@chunks[[All, #]]&, Range[2]]},
			If[OptionValue["SortEnergies"]=!=False,
				#[[{1,2},Ordering[First@#]]]&@riff,
				riff
				]
			]
		]


Options[SymmetricCartesian1DDVRPlotFunction]=
	Options[Cartesian1DDVRPlotFunction]
SymmetricCartesian1DDVRPlotFunction[
	solutions_,
	grid_,
	potentialMatrices_,
	ops:OptionsPattern[]
	]:=
	Cartesian1DDVRPlotFunction[
			{
				solutions[[1]],
				MapIndexed[
					Join@@
					If[OddQ[#2[[1]]],
						{ Reverse[#], # },
						{ #, -Reverse[#]}
						]&,
					solutions[[2]]
					]
			},
		Join[
			grid,
			-Reverse[grid]
			],
		DiagonalMatrix@
			Join[
				Diagonal@potentialMatrices[[1]],
				Diagonal@potentialMatrices[[2]]
				],
		ops
		]


End[];


$SymmetricCartesian1DDVR=
	<|
		"Name"->"Symmetric Cartesian 1D",
		"Dimension"->1,
		"PointLabels"->{"x"|"y"|"z"},
		"Range"->{{-5,5}},
		"Grid"->SymmetricCartesian1DDVRPoints,
		"KineticEnergy"->SymmetricCartesian1DDVRKineticMatrix,
		"PotentialEnergy"->SymmetricCartesian1DDVRPotentialMatrix,
		"Wavefunctions"->SymmetricCartesian1DDVRWavefunctions,
		"View"->SymmetricCartesian1DDVRPlotFunction
		|>


ChemDVREnd[];


$SymmetricCartesian1DDVR



