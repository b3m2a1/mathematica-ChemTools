(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



ChemDVRBegin[];


Cartesian2DC2DVRFormatGrid::usage=""
Cartesian2DC2DVRPoints::usage=""
Cartesian2DC2DVRKineticMatrix::usage=""
Cartesian2DC2DVRPotentialMatrix::usage=""
Cartesian2DC2DVRWavefunctions::usage=""
Cartesian2DC2DVRPlotFunction::usage=""


ChemDVRNeeds/@{"Cartesian2DDVR", "Cartesian1DCsDVR"};


Begin["`Private`"];


Cartesian2DC2DVRPoints[
	points:{_Integer, _Integer},
	X:{{_?NumericQ,_?NumericQ}, {_?NumericQ,_?NumericQ}}:{{-10,10}, {-10,10}}
	]:=
	Table[
		{x, y},
		{x, 
			Cartesian1DCsDVRPoints[points[[{1}]], X[[{1}]]]
			},
		{y, 
			Cartesian1DDVRPoints[points[[{2}]], X[[{2}]]]
			}
		]


symmTCMBit=
	Compile[
		{
			{ix, _Integer}, {jx, _Integer},
			{iy, _Integer}, {jy, _Integer},
			{Np, _Integer},
			{\[HBar], _Real},
			{dx, _Real},{mx, _Real},
			{dy, _Real},{my, _Real}
			},
		If[ix == jx,
			 (
					(-1)^(iy - jy)*\[HBar]^2*
					If[iy == jy,
					 	Pi^2/3,
					 	2/(iy - jy)^2
						]
					)/(2*dy^2*my),
				0
				] +
		If[iy == jy,
			 (
					(-1)^(ix - jx)*\[HBar]^2*
					If[ix == jx,
					 	Pi^2/3,
					 	2/(ix - jx)^2
						]
					)/(2*dx^2*mx),
				0
				]
		]


With[{symmTCMBit=symmTCMBit},
symmPlus=
	Compile[
		{
			{ix, _Integer}, {jx, _Integer}, 
			{iNx, _Integer}, {jNx, _Integer}, 
			{iy, _Integer}, {jy, _Integer},
			{iNy, _Integer}, {jNy, _Integer},
			{Np, _Integer},
			{\[HBar], _Real},
			{dx, _Real},
			{mx, _Real},
			{dy, _Real},
			{my, _Real}
			},
			1/2*(
				symmTCMBit[
					ix, jx, 
					iy, jy, 
					Np, \[HBar], 
					dx, mx,
					dy, my
					]+
				symmTCMBit[
					iNx, jx, 
					iNy, jy, 
					Np, \[HBar], 
					dx, mx,
					dy, my
					]+
				symmTCMBit[
					ix, jNx, 
					iy, jNy, 
					Np, \[HBar], 
					dx, mx,
					dy, my
					]+
				symmTCMBit[
					iNx, jNx, 
					iNy, jNy, 
					Np, \[HBar], 
					dx, mx,
					dy, my
					]
				)
		]
	];


With[{symmTCMBit=symmTCMBit},
symmMinus=
	Compile[
		{
			{ix, _Integer}, {jx, _Integer}, 
			{iNx, _Integer}, {jNx, _Integer}, 
			{iy, _Integer}, {jy, _Integer},
			{iNy, _Integer}, {jNy, _Integer},
			{Np, _Integer},
			{\[HBar], _Real},
			{dx, _Real},
			{mx, _Real},
			{dy, _Real},
			{my, _Real}
			},
			1/2*(
				symmTCMBit[
					ix, jx, 
					iy, jy, 
					Np, \[HBar], 
					dx, mx,
					dy, my
					]-
				symmTCMBit[
					iNx, jx, 
					iNy, jy, 
					Np, \[HBar], 
					dx, mx,
					dy, my
					]-
				symmTCMBit[
					ix, jNx, 
					iy, jNy, 
					Np, \[HBar], 
					dx, mx,
					dy, my
					]+
				symmTCMBit[
					iNx, jNx, 
					iNy, jNy, 
					Np, \[HBar], 
					dx, mx,
					dy, my
					]
				)
		]
	];


Options[Cartesian2DC2DVRKineticMatrix]=
	{
		"m1"->1,
		"m2"->1,
		"\[HBar]"->1
		};
Cartesian2DC2DVRKineticMatrix[grid_,ops:OptionsPattern[]]:=
	Module[
		{
			\[HBar]=OptionValue["\[HBar]"],
			dx=Abs@*Subtract@@MinMax@grid[[All, 1, 1]], 
			xPoints=Length@grid,
			mx=OptionValue@"m1", 
			dy=Abs@*Subtract@@MinMax@grid[[1, All, 2]],
			yPoints=Length@grid[[1]],
			my=OptionValue@"m2",
			head
			},
		With[{f1=symmPlus, f2=symmMinus, Np=xPoints*yPoints},
			head=
				If[Np>100000, ParallelTable, Table];
			{
				head[
					With[
						{
							ix=1+Floor[(i-1)/(yPoints)], jx=1+Floor[(j-1)/(yPoints)],
							iNx=1+Floor[(Np-i)/(yPoints)], jNx=1+Floor[(Np-j)/(yPoints)],
							iy=Mod[i, yPoints, 1], jy=Mod[j, yPoints, 1],
							iNy=Mod[Np-i+1, yPoints, 1], jNy=Mod[Np-j+1, yPoints, 1]
							},
						f1[
							ix, jx,
							iNx, jNx,
							iy, jy,
							iNy, jNy,
							Np,
							\[HBar], 
							dx,
							mx,
							dy,
							my
							]
						],
					{i, xPoints*yPoints},
					{j, xPoints*yPoints}
					],
				head[
					With[
						{
							ix=1+Floor[(i-1)/(yPoints)], jx=1+Floor[(j-1)/(yPoints)],
							iNx=1+Floor[(Np-i)/(yPoints)], jNx=1+Floor[(Np-j)/(yPoints)],
							iy=Mod[i, yPoints, 1], jy=Mod[j, yPoints, 1],
							iNy=Mod[Np-i+1, yPoints, 1], jNy=Mod[Np-j+1, yPoints, 1]
							},
						f2[
							ix, jx,
							iNx, jNx,
							iy, jy,
							iNy, jNy,
							Np,
							\[HBar], 
							dx,
							mx,
							dy,
							my
							]
						],
					{i, xPoints*yPoints, 1, -1},
					{j, xPoints*yPoints, 1, -1}
					]
				}
			]
		]


Options[Cartesian2DC2DVRPotentialMatrix]={Function->(Norm[(#/2)^2]&)};
Cartesian2DC2DVRPotentialMatrix[grid_,ops:OptionsPattern[]]:=
	With[{func=OptionValue@Function},
		With[{A=func/@Flatten[grid, 1]},
			{
				DiagonalMatrix@A,
				DiagonalMatrix@Reverse@A
				}
			]
		]


Options[Cartesian2DC2DVRPlotFunction]=
	Options[Cartesian2DDVRPlotFunction]
Cartesian2DC2DVRPlotFunction[
	solutions_,
	grid_,
	potentialMatrices_,
	ops:OptionsPattern[]
	]:=
	Cartesian2DDVRPlotFunction[
		solutions,
		Join[
			Map[
				{-1, 1}*#&,
				Reverse[grid],
				{2}
				],
			grid
			],
		ArrayFlatten[
			{
				{potentialMatrices[[1]], 0},
				{0, potentialMatrices[[2]]}
				}
			],
		ops
		]


End[];


$Cartesian2DC2DVR=
	<|
		"Name"->"Cartesian 2D",
		"Dimension"->2,
		"PointLabels"->{"x"|"y"|"z", "x"|"y"|"z"},
		"Range"->{{-10,10}, {-10, 10}},
		"Grid"->Cartesian2DC2DVRPoints,
		"KineticEnergy"->Cartesian2DC2DVRKineticMatrix,
		"PotentialEnergy"->Cartesian2DC2DVRPotentialMatrix,
		"Wavefunctions"->Cartesian1DCsDVRWavefunctions,
		"View"->Cartesian2DC2DVRPlotFunction
		|>


ChemDVREnd[];


$Cartesian2DC2DVR



